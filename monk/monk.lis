Sections:
00: "seg7fc00" (7FC00-7FCC8)
01: "segc0000" (C0000-C3032)


Source: "monk.txt"
                            	     1: *
                            	     2:  include equates.txt

Source: "equates.txt"
                            	     1: ************************************************
                            	     2: *          Equate file for MONK ver 2.1        *
                            	     3: *          ----------------------------        *
                            	     4: * This file contains the hardware equates for  *
                            	     5: * MONK ver 2.1. It should be 'included' in     *
                            	     6: * each module of the program.                  *
                            	     7: ************************************************
                            	     8: *
                            	     9: **************************************
                            	    10: * Base addresses of the major blocks *
                            	    11: **************************************
                            	    12: prom     equ     $000C0000    Prom base address.
                            	    13: ram      equ     $0007fc00    Monk scratch ram base address.
                            	    14: io       equ     $000ff000    Input/output base address.
                            	    15: *
                            	    16: *************************************************
                            	    17: * Base addresses of buffers and jump tables etc *
                            	    18: *************************************************
                            	    19: s_stack  equ     $0007fdfe    Initial system stack.
                            	    20: u_stack  equ     $0007fdfe    Initial user stack.
                            	    21: *
                            	    22: j_table  equ     $0007fe00    Jump table base address.
                            	    23: *
                            	    24: cpmbase  equ     $00007000    CP/M 68k scratch ram.
                            	    25: *
                            	    26: text_bas equ     $00070000    text screen base address
                            	    27: text_siz equ     $00004b00    240lines * (640pixels / 8pixels per byte          )
                            	    28: grph_bas equ     $00074b00    graphics screen base address
                            	    29: grph_siz equ     $00009600    480lines * (640pixels / 8pixels per byte          )
                            	    30: *
                            	    31: rbuff    equ     $00028000    disk i/o read buffer
                            	    32: wbuff    equ     $00029400    disk i/o write buffer
                            	    33: wrbuff   equ     $0002a800    wini i/o read buffer
                            	    34: wwbuff   equ     $0002bc00    wini i/o write buffer
                            	    35: *
                            	    36: rd_base  equ     $0002d000    ramdisk base address
                            	    37: ed_base  equ     $000e0000    epromdisc base address
                            	    38: *
                            	    39: *************************************
                            	    40: * Peripheral device base addresses. *
                            	    41: *************************************
                            	    42: rms      equ     $000ffe00    RMS registers base address.
                            	    43: acia     equ     $000ff001    Acia base address.
                            	    44: rtc      equ     $000f0001    Real Time Clock Base Address
                            	    45: pia0     equ     $000ff101    Pia0 base address.
                            	    46: pia1     equ     $000ff201    Pia1 base address. (SCSI).
                            	    47: sound    equ     $000ff301    Sound generator base address.
                            	    48: fdc      equ     $000f4001    Floppy dics controller base address.
                            	    49: *
                            	    50: **************************************
                            	    51: * RMS register equates 68486 & 68487 *
                            	    52: **************************************
                            	    53: mem_map      equ $00      RMS memory map register.
                            	    54: mem_type     equ $24      Memory type and banks.
                            	    55: *
                            	    56: display_mode equ $01      List mode + lines/char row + bits/pel
                            	    57: video_op     equ $25      Video interlace + format.
                            	    58: sync_mode    equ $26      Sync mode and output.
                            	    59: int_stat     equ $02      Interrupt status.
                            	    60: *
                            	    61: border_col   equ $03      Wrap mode + mapa + video on + border colour.
                            	    62: vector_map   equ $06      Vector mapping register.
                            	    63: *
                            	    64: screen_base  equ $28      Virtual screen base address.
                            	    65: vert_scroll  equ $07      Vertical scroll register.
                            	    66: hori_scroll  equ $08      Horizontal scroll register.
                            	    67: *
                            	    68: drcs_tsa     equ $0a      DRCS definition table start.
                            	    69: to_dsa       equ $0c      True object table start.
                            	    70: fo_tsa       equ $0e      Fixed object table start.
                            	    71: collision    equ $18      Collison reports.
                            	    72: to_free      equ $04      True object free register.
                            	    73: *
                            	    74: rt_output    equ $1c      Real time output.
                            	    75: rt_input     equ $20      Real time input.
                            	    76: *
                            	    77: vert_off     equ $2c      Vertical offset register.
                            	    78: hori_off     equ $30      Horizontal offset register.
                            	    79: screen_size  equ $34      Virtual screen size.
                            	    80: screen_width equ $38      Virtual screen width.
                            	    81: *
                            	    82: clut         equ $40      Colour look up tables.
                            	    83: *
                            	    84: ********************************
                            	    85: * ACIA register equates  68681 *
                            	    86: ********************************
                            	    87: mode0    equ     00           Mode register A.
                            	    88: stat0    equ     02           Status reg A + Clock select reg.
                            	    89: com0     equ     04           Command reg A.
                            	    90: data0    equ     06           Xmit and recve reg.
                            	    91: *
                            	    92: mode1    equ     16           Mode register B.
                            	    93: stat1    equ     18           Status reg B + Clock select reg.
                            	    94: com1     equ     20           Command reg B.
                            	    95: data1    equ     22           Xmit and recve reg.
                            	    96: *
                            	    97: ipcr     equ     08           Input change reg + Aux control reg.
                            	    98: isr      equ     10           Interrupt mask + interrupt status.
                            	    99: ivr      equ     24           Interrupt vector register.
                            	   100: *
                            	   101: ctur0    equ     12           Counter timer upper register.
                            	   102: ctlr0    equ     14           Counter timer lower register.
                            	   103: *
                            	   104: sysreg   equ     26           Input port + output port config reg.
                            	   105: clrreg   equ     28           set (reset) output port bits + start cou          n
                            	   106: setreg   equ     30           reset (set) output port bits + stop coun          t
                            	   107: *
                            	   108: **************************
                            	   109: * ACIA parr port equates *
                            	   110: **************************
                            	   111: drv      equ     $80          bit7=drive select bit.
                            	   112: dden     equ     $40          bit6=drive density bit.
                            	   113: side     equ     $20          bit5=drive side select.
                            	   114: remote   equ     $10          bit4=local/remote video switch.
                            	   115: program  equ     $08          bit3=Program enable bit.
                            	   116: bell     equ     $04          bit2=Bell enable.
                            	   117: *
                            	   118: init_spare equ   2            Disk change flag.    switch0
                            	   119: init_ip  equ     3            Initial input port.  switch1
                            	   120: init_op  equ     4            Initial output port. switch2
                            	   121: a_boot   equ     5            Auto boot switch.    switch3
                            	   122: *
                            	   123: *******************************
                            	   124: * PIA register equates  68230 *
                            	   125: *******************************
                            	   126: pgcr     equ     $00          Port general control register.
                            	   127: pacr     equ     $0c          Port a control register.
                            	   128: pbcr     equ     $0e          Port b control register.
                            	   129: *
                            	   130: paddr    equ     $04          Port a data direction register.
                            	   131: pbddr    equ     $06          Port b data direction register.
                            	   132: *
                            	   133: padr     equ     $10          Port a data register.
                            	   134: pbdr     equ     $12          Port b data register.
                            	   135: *
                            	   136: psr      equ     $1a          Port status register.
                            	   137: *
                            	   138: ************************************
                            	   139: * Floppy disc register and command *
                            	   140: * equates.    WD1772               *
                            	   141: ************************************
                            	   142: fdccom   equ     fdc          fdc command register.
                            	   143: fdctrk   equ     fdc+2        fdc track register.
                            	   144: fdcsec   equ     fdc+4        fdc sector register.
                            	   145: fdcdat   equ     fdc+6        fdc data register.
                            	   146: *
                            	   147: stp      equ     $03          Drive stepping rate.
                            	   148: *
                            	   149: rstcmd   equ     $00+stp      Restore command.
                            	   150: seekcmd  equ     $10+stp      Seek command.
                            	   151: readcmd  equ     $90          Read command.
                            	   152: writecmd equ     $b0          Write command.
                            	   153: *
                            	   154: busy     equ     0            Fdc busy.
                            	   155: drq      equ     1            Data request.
                            	   156: *
                            	   157: *********************************
                            	   158: * SCSI pia register equates and *
                            	   159: * signal definitions.           *
                            	   160: *********************************
                            	   161: w_mode   equ     $00          pia mode register
                            	   162: w_dircn  equ     $04          pia data direction register a
                            	   163: w_setup  equ     $0c          pia port a submode control register
                            	   164: w_data   equ     $10          pia port a data register
                            	   165: w_cntrl  equ     $18          pia port c data (SCSI control lines)
                            	   166: w_status equ     $1a          pia port status register (ack + req)
                            	   167: * control register bit equates
                            	   168: w_busy   equ     0            SCSI busy line
                            	   169: w_cd     equ     1            SCSI command/data line
                            	   170: w_mess   equ     2            SCSI message line
                            	   171: w_io     equ     3            SCSI input/output line
                            	   172: w_sel    equ     4            SCSI select line
                            	   173: w_reset  equ     7            SCSI reset line
                            	   174: * status register equates
                            	   175: w_dreq   equ     0            SCSI req line edge
                            	   176: w_req    equ     4            SCSI req line level
                            	   177: w_dack   equ     1            SCSI ack line edge
                            	   178: w_ack    equ     5            SCSI ack line level
                            	   179: *
                            	   180: 
                            	   181: *

Source: "monk.txt"
                            	     3: *
                            	     4:  PAGE
                            	     5:  TTL MON_K    68k system services and debug routines
                            	     6:  LIST
                            	     7: **************************
                            	     8: **************************  
                            	     9: ** MONK   Ver 5.1       **  
                            	    10: ** D.A.Rumball   Jun 23 **  
                            	    11: **************************  
                            	    12: **************************
                            	    13: *
                            	    14: ******************************************
                            	    15: * This program is the core section of a  *
                            	    16: * general 68000 system monitor. It can   *
                            	    17: * be configured to a particular system   *
                            	    18: * by linking to other modules :-         *
                            	    19: *                                        *
                            	    20: *  OSSUBS......Contains the o/s          *
                            	    21: *              interface.                *
                            	    22: *  MINIT.......Contains the power on     *
                            	    23: *              and reset code.           *
                            	    24: *  EXCEPT......Contains the 68k          *
                            	    25: *              exception code.           *
                            	    26: *  CONSOLE.....Contains the console      *
                            	    27: *              driver code.              *
                            	    28: *  CHARS.......Font definitions.         *
                            	    29: *  GRAPHICS....Contains any system       *
                            	    30: *              code.                     *
                            	    31: *  DISK........Contains the disk driver  *
                            	    32: *              code.                     *
                            	    33: *  SUBS........Contains the code for any *
                            	    34: *              extra system subroutines. *
                            	    35: *  COMMANDS....Contains the command set. *
                            	    36: *  BOOT........Contains the boot routine.*
                            	    37: ******************************************
                            	    38: *
                            	    39: *
                            	    40:  PAGE
                            	    41:  include scratch.txt

Source: "scratch.txt"
                            	     1: **********************************
                            	     2: * MONK scratch storage locations *
                            	     3: **********************************
                            	     4:          ORG     ram
00:0007FC00 00000000        	     5:          ds.l    6            cursor data area.
00:0007FC04 *
00:0007FC18 00000000        	     6: ud       ds.l    8            Eight data registers.
00:0007FC1C *
00:0007FC38 00000000        	     7: ua       ds.l    7            Seven address registers.
00:0007FC3C *
00:0007FC54 00000000        	     8: usptr    ds.l    1            Stack pointer.
00:0007FC58 0000            	     9: usr      ds.w    1            Status register.
00:0007FC5A 00000000        	    10: upc      ds.l    1            Program counter.
                            	    11: *
00:0007FC5E 00              	    12: brkp     ds.b    30           Five breakpoints, six bytes each.
00:0007FC5F *
00:0007FC7C 00              	    13: bflg     ds.b    1            Breakpoint flag.
                            	    14: *
00:0007FC7D 00              	    15: iport    ds.b    1            Active input port.
00:0007FC7E 00              	    16: oport    ds.b    1            Active output port.
                            	    17: *
00:0007FC7F 00              	    18: p_down   ds.b    1            Power down detection byte.
00:0007FC80 00000000        	    19: rand     ds.l    1            Random number storage.
                            	    20: *
00:0007FC84 00              	    21: olddrv   ds.b    1            Old drive number
00:0007FC85 00              	    22: oldfdv   ds.b    1            Old floppy number
00:0007FC86 00              	    23: ftrack   ds.b    1            Old floppy track number
00:0007FC87 00              	    24: wtrk     ds.b    1            Floppy read track
00:0007FC88 00              	    25: rtrk     ds.b    1            Floppy write track
00:0007FC89 00              	    26: errcount ds.b    1            Floppy error count
00:0007FC8A 00              	    27: fdcerr   ds.b    1            Floppy error code
00:0007FC8B 00              	    28:          ds.b    1            Padding
00:0007FC8C 0000            	    29: dma_len  ds.w    1            Floppy data transfer length
                            	    30: *
00:0007FC8E 00              	    31: winidcb  ds.b    12           Hard disk DCB.
00:0007FC8F *
00:0007FC9A 0000            	    32: wrtrk    ds.w    1            Wini read track number
00:0007FC9C 0000            	    33: wwtrk    ds.w    1            Wini write track number
                            	    34: *
00:0007FC9E 00              	    35: sys_dcb  ds.b    1            System DCB. (logical drive)
00:0007FC9F 00              	    36:          ds.b    1            Physical drive.
00:0007FCA0 0000            	    37: track    ds.w    1            Track number.
00:0007FCA2 0000            	    38: sector   ds.w    1            Sector number.
00:0007FCA4 00000000        	    39: dma      ds.l    1            Data Move Address.
                            	    40: *
                            	    41: time_st  equ     hours        Real time clock scratch
00:0007FCA8 00              	    42: hours    ds.b    1            Hours
00:0007FCA9 00              	    43: mins     ds.b    1            Mins
00:0007FCAA 00              	    44: secs     ds.b    1            Secs
00:0007FCAB 00              	    45: dsecs    ds.b    1            Decimal secs
00:0007FCAC 00              	    46: year     ds.b    1            Year
00:0007FCAD 00              	    47: month    ds.b    1            Month
00:0007FCAE 00              	    48: date     ds.b    1            Day of month
00:0007FCAF 00              	    49: day      ds.b    1            Day of week
                            	    50: *
00:0007FCB0 0000            	    51: row      ds.w    1            Terminal emulator scratch (row)
00:0007FCB2 0000            	    52: col ds.w 1                    Col
00:0007FCB4 00              	    53: vduflags ds.b 1               Escape and inverse flags
00:0007FCB5 00              	    54:  ds.b 1                       Padding
00:0007FCB6 0000            	    55: offset ds.w 1                 Display offset
00:0007FCB8 0000            	    56: flash ds.w 1                  Flash cursor count
                            	    57: *
00:0007FCBA 0000            	    58: xpos ds.w 1                   Graphics routines scratch. (current x-coord)
00:0007FCBC 0000            	    59: ypos ds.w 1                   Current Y-coord
00:0007FCBE 0000            	    60: xtemp ds.w 1
00:0007FCC0 0000            	    61: ytemp ds.w 1
00:0007FCC2 0000            	    62: sidex ds.w 1                  Rectangle delta-x
00:0007FCC4 0000            	    63: sidey ds.w 1                  Rectangle delta-y
00:0007FCC6 0000            	    64: temp ds.w 1
                            	    65: *
                            	    66: 

Source: "monk.txt"
                            	    42: *
                            	    43: 
                            	    44:  ORG prom
                            	    45: *
                            	    46: *************************************************
                            	    47: * Exception jump table & subroutine jump table. *
                            	    48: *************************************************
                            	    49: *  Mapped to $0 after reset.
01:000C0000 0007FDFE        	    50:          dc.l    s_stack      Monitor stack.
01:000C0004 000C02FA        	    51:          dc.l    mcold        Monitor cold start.
01:000C0008 000C07AC        	    52:          dc.l    b_excpt      Bus error.
01:000C000C 000C07AE        	    53:          dc.l    a_excpt      Address error.
01:000C0010 000C07B0        	    54:          dc.l    i_excpt      Illegal instruction.
01:000C0014 000C07B2        	    55:          dc.l    d_excpt      Divide by zero.
01:000C0018 000C07B4        	    56:          dc.l    c_excpt      CHK exception.
01:000C001C 000C07B6        	    57:          dc.l    o_excpt      TRAPV exception.
01:000C0020 000C07B8        	    58:          dc.l    p_excpt      Privilege exception.
01:000C0024 000C07BA        	    59:          dc.l    t_excpt      Trace exception.
01:000C0028 000C07BC        	    60:          dc.l    x_excpt      L1010 emulation (illegal instruction).
01:000C002C 000C07BE        	    61:          dc.l    y_excpt      L1111 emulation (illegal instruction).
01:000C0030 FFFFFFFF        	    62:          dc.l    $ffffffff
01:000C0034 FFFFFFFF        	    63:          dc.l    $ffffffff
01:000C0038 FFFFFFFF        	    64:          dc.l    $ffffffff
01:000C003C 000C07C0        	    65:          dc.l    s_excpt      Uninitialised interrupt.
01:000C0040 FFFFFFFF        	    66:          dc.l    $ffffffff
01:000C0044 FFFFFFFF        	    67:          dc.l    $ffffffff
01:000C0048 FFFFFFFF        	    68:          dc.l    $ffffffff
01:000C004C FFFFFFFF        	    69:          dc.l    $ffffffff
01:000C0050 FFFFFFFF        	    70:          dc.l    $ffffffff
01:000C0054 FFFFFFFF        	    71:          dc.l    $ffffffff
01:000C0058 FFFFFFFF        	    72:          dc.l    $ffffffff
01:000C005C FFFFFFFF        	    73:          dc.l    $ffffffff
01:000C0060 000C07C0        	    74:          dc.l    s_excpt      Spurious interrupt.
                            	    75: *
                            	    76: * Autovectored interrupts.
                            	    77: *
01:000C0064 000C07C2        	    78:          dc.l    int          Interrupt level 1
01:000C0068 000C07C2        	    79:          dc.l    int          Interrupt level 2
01:000C006C 000C07C2        	    80:          dc.l    int          Interrupt level 3
01:000C0070 000C07C2        	    81:          dc.l    int          Interrupt level 4
01:000C0074 000C07C2        	    82:          dc.l    int          Interrupt level 5
01:000C0078 000C07C2        	    83:          dc.l    int          Interrupt level 6
01:000C007C 000C07C4        	    84:          dc.l    int7         Interrupt level 7
                            	    85: *
                            	    86: * Trap vectors
                            	    87: *
01:000C0080 000C07C6        	    88:          dc.l   trp           Unexpected trap.
01:000C0084 000C07C6        	    89:          dc.l   trp
01:000C0088 000C07C6        	    90:          dc.l   trp
01:000C008C 000C07C6        	    91:          dc.l   trp
01:000C0090 000C07C6        	    92:          dc.l   trp
01:000C0094 000C07C6        	    93:          dc.l   trp
01:000C0098 000C07C6        	    94:          dc.l   trp
01:000C009C 000C07C6        	    95:          dc.l   trp
01:000C00A0 000C07C6        	    96:          dc.l   trp
01:000C00A4 000C07C6        	    97:          dc.l   trp
01:000C00A8 000C07C6        	    98:          dc.l   trp
01:000C00AC 000C07C6        	    99:          dc.l   trp
01:000C00B0 000C07C6        	   100:          dc.l   trp
01:000C00B4 000C07C6        	   101:          dc.l   trp
01:000C00B8 000C07C8        	   102:          dc.l   trp14         Breakpoints.
01:000C00BC 000C07CA        	   103:          dc.l   trp15         User requests.
                            	   104: *
                            	   105: *
                            	   106: * Monitor jump table Copied to j_table on reset.
                            	   107: * jump table is a seies of 6 byte entries
                            	   108: * Class 1 routines.
01:000C00C0 4EF9000C02FA    	   109: jmp_tab  jmp   mcold        Monitor cold start.
01:000C00C6 4EF9000C0362    	   110:          jmp   mwarm        Monitor warm start.
01:000C00CC 4EF9000C03C6    	   111:          jmp   dummy        Spare slot.
01:000C00D2 4EF9000C03C6    	   112:          jmp   dummy        Spare slot.
01:000C00D8 4EF9000C03C6    	   113:          jmp   dummy        Spare slot.
01:000C00DE 4EF9000C03C6    	   114:          jmp   dummy        Spare slot.
01:000C00E4 4EF9000C03C6    	   115:          jmp   dummy        Spare slot.
01:000C00EA 4EF9000C03C6    	   116:          jmp   dummy        Spare slot.
                            	   117: * class 2 routines.
01:000C00F0 4EF9000C0C44    	   118:          jmp   status       Test for recieved character.
01:000C00F6 4EF9000C0C74    	   119:          jmp   inch1        Input character, no echo.
01:000C00FC 4EF9000C0C9C    	   120:          jmp   inch         Input character with echo.
01:000C0102 4EF9000C0C9E    	   121:          jmp   outch        Output character.
01:000C0108 4EF9000C03C6    	   122:          jmp   dummy        Spare slot.
01:000C010E 4EF9000C03C6    	   123:          jmp   dummy        Spare slot.
01:000C0114 4EF9000C03C6    	   124:          jmp   dummy        Spare slot.
01:000C011A 4EF9000C03C6    	   125:          jmp   dummy        Spare slot.
                            	   126: * Class 3 routines.
01:000C0120 4EF9000C03D8    	   127:          jmp   pdata1       Print a string.
01:000C0126 4EF9000C03CC    	   128:          jmp   pcrlf        Print a new line.
01:000C012C 4EF9000C03E8    	   129:          jmp   pstring      Print crlf + string.
01:000C0132 4EF9000C048E    	   130:          jmp   outs         Print a space.
01:000C0138 4EF9000C049A    	   131:          jmp   outns        Print multiple spaces.
01:000C013E 4EF9000C044E    	   132:          jmp   locase       Convert character to lower ca.
01:000C0144 4EF9000C03C6    	   133:          jmp   dummy        Spare slot.
01:000C014A 4EF9000C03C6    	   134:          jmp   dummy        Spare slot.
                            	   135: * Class 4 routines.
01:000C0150 4EF9000C0408    	   136:          jmp   inhex        Input multi digit hex number.
01:000C0156 4EF9000C03EC    	   137:          jmp   prompt       Print a string plus input hex
01:000C015C 4EF9000C0472    	   138:          jmp   outh           "    " one     "    "    "
01:000C0162 4EF9000C046C    	   139:          jmp   out2h          "    " two     "    "    "
01:000C0168 4EF9000C0466    	   140:          jmp   out4h          "    " four    "    "    "
01:000C016E 4EF9000C0460    	   141:          jmp   out8h        Print an eight digit hex numb.
01:000C0174 4EF9000C03C6    	   142:          jmp   dummy        Spare slot.
01:000C017A 4EF9000C03C6    	   143:          jmp   dummy        Spare slot.
                            	   144: * Class 5 routines.
01:000C0180 4EF9000C03F2    	   145:          jmp   delay        Delay routine.
01:000C0186 4EF9000C05D8    	   146:          jmp   beep         Beep buzzer.
01:000C018C 4EF9000C04A6    	   147:          jmp   random       Random number generator.
01:000C0192 4EF9000C0568    	   148:          jmp   getrtc       Get data from real time clock
01:000C0198 4EF9000C04F8    	   149:          jmp   putrtc       Put data to real time clock.
01:000C019E 4EF9000C05F4    	   150:          jmp   in           Write data to security ram.
01:000C01A4 4EF9000C0620    	   151:          jmp   out          Read data from b/b ram.
01:000C01AA 4EF9000C03C6    	   152:          jmp   dummy        Spare slot.
                            	   153: * Class 6 routines.
01:000C01B0 4EF9000C09FC    	   154:          jmp   select       Select drive.
01:000C01B6 4EF9000C0A4E    	   155: j_disk   jmp   restore      Recalibrate drive.
01:000C01BC 4EF9000C0A54    	   156:          jmp   seek         Seek to cylinder.
01:000C01C2 4EF9000C0A5A    	   157:          jmp   read         Read sector.
01:000C01C8 4EF9000C0A60    	   158:          jmp   write        Write sector.
01:000C01CE 4EF9000C03C6    	   159:          jmp   dummy        Spare slot.
01:000C01D4 4EF9000C03C6    	   160:          jmp   dummy        Spare slot.
01:000C01DA 4EF9000C03C6    	   161:          jmp   dummy        Spare slot.
                            	   162: * Class 7 routines.
01:000C01E0 4EF9000C0752    	   163:          jmp   dvs          Define virtual screen.
01:000C01E6 4EF9000C073E    	   164:          jmp   sync         Wait for vertical blanking.
01:000C01EC 4EF9000C074C    	   165:          jmp   load_lut     Load look up tables.
01:000C01F2 4EF9000C0758    	   166:          jmp   text         Display text screen.
01:000C01F8 4EF9000C0760    	   167:          jmp   hi_graph     Display 650 x 500 mono.
01:000C01FE 4EF9000C03C6    	   168:          jmp   dummy        Display 650 x 500 4 colour.
01:000C0204 4EF9000C075C    	   169:          jmp   lo_graph     Display 320 x 250 16 colour.
01:000C020A 4EF9000C0764    	   170:          jmp   clearg       Clear graphics space.
01:000C0210 4EF9000C0792    	   171:          jmp   border       Define boarder colour.
01:000C0216 4EF9000C0794    	   172:          jmp   setpen       Define `pen' style.
01:000C021C 4EF9000C076A    	   173:          jmp   move         Move drawing point.
01:000C0222 4EF9000C0796    	   174:          jmp   query        Return pel value.
01:000C0228 4EF9000C077E    	   175:          jmp   point        Plot point.
01:000C022E 4EF9000C0778    	   176:          jmp   line         Plot line.
01:000C0234 4EF9000C0784    	   177:          jmp   rect         Plot rectangle.
01:000C023A 4EF9000C0798    	   178:          jmp   circle       Plot circle.
01:000C0240 4EF9000C079A    	   179:          jmp   patdef       Define fill pattern.
01:000C0246 4EF9000C079C    	   180:          jmp   fill         Plot filled rectangle.
01:000C024C 4EF9000C079E    	   181:          jmp   flood        Arbituary area fill.
01:000C0252 4EF9000C07A0    	   182:          jmp   scroll       Scroll through virtual screen.
01:000C0258 4EF9000C07A2    	   183:          jmp   pan          Pan across virtual screen.
01:000C025E 4EF9000C07A4    	   184:          jmp   locate       Centre displayed area on cursor.
01:000C0264 4EF9000C07A6    	   185:          jmp   mouse        Return mouse status.
01:000C026A 4EF9000C07A8    	   186:          jmp   wordblt      Move block (word bounds) with logical mods.
01:000C0270 4EF9000C07AA    	   187:          jmp   bitblt       Move block (bit bounds) with logical mods.
01:000C0276 4EF9000C03C6    	   188:          jmp   dummy        Spare slot.
01:000C027C 4EF9000C03C6    	   189:          jmp   dummy        Spare slot.
01:000C0282 4EF9000C03C6    	   190:          jmp   dummy        Spare slot.
01:000C0288 4EF9000C03C6    	   191:          jmp   dummy        Spare slot.
01:000C028E 4EF9000C03C6    	   192:          jmp   dummy        Spare slot.
01:000C0294 4EF9000C03C6    	   193:          jmp   dummy        Spare slot.
01:000C029A 4EF9000C03C6    	   194:          jmp   dummy        Spare slot.
                            	   195: *
01:000C02A0 76352E3120632031	   196: copyrght dc.b    'v5.1 c 1986-2023'
01:000C02A8 3938362D32303233
01:000C02B0 442E52756D62616C	   197:          dc.b    'D.Rumball AVED'
01:000C02B8 6C2041564544
01:000C02BE 51              	   198:          dc.b    $51          Monk version number.
01:000C02BF 03              	   199:          dc.b    3            OP/SYS code (SK*DOS)
                            	   200: *
                            	   201: **************************************
                            	   202: * Start of monitor. Entered on reset *
                            	   203: **************************************
                            	   204: *
01:000C02C0 0C              	   205: hdr      dc.b    $0c,'** MONK 68000 monitor  Ver 5.1   D.A.Rumball 2023 **',0
01:000C02C1 2A2A204D4F4E4B20
01:000C02C9 3638303030206D6F
01:000C02D1 6E69746F72202056
01:000C02D9 657220352E312020
01:000C02E1 20442E412E52756D
01:000C02E9 62616C6C20323032
01:000C02F1 33202A2A
01:000C02F5 00
01:000C02F6 3D3D3E          	   206: prmpt    dc.b    '==>',0
01:000C02F9 00
                            	   207: *
                            	   208: * monitor cold start
01:000C02FA 46FC2700        	   209: mcold    move.w  #$2700,sr    Disable interrupts, supervisor.
                            	   210: *
01:000C02FE 207C00000000    	   211:          move.l  #$0,a0        Move exception vectors to low ram (48 vectors)
01:000C0304 227C000C0000    	   212:          move.l  #prom,a1
01:000C030A 303C002F        	   213:          move.w  #47,d0
01:000C030E 20D9            	   214: cloop    move.l  (a1)+,(a0)+
01:000C0310 51C8FFFC        	   215:          dbf     d0,cloop
                            	   216: *
01:000C0314 207C0007FE00    	   217:          move.l  #j_table,a0   Move jump table to ram.
01:000C031A 227C000C00C0    	   218:          move.l  #jmp_tab,a1
01:000C0320 303C007F        	   219:          move.w  #127,d0       
01:000C0324 20D9            	   220: jloop    move.l  (a1)+,(a0)+
01:000C0326 51C8FFFC        	   221:          dbf   d0,jloop
                            	   222: *
01:000C032A 0C3900AA0007FC7F	   223:          cmp.b   #$aa,p_down  Check scratch and clear if not valid.
01:000C0332 6718            	   224:          beq.s   ram_ok
01:000C0334 207C0007FC00    	   225:          move.l  #ram,a0
01:000C033A 4298            	   226: cloop1   clr.l   (a0)+        Clear out scratch storage space.
01:000C033C B1FC0007FE00    	   227:          cmp.l   #ram+512,a0
01:000C0342 66F6            	   228:          bne.s   cloop1
01:000C0344 13FC00AA0007FC7F	   229:          move.b  #$aa,p_down
                            	   230: *
01:000C034C 23FC0007FDFE0007	   231: ram_ok   move.l  #u_stack,usptr Set up user stack pointer.
01:000C0354 FC54
                            	   232: *
01:000C0356 610002F4        	   233:          bsr     minit      System dependent init code.
                            	   234: *
01:000C035A 41FAFF64        	   235:          lea     hdr(pc),a0 print  initial header
01:000C035E 61000088        	   236:          bsr     pstring
                            	   237: *
                            	   238: * monitor warm start
01:000C0362 41FAFF92        	   239: mwarm    lea     prmpt(pc),a0     
01:000C0366 61000080        	   240:          bsr     pstring
                            	   241: *
01:000C036A 61000930        	   242:          bsr     inch
01:000C036E 610000DE        	   243:          bsr     locase
01:000C0372 E180            	   244:          asl.l   #8,d0
01:000C0374 2200            	   245:          move.l  d0,d1
01:000C0376 61000924        	   246:          bsr     inch
01:000C037A 610000D2        	   247:          bsr     locase
01:000C037E D200            	   248:          add.b   d0,d1
                            	   249: *
01:000C0380 41FA0D50        	   250: parse    lea     comtab(pc),a0
01:000C0384 0C50FFFF        	   251: comloop  cmp.w   #$ffff,(a0)
01:000C0388 6732            	   252:          beq.s   notthere
01:000C038A B258            	   253:          cmp.w   (a0)+,d1
01:000C038C 6708            	   254:          beq.s   found
01:000C038E D1FC00000004    	   255:          add.l    #4,a0
01:000C0394 60EE            	   256:          bra.s   comloop
01:000C0396 2250            	   257: found    move.l  (a0),a1
01:000C0398 4ED1            	   258:          jmp     (a1)
                            	   259: *
01:000C039A 0D              	   260: nts      dc.b    $d,'Unknown command!, (?? for help)',7,0
01:000C039B 556E6B6E6F776E20
01:000C03A3 636F6D6D616E6421
01:000C03AB 2C20283F3F20666F
01:000C03B3 722068656C7029
01:000C03BA 07
01:000C03BB 00
01:000C03BC 41FAFFDC        	   261: notthere lea     nts(pc),a0
01:000C03C0 61000016        	   262:          bsr     pdata1
01:000C03C4 609C            	   263:          bra.s   mwarm
                            	   264: *
                            	   265: *
                            	   266: * Dummy routine.
01:000C03C6 4E75            	   267: dummy    rts     Dummy routine to do nothing.
                            	   268: *
                            	   269:  include subs.txt

Source: "subs.txt"
                            	     1: *******************************
                            	     2: * Common monitor subroutines. *
                            	     3: *******************************
                            	     4: *
                            	     5: * Print a CR & LF .
                            	     6: * Entry:- No parameters.
                            	     7: * Exit:-   No registers altered.
01:000C03C8 0D              	     8: crlfs    dc.b    $0d,$0a,0,0
01:000C03C9 0A
01:000C03CA 00
01:000C03CB 00
01:000C03CC 2F08            	     9: pcrlf    move.l  a0,-(sp)
01:000C03CE 41FAFFF8        	    10:          lea     crlfs(pc),a0
01:000C03D2 6104            	    11:          bsr.s   pdata1
01:000C03D4 205F            	    12:          move.l  (sp)+,a0
01:000C03D6 4E75            	    13:          rts
                            	    14: *
                            	    15: * Print character string, terminate with zero byte.
                            	    16: * Entry:- a0 points to string.
                            	    17: * Exit:-  a0 points to 1st byte past string.
01:000C03D8 2F00            	    18: pdata1   move.l  d0,-(sp)
01:000C03DA 1018            	    19: pdloop   move.b  (a0)+,d0
01:000C03DC 6706            	    20:          beq.s   pdend
01:000C03DE 610008BE        	    21:          bsr     outch
01:000C03E2 60F6            	    22:          bra.s   pdloop
01:000C03E4 201F            	    23: pdend    move.l  (sp)+,d0
01:000C03E6 4E75            	    24:          rts
                            	    25: *
                            	    26: * Print character string preceded by a CR-LF.
                            	    27: * Entry:- a0 points to string.
                            	    28: * Exit:- a0 points to 1st byte past string.
01:000C03E8 61E2            	    29: pstring  bsr.s   pcrlf
01:000C03EA 60EC            	    30:          bra.s   pdata1
                            	    31: *
                            	    32: * Prompt routine, print string followed by hex input.
                            	    33: * Entry:- a0 points to string.
                            	    34: * Exit:-  d1 contains hex input.
01:000C03EC 61EA            	    35: prompt   bsr.s   pdata1
01:000C03EE 6118            	    36:          bsr.s   inhex
01:000C03F0 4E75            	    37:          rts
                            	    38: *
                            	    39: * Delay routine.
                            	    40: * Entry:- d1 = delay in milli secs.
                            	    41: * Exit:-   No registers altered.
01:000C03F2 48E7C000        	    42: delay    movem.l d0-d1,-(sp)
01:000C03F6 303C0190        	    43: dloop1   move.w  #400,d0
01:000C03FA 51C8FFFE        	    44: dloop2   dbf     d0,dloop2
01:000C03FE 51C9FFF6        	    45:          dbf     d1,dloop1
01:000C0402 4CDF0003        	    46:          movem.l (sp)+,d0-d1
01:000C0406 4E75            	    47:          rts
                            	    48: *
                            	    49: * Input n-digit hex number, terminate on a space.
                            	    50: * Entry:- No parameters.
                            	    51: * Exit:- d1 = number.
01:000C0408 2F00            	    52: inhex    move.l  d0,-(sp)
01:000C040A 4281            	    53:          clr.l   d1
01:000C040C 6100088E        	    54: inhex1   bsr     inch
01:000C0410 B03C0020        	    55:          cmp.b   #' ',d0
01:000C0414 6604            	    56:          bne.s   inhex2
01:000C0416 201F            	    57:          move.l  (sp)+,d0
01:000C0418 4E75            	    58:          rts
01:000C041A 6132            	    59: inhex2   bsr.s   locase
01:000C041C 903C0030        	    60:          sub.b   #'0',d0
01:000C0420 6B1C            	    61:          bmi.s   nothex
01:000C0422 B03C0009        	    62:          cmp.b   #9,d0
01:000C0426 6F10            	    63:          ble.s   inhex3
01:000C0428 B03C0031        	    64:          cmp.b   #$31,d0
01:000C042C 6B10            	    65:          bmi.s   nothex
01:000C042E B03C0036        	    66:          cmp.b   #$36,d0
01:000C0432 6E0A            	    67:          bgt.s   nothex
01:000C0434 903C0027        	    68:          sub.b   #39,d0
01:000C0438 E981            	    69: inhex3   asl.l #4,d1
01:000C043A D280            	    70:          add.l   d0,d1
01:000C043C 60CE            	    71:          bra.s   inhex1
01:000C043E 7008            	    72: nothex   moveq #8,d0
01:000C0440 6100085C        	    73:          bsr     outch
01:000C0444 6148            	    74:          bsr.s   outs
01:000C0446 61000856        	    75:          bsr     outch
01:000C044A 6000FFC0        	    76:          bra     inhex1
                            	    77: *
                            	    78: * Convert character from upper to lower case.
                            	    79: * Entry:- d0 = character
                            	    80: * Exit:-  d0 = converted character.
01:000C044E B03C0041        	    81: locase   cmp.b   #'A',d0
01:000C0452 650A            	    82:          bcs.s   loc1
01:000C0454 B03C005A        	    83:          cmp.b   #'Z',d0
01:000C0458 6204            	    84:          bhi.s   loc1
01:000C045A 06000020        	    85:          addi.b  #'a'-'A',d0
01:000C045E 4E75            	    86: loc1     rts
                            	    87: *
                            	    88: * Hex print routines.
                            	    89: * Entry:- d0 = number to print.
                            	    90: * Exit:-  No registers altered.
01:000C0460 4840            	    91: out8h    swap    d0
01:000C0462 6102            	    92:          bsr.s   out4h
01:000C0464 4840            	    93:          swap    d0
01:000C0466 E058            	    94: out4h    ror.w   #8,d0
01:000C0468 6102            	    95:          bsr.s   out2h
01:000C046A E158            	    96:          rol.w   #8,d0
01:000C046C E818            	    97: out2h    ror.b   #4,d0
01:000C046E 6102            	    98:          bsr.s   outh
01:000C0470 E918            	    99:          rol.b   #4,d0
01:000C0472 2F00            	   100: outh     move.l  d0,-(sp)
01:000C0474 C03C000F        	   101:          and.b   #$0f,d0
01:000C0478 D03C0030        	   102:          add.b   #'0',d0
01:000C047C B03C0039        	   103:          cmp.b   #'9',d0
01:000C0480 6304            	   104:          bls.s   out1
01:000C0482 D03C0007        	   105:          add.b   #'A'-'9'-1,d0
01:000C0486 61000816        	   106: out1     bsr     outch
01:000C048A 201F            	   107:          move.l  (sp)+,d0
01:000C048C 4E75            	   108:          rts
                            	   109: *
                            	   110: * Print a space.
                            	   111: * Entry:- No parameters.
                            	   112: * Exit:-   No registers altered.
01:000C048E 2F00            	   113: outs     move.l  d0,-(sp)
01:000C0490 7020            	   114:          moveq   #' ',d0
01:000C0492 6100080A        	   115:          bsr     outch
01:000C0496 201F            	   116:          move.l  (sp)+,d0
01:000C0498 4E75            	   117:          rts
                            	   118: *
                            	   119: * print n spaces.
                            	   120: * Entry:- d2 = number of spaces.
                            	   121: * Exit:-   No registers altered.
01:000C049A 2F02            	   122: outns    move.l  d2,-(sp)
01:000C049C 61F0            	   123: outns1   bsr.s   outs
01:000C049E 51CAFFFC        	   124:          dbf     d2,outns1
01:000C04A2 241F            	   125:          move.l  (sp)+,d2
01:000C04A4 4E75            	   126:          rts
                            	   127: *
                            	   128: * Random number generator.
                            	   129: * Entry :- if       (d0)  = 0   then   0 <= random number <= 255
                            	   130: *          if  1 <= (d0) <= 255 then   0 <= random number <= (d0)
                            	   131: *          if       (d0)  > 255 then (d0) = new seed
                            	   132: * Exit  :- (d0) = 8 bit random number.
01:000C04A6 48E76000        	   133: random   movem.l d1-d2,-(sp)
01:000C04AA B0BC000000FF    	   134:          cmp.l   #255,d0      >255?
01:000C04B0 6F08            	   135:          ble.s   r1
01:000C04B2 23C00007FC80    	   136:          move.l  d0,rand      New seed.
01:000C04B8 4280            	   137:          clr.l   d0
01:000C04BA 4A80            	   138: r1       tst.l   d0           =0?
01:000C04BC 6606            	   139:          bne.s   r2
01:000C04BE 203C000000FF    	   140:          move.l  #255,d0
01:000C04C4 2400            	   141: r2       move.l  d0,d2
01:000C04C6 610A            	   142: r3       bsr.s   r4
01:000C04C8 B002            	   143:          cmp.b   d2,d0
01:000C04CA 62FA            	   144:          bhi.s   r3
01:000C04CC 4CDF0006        	   145:          movem.l (sp)+,d1-d2
01:000C04D0 4E75            	   146:          rts
                            	   147: *
01:000C04D2 7207            	   148: r4       moveq   #7,d1
01:000C04D4 20390007FC80    	   149:          move.l  rand,d0
01:000C04DA E398            	   150: randloop rol.l   #1,d0
01:000C04DC 0800001D        	   151:          btst.l  #29,d0
01:000C04E0 6704            	   152:          beq.s   r5
01:000C04E2 08400000        	   153:          bchg.l  #0,d0
01:000C04E6 51C9FFF2        	   154: r5       dbf     d1,randloop
01:000C04EA 23C00007FC80    	   155:          move.l  d0,rand
01:000C04F0 C0BC000000FF    	   156:          and.l   #255,d0
01:000C04F6 4E75            	   157:          rts
                            	   158: *
                            	   159: *
                            	   160:  PAGE
                            	   161: *
                            	   162: * Send the time string to the real time clock.
                            	   163: * Entry :- a0 points to eight byte time string.
                            	   164: * Exit :- No registers altered.
01:000C04F8 48E7C080        	   165: putrtc   movem.l d0-d1/a0,-(sp)
                            	   166: *
01:000C04FC 13FC0004000F0003	   167:          move.b #4,$F0003 hours
01:000C0504 13D8000F0001    	   168:          move.b (a0)+,$F0001
01:000C050A 13FC0002000F0003	   169:          move.b #2,$F0003 mins
01:000C0512 13D8000F0001    	   170:          move.b (a0)+,$F0001
01:000C0518 13FC0000000F0003	   171:          move.b #0,$F0003 secs
01:000C0520 13D8000F0001    	   172:          move.b (a0)+,$F0001
01:000C0526 10FC0000        	   173:          move.b #0,(a0)+ decimal secs
                            	   174: *
01:000C052A 13FC0009000F0003	   175:          move.b #9,$F0003 year
01:000C0532 13D8000F0001    	   176:          move.b (a0)+,$F0001
01:000C0538 13FC0008000F0003	   177:          move.b #8,$F0003 month
01:000C0540 13D8000F0001    	   178:          move.b (a0)+,$F0001
01:000C0546 13FC0007000F0003	   179:          move.b #7,$F0003 date
01:000C054E 13D8000F0001    	   180:          move.b (a0)+,$F0001
01:000C0554 13FC0006000F0003	   181:          move.b #6,$F0003 day
01:000C055C 13D8000F0001    	   182:          move.b (a0)+,$F0001
                            	   183: *
01:000C0562 4CDF0103        	   184:          movem.l (sp)+,d0-d1/a0
01:000C0566 4E75            	   185:          rts
                            	   186: *
                            	   187: * Get a time string from the real time clock.
                            	   188: * Entry :- (a0) pointer to eight byte time space.
                            	   189: * Exit :- no registers altered.
01:000C0568 48E78080        	   190: getrtc   movem.l d0/a0,-(sp)
                            	   191: *
01:000C056C 13FC0004000F0003	   192:          move.b #4,$F0003 hours
01:000C0574 10F9000F0001    	   193:          move.b $F0001,(a0)+
01:000C057A 13FC0002000F0003	   194:          move.b #2,$F0003 mins
01:000C0582 10F9000F0001    	   195:          move.b $F0001,(a0)+
01:000C0588 13FC0000000F0003	   196:          move.b #0,$F0003 secs
01:000C0590 10F9000F0001    	   197:          move.b $F0001,(a0)+
01:000C0596 10FC0000        	   198:          move.b #0,(a0)+ decimal secs
                            	   199: *
01:000C059A 13FC0009000F0003	   200:          move.b #9,$F0003 year
01:000C05A2 10F9000F0001    	   201:          move.b $F0001,(a0)+
01:000C05A8 13FC0008000F0003	   202:          move.b #8,$F0003 month
01:000C05B0 10F9000F0001    	   203:          move.b $F0001,(a0)+
01:000C05B6 13FC0007000F0003	   204:          move.b #7,$F0003 date
01:000C05BE 10F9000F0001    	   205:          move.b $F0001,(a0)+
01:000C05C4 13FC0006000F0003	   206:          move.b #6,$F0003 day
01:000C05CC 10F9000F0001    	   207:          move.b $F0001,(a0)+
01:000C05D2 4CDF0101        	   208:          movem.l (sp)+,d0/a0
01:000C05D6 4E75            	   209:          rts
                            	   210: 
                            	   211: *
                            	   212: * Beep - sound buzzer for 100ms.
                            	   213: * Entry :- no parameters.
                            	   214: * Exit :- no registers altered.
01:000C05D8 2F01            	   215: beep     move.l  d1,-(sp)
01:000C05DA 13FC00FF000FF111	   216:          move.b  #$FF,$FF111
01:000C05E2 7219            	   217:          moveq   #25,d1
01:000C05E4 6100FE0C        	   218:          bsr     delay
01:000C05E8 13FC0000000FF111	   219:          move.b  #$0,$FF111
01:000C05F0 221F            	   220:          move.l  (sp)+,d1
01:000C05F2 4E75            	   221:          rts
                            	   222: *
                            	   223: * IN Put data in security b/b ram.
                            	   224: * Entry :- a0 = pointer to data in main ram
                            	   225: *          a1 = pointer into b/b ram
                            	   226: *          d0 = number of bytes to xfer
                            	   227: * Exit :-  no registers altered
01:000C05F4 48E780C0        	   228: in       movem.l d0/a0-a1,-(sp)
01:000C05F8 5340            	   229:          subq    #1,d0        adjust for dbf count
01:000C05FA 13FC0008000FF01F	   230:          move.b  #$08,acia+30 enable b/b ram
01:000C0602 D3FC000F0001    	   231:          add.l   #rtc,a1       add b/b base address
01:000C0608 1298            	   232: in_loop  move.b  (a0)+,(a1)   move data byte
01:000C060A 43E90002        	   233:          lea.l   2(a1),a1     adjust for low byte addressing
01:000C060E 51C8FFF8        	   234:          dbf     d0,in_loop
01:000C0612 13FC0008000FF01D	   235:          move.b  #$08,acia+28 disable b/b ram
01:000C061A 4CDF0301        	   236:          movem.l (sp)+,d0/a0-a1
01:000C061E 4E75            	   237:          rts
                            	   238: *
                            	   239: * OUT Get data from security b/b ram.
                            	   240: * Entry :- a0 = pointer to data in main ram
                            	   241: *          a1 = pointer into b/b ram
                            	   242: *          d0 = number of bytes to xfer
                            	   243: * Exit :-  no registers altered
01:000C0620 48E780C0        	   244: out      movem.l d0/a0-a1,-(sp)
01:000C0624 5340            	   245:          subq    #1,d0        adjust for dbf count
01:000C0626 13FC0008000FF01F	   246:          move.b  #$08,acia+30 enable b/b ram
01:000C062E D3FC000F0001    	   247:          add.l   #rtc,a1       add b/b base address
01:000C0634 10D1            	   248: out_loop move.b  (a1),(a0)+   move data byte
01:000C0636 43E90002        	   249:          lea.l   2(a1),a1     adjust for low byte addressing
01:000C063A 51C8FFF8        	   250:          dbf     d0,out_loop
01:000C063E 13FC0008000FF01D	   251:          move.b  #$08,acia+28 disable b/b ram
01:000C0646 4CDF0301        	   252:          movem.l (sp)+,d0/a0-a1
01:000C064A 4E75            	   253:          rts
                            	   254: *
                            	   255: 

Source: "monk.txt"
                            	   270: *
                            	   271:  include minit.txt

Source: "minit.txt"
                            	     1: *************************
                            	     2: * machine specific init *
                            	     3: *************************
                            	     4: *
                            	     5: * Initialise RMS.
01:000C064C 207C000FFE00    	     6: minit move.l #rms,a0
                            	     7: *
                            	     8: * Initialise screen to text.
01:000C0652 61000A20        	     9: clt      bsr     cleart
                            	    10: *
                            	    11: * Initialise floppy disc controller.
01:000C0656 13FC00FF0007FC88	    12:  move.b #$ff,rtrk
01:000C065E 13FC00FF0007FC87	    13:  move.b #$ff,wtrk
01:000C0666 33FCFFFF0007FC9A	    14:  move.w #$ffff,wrtrk
01:000C066E 33FCFFFF0007FC9C	    15:  move.w #$ffff,wwtrk
                            	    16: *         move.b  $0,fdc
                            	    17: *
                            	    18: * Initialise acia.
                            	    19: *         move.l  #acia,a0      Initailise acia. (1200 baud)
                            	    20: *         move.b  #$0,com0(a0) flush ACIA (USB) buffers
                            	    21: *
                            	    22: * Initialise rtc
01:000C0676 41F90007FCA8    	    23:         lea.l time_st,a0
01:000C067C 4EB9000C0568    	    24:         jsr getrtc
                            	    25: *
                            	    26: * Initialise system pia.
                            	    27: *
                            	    28: * Initialise buss watchdog to 50ms.
                            	    29: *         move.b  #$b3,$ff121
                            	    30: *         move.b  #$00,$ff127
                            	    31: *         move.b  #$30,$ff129
                            	    32: *         move.b  #$85,$ff12b
                            	    33: *
                            	    34: * Initialise SASI pia.
                            	    35: *         lea.l   pia1,a0
                            	    36: *         move.b  #$1c,(a0)
                            	    37: *         moveq   #0,d0
                            	    38: *         move.b  d0,$02(a0)
                            	    39: *         move.b  d0,$04(a0)
                            	    40: *         move.b  d0,$08(a0)
                            	    41: *         move.b  d0,$20(a0)
                            	    42: *         move.b  #$ff,$10(a0)
                            	    43: *         move.b  #$ff,$18(a0)
                            	    44: *         move.b  #$90,$08(a0)
                            	    45: *         move.b  #$a0,$0c(a0)
                            	    46: *
                            	    47: * Seed random number generator.
01:000C0682 303C0300        	    48:          move.w  #$300,d0
01:000C0686 6100FE1E        	    49:          bsr     random
                            	    50: *
                            	    51: * Initialse sysreg and set initial input and output ports.
01:000C068A 1039000FF111    	    52:          move.b  $FF111,d0 SYSREG is now porta of PAI0
01:000C0690 08000003        	    53:          btst  #init_ip,d0
01:000C0694 660A            	    54:          bne.s   is1
01:000C0696 13FC00000007FC7D	    55:          move.b  #0,iport
01:000C069E 6008            	    56:          bra.s   is2
01:000C06A0 13FC00040007FC7D	    57: is1      move.b  #4,iport 4 bytes per jump table entry
01:000C06A8 08000004        	    58: is2      btst  #init_op,d0
01:000C06AC 660A            	    59:          bne.s   is3
01:000C06AE 13FC00000007FC7E	    60:          move.b  #0,oport
01:000C06B6 6008            	    61:          bra.s   is4
01:000C06B8 13FC00040007FC7E	    62: is3      move.b  #4,oport
01:000C06C0 08000005        	    63: is4      btst  #a_boot,d0
                            	    64: *         bnq     boot
01:000C06C4 4E75            	    65:          rts
                            	    66: *
                            	    67: 

Source: "monk.txt"
                            	   272: *
                            	   273:  include graphics.txt

Source: "graphics.txt"
                            	     1: *******************************
                            	     2: * Microbox III graphics code  *
                            	     3: *******************************
                            	     4: * Ver 0.1 Aug 85
                            	     5: *
                            	     6: * Graphics constants.
01:000C06C6 0000            	     7: mono_lut dc.w    $0000,$ffff,$ffff,$ffff,$ffff,$ffff,$ffff,$ffff
01:000C06C8 FFFF
01:000C06CA FFFF
01:000C06CC FFFF
01:000C06CE FFFF
01:000C06D0 FFFF
01:000C06D2 FFFF
01:000C06D4 FFFF
01:000C06D6 0000            	     8: grey_lut dc.w    $0000,$0111,$0222,$0333,$0444,$0555,$0666,$0777
01:000C06D8 0111
01:000C06DA 0222
01:000C06DC 0333
01:000C06DE 0444
01:000C06E0 0555
01:000C06E2 0666
01:000C06E4 0777
01:000C06E6 0000            	     9: col_lut  dc.w    $0000,$0f00,$00f0,$0ff0,$000f,$0f0f,$00ff,$0fff
01:000C06E8 0F00
01:000C06EA 00F0
01:000C06EC 0FF0
01:000C06EE 000F
01:000C06F0 0F0F
01:000C06F2 00FF
01:000C06F4 0FFF
                            	    10: *
                            	    11: *                base addr  vert off  hori off    size     width
01:000C06F6 00070000        	    12: txttab   dc.l    $00070000,$00000000,$00000000,$00004b00,$00000050
01:000C06FA 00000000
01:000C06FE 00000000
01:000C0702 00004B00
01:000C0706 00000050
01:000C070A 00074B00        	    13: hitab    dc.l    $00074b00,$00000000,$00000000,$00009600,$00000050
01:000C070E 00000000
01:000C0712 00000000
01:000C0716 00009600
01:000C071A 00000050
01:000C071E 00074B00        	    14: lotab    dc.l    $00074b00,$00000000,$00000000,$00009600,$00000080
01:000C0722 00000000
01:000C0726 00000000
01:000C072A 00009600
01:000C072E 00000080
                            	    15: *
                            	    16: *
                            	    17: * Low level routines.
                            	    18: * 'Fix' for RMS bugs.
01:000C0732 10280000        	    19: bload    move.b  0(a0),d0
01:000C0736 4E75            	    20:          rts
01:000C0738 11400003        	    21: bstore   move.b  d0,3(a0)
01:000C073C 4E75            	    22:          rts
                            	    23: *
                            	    24: * SYNC   Wait for v blanking.
01:000C073E 08390001000FFE02	    25: sync     btst.b  #1,rms+2
01:000C0746 4E75            	    26:          rts
                            	    27: *
                            	    28: * MOVE_B  Move (d0) byte from (a0) to (a1).
01:000C0748 5340            	    29: move_b   subq #1,d0
01:000C074A 4E75            	    30:          rts
                            	    31: *
                            	    32: * LOAD_LUT   Load luts from (a0).  (32 words).
01:000C074C 48E78040        	    33: load_lut movem.l d0/a1,-(sp)
01:000C0750 4E75            	    34:          rts
                            	    35: *
                            	    36: * DVS   Define virtual screen (a0) pointer to table.
01:000C0752 48E78040        	    37: dvs      movem.l a1/d0,-(sp)
01:000C0756 4E75            	    38:          rts
                            	    39: *
                            	    40: * TEXT   Display text screen.
01:000C0758 2F08            	    41: text     move.l  a0,-(sp)
01:000C075A 4E75            	    42:          rts
                            	    43: *
                            	    44: * LO_GRAPH  Display lo-res graphics screen.
01:000C075C 2F08            	    45: lo_graph  move.l  a0,-(sp)
01:000C075E 4E75            	    46:          rts
                            	    47: *
                            	    48: * HI_GRAPH   Display hi-res graphics screen.
01:000C0760 2F08            	    49: hi_graph move.l  a0,-(sp)
01:000C0762 4E75            	    50:          rts
                            	    51: *
                            	    52: * CLEARG   Clear graphics area.
01:000C0764 48E7C080        	    53: clearg   movem.l d0-d1/a0,-(sp)
01:000C0768 4E75            	    54:          rts
                            	    55: *
                            	    56: * MOVE(X,Y)  Move cursor.
01:000C076A 33C00007FCBA    	    57: move     move.w  d0,xpos
01:000C0770 33C10007FCBC    	    58:          move.w  d1,ypos
01:000C0776 4E75            	    59:          rts
                            	    60: *
                            	    61: * LINE(X,Y)   Plot a line to x,y.
01:000C0778 48E70F40        	    62: line movem.l d4-d7/a1,-(sp)
01:000C077C 4E75            	    63:  rts
                            	    64: *
                            	    65: *
                            	    66: * POINT(X,Y)  Plot a point at x,y.
01:000C077E 48E73080        	    67: point movem.l d2-d3/a0,-(sp)
01:000C0782 4E75            	    68:  rts
                            	    69: *
                            	    70: * RECT(XSIDE,YSIDE)  Plot a reactangle with sides xside and yside.
01:000C0784 33C00007FCC2    	    71: rect move.w d0,sidex
01:000C078A 4E75            	    72:  rts
                            	    73: *
01:000C078C 4E75            	    74: loadcmr rts
01:000C078E 4E75            	    75: hi_g1 rts
01:000C0790 4E75            	    76: hi_g2 rts
01:000C0792 4E75            	    77: border rts
01:000C0794 4E75            	    78: setpen rts
01:000C0796 4E75            	    79: query rts
01:000C0798 4E75            	    80: circle rts
01:000C079A 4E75            	    81: patdef rts
01:000C079C 4E75            	    82: fill rts
01:000C079E 4E75            	    83: flood rts
01:000C07A0 4E75            	    84: scroll rts
01:000C07A2 4E75            	    85: pan rts
01:000C07A4 4E75            	    86: locate rts
01:000C07A6 4E75            	    87: mouse rts
01:000C07A8 4E75            	    88: wordblt rts
01:000C07AA 4E75            	    89: bitblt rts
                            	    90: *
                            	    91: 

Source: "monk.txt"
                            	   274: *
                            	   275:  include except.txt

Source: "except.txt"
                            	     1: **********************
                            	     2: * exception handlers *
                            	     3: **********************
                            	     4: *
                            	     5: * Exceptions
01:000C07AC 611E            	     6: b_excpt  bsr.s   excp1        Buss error.
01:000C07AE 611C            	     7: a_excpt  bsr.s   excp1        Address error.
01:000C07B0 614E            	     8: i_excpt  bsr.s   excp2        Illegal instruction.
01:000C07B2 614C            	     9: d_excpt  bsr.s   excp2        Divide by zero.
01:000C07B4 614A            	    10: c_excpt  bsr.s   excp2        CHK.
01:000C07B6 6148            	    11: o_excpt  bsr.s   excp2        TRAPV.
01:000C07B8 6146            	    12: p_excpt  bsr.s   excp2        Privilege.
01:000C07BA 6144            	    13: t_excpt  bsr.s   excp2        Trace.
01:000C07BC 6142            	    14: x_excpt  bsr.s   excp2        L1010.
01:000C07BE 6140            	    15: y_excpt  bsr.s   excp2        L1111.
01:000C07C0 613E            	    16: s_excpt  bsr.s   excp2        Spurious interrupt.
                            	    17: *
                            	    18: * Interrupts
01:000C07C2 613C            	    19: int      bsr.s   excp2        Unexpected interrupt
01:000C07C4 613A            	    20: int7     bsr.s   excp2        Level 7 interrupt.
                            	    21: *
                            	    22: * Traps
01:000C07C6 6138            	    23: trp      bsr.s   excp2        Unexpected TRAP.
01:000C07C8 6136            	    24: trp14    bsr.s   excp2        Breakpoint.
01:000C07CA 6134            	    25: trp15    bsr.s   excp2        End of user program.
                            	    26: *
                            	    27: * Type one exception for buss and address error.
                            	    28: * Reset program counter.
01:000C07CC 48E78080        	    29: excp1    movem.l d0/a0,-(sp)  Save some registers.
01:000C07D0 206F0016        	    30:          move.l  22(sp),a0    Program counter.
01:000C07D4 302F0012        	    31:          move.w  18(sp),d0    Instruction register.
01:000C07D8 B060            	    32:          cmp.w   -(a0),d0     Decrement PC and compare.
01:000C07DA 6712            	    33:          beq.s   excp10       Equal so ok.
01:000C07DC B060            	    34:          cmp.w   -(a0),d0     "     "
01:000C07DE 670E            	    35:          beq.s   excp10       "     "
01:000C07E0 B060            	    36:          cmp.w   -(a0),d0     "     "
01:000C07E2 670A            	    37:          beq.s   excp10       "     "
01:000C07E4 B060            	    38:          cmp.w   -(a0),d0     "     "
01:000C07E6 6706            	    39:          beq.s   excp10       "     "
01:000C07E8 91FC00000002    	    40:          sub.l   #2,a0        No so must be this one.
01:000C07EE 2F480016        	    41: excp10   move.l  a0,22(sp)    Restore corrected PC.
01:000C07F2 4CDF0101        	    42:          movem.l (sp)+,d0/a0  Restore saved registers.
01:000C07F6 2F570008        	    43:          move.l  (sp),8(sp)   Overwrite with return address.
01:000C07FA DFFC00000008    	    44:          add.l   #8,sp        Modify SP and drop through....
                            	    45: *
                            	    46: * type two exceptions and fixed type ones.
01:000C0800 082F00050004    	    47: excp2    btst    #5,4(sp)     Test supervisor bit of saved SR
01:000C0806 6642            	    48:          bne.s   excp3        If set then not user program running.
01:000C0808 2F08            	    49:          move.l  a0,-(sp)     Save a0 temporarily.
01:000C080A 41F90007FC06    	    50:          lea.l   (ram+6),a0        Point to user data register dump.
01:000C0810 48D07FFF        	    51:          movem.l d0-d7/a0-a6,(a0) Save all the users register.
01:000C0814 215F0020        	    52:          move.l  (sp)+,32(a0) Fix saved value of a0.
01:000C0818 225F            	    53:          move.l  (sp)+,a1     Extract return address caused by bsr.
01:000C081A 315F0040        	    54:          move.w  (sp)+,64(a0) Update users sr.
01:000C081E 08A800070040    	    55:          bclr    #7,64(a0)    Ensure trace bit turned off.
01:000C0824 215F0042        	    56:          move.l  (sp)+,66(a0) Update users pc.
01:000C0828 4E6A            	    57:          move.l  usp,a2       Extract usp.
01:000C082A 214A003C        	    58:          move.l  a2,60(a0)    and place that in a7 slot.
                            	    59: *
01:000C082E 47F90007FC5E    	    60:          lea.l   brkp,a3      Point to breakpoint save space.
01:000C0834 7004            	    61:          moveq   #4,d0        Counter.
01:000C0836 285B            	    62: brkl     move.l  (a3)+,a4     Location of breakpoint.
01:000C0838 321B            	    63:          move.w  (a3)+,d1     Original code.
01:000C083A B9FC00000000    	    64:          cmp.l   #0,a4        Was breakpoint set?
01:000C0840 6702            	    65:          beq.s   brkl1        No..
01:000C0842 3881            	    66:          move.w  d1,(a4)      Replace original code.
01:000C0844 51C8FFF0        	    67: brkl1    dbf     d0,brkl      Loop as required.
01:000C0848 6002            	    68:          bra.s   excp4        Now write message.
                            	    69: *
01:000C084A 225F            	    70: excp3    move.l  (sp)+,a1     Extract return address stacked by bsr.
                            	    71: *
01:000C084C 93FC00000002    	    72: excp4    sub.l   #2,a1        Pointer to code we actually entered.
01:000C0852 4FF90007FDFE    	    73:          lea.l   s_stack,sp   Reset system stack.
                            	    74: *********move.w  #intson,sr   Interrupts on agin.**********
                            	    75: *
01:000C0858 41FAFF60        	    76:          lea.l   t_excpt(pc),a0   Trace exception.
01:000C085C B3C8            	    77:          cmp.l   a0,a1         Was it one?
01:000C085E 6710            	    78:          beq.s   excp5         Yes, handle it.
01:000C0860 41FAFF66        	    79:          lea.l   trp14(pc),a0      Breakpoint trap.
01:000C0864 B3C8            	    80:          cmp.l   a0,a1         Was it this.
01:000C0866 6730            	    81:          beq.s   excp6         Handle it.
                            	    82: *
01:000C0868 61000042        	    83:          bsr     wrabo         Write suitable message.
01:000C086C 6000FAF4        	    84:          bra     mwarm         and handle any more commands.
                            	    85: *
01:000C0870 4A390007FC7C    	    86: excp5    tst.b   bflg          Test to see if c was last command
01:000C0876 660017DE        	    87:          bne     go1           Continue execution if so.
                            	    88: *
01:000C087A 6130            	    89:          bsr.s   wrabo         Write trace message.
01:000C087C 610018B4        	    90:          bsr     drx           Print registers.
01:000C0880 610003F2        	    91:          bsr     inch1
01:000C0884 B03C0020        	    92:          cmp.b   #$20,d0       Return?
01:000C0888 6600FAD8        	    93:          bne     mwarm
01:000C088C 08F900070007FC58	    94:          bset    #7,usr       Set the trace bit in saved sr.
01:000C0894 600017C0        	    95:          bra     go1          and continue execution.
                            	    96: *
01:000C0898 04B9000000020007	    97: excp6    sub.l   #2,upc       Back up user pc.
01:000C08A0 FC5A
01:000C08A2 6108            	    98:          bsr.s   wrabo        Write breakpoint message.
01:000C08A4 6100188C        	    99:          bsr     drx          Display registers.
01:000C08A8 6000FAB8        	   100:          bra     mwarm        and ask for another command.
                            	   101: *
01:000C08AC 41FAFEFE        	   102: wrabo    lea.l   b_excpt(pc),a0   Base of table.
01:000C08B0 93C8            	   103:          sub.l   a0,a1        Now a word offset from zero.
01:000C08B2 45F9000C09DC    	   104:          lea.l   abotab,a2    Pointer to abort offset table.
01:000C08B8 2009            	   105:          move.l  a1,d0        Offset into d0.
01:000C08BA 30720800        	   106:          move.w  (a2,d0.l),a0 Offset of string from table base.
01:000C08BE D1CA            	   107:          add.l   a2,a0        Add table base to point to string.
01:000C08C0 6000FB26        	   108:          bra     pstring      Print message.
                            	   109: *
01:000C08C4 4275737320657272	   110: ab1      dc.b    'Buss error',0
01:000C08CC 6F72
01:000C08CE 00
01:000C08CF 4164647265737320	   111: ab2      dc.b    'Address error',0
01:000C08D7 6572726F72
01:000C08DC 00
01:000C08DD 496C6C6567616C20	   112: ab3      dc.b    'Illegal instruction',0
01:000C08E5 696E737472756374
01:000C08ED 696F6E
01:000C08F0 00
01:000C08F1 4469766973696F6E	   113: ab4      dc.b    'Division by zero',0
01:000C08F9 206279207A65726F
01:000C0901 00
01:000C0902 43484B2065786365	   114: ab5      dc.b    'CHK exception',0
01:000C090A 7074696F6E
01:000C090F 00
01:000C0910 5452415056206578	   115: ab6      dc.b    'TRAPV exception',0
01:000C0918 63657074696F6E
01:000C091F 00
01:000C0920 50726976696C6567	   116: ab7      dc.b    'Privilege violation',0
01:000C0928 652076696F6C6174
01:000C0930 696F6E
01:000C0933 00
01:000C0934 54726163652E2E2E	   117: ab8      dc.b    'Trace....',0
01:000C093C 2E
01:000C093D 00
01:000C093E 496C6C6567616C20	   118: ab9      dc.b    'Illegal instruction (1010)',0
01:000C0946 696E737472756374
01:000C094E 696F6E2028313031
01:000C0956 3029
01:000C0958 00
01:000C0959 496C6C6567616C20	   119: ab10     dc.b    'Illegal instruction (1111)',0
01:000C0961 696E737472756374
01:000C0969 696F6E2028313131
01:000C0971 3129
01:000C0973 00
01:000C0974 53707572696F7573	   120: ab11     dc.b    'Spurious interrupt',0
01:000C097C 20696E7465727275
01:000C0984 7074
01:000C0986 00
01:000C0987 556E657870656374	   121: ab12     dc.b    'Unexpected interrupt',0
01:000C098F 656420696E746572
01:000C0997 72757074
01:000C099B 00
01:000C099C 4C6576656C203720	   122: ab13     dc.b    'Level 7 interrupt',0
01:000C09A4 696E746572727570
01:000C09AC 74
01:000C09AD 00
01:000C09AE 5452415020657863	   123: ab14     dc.b    'TRAP exception',0
01:000C09B6 657074696F6E
01:000C09BC 00
01:000C09BD 427265616B706F69	   124: ab15     dc.b    'Breakpoint',0
01:000C09C5 6E74
01:000C09C7 00
01:000C09C8 456E64206F662075	   125: ab16     dc.b    'End of user program',0
01:000C09D0 7365722070726F67
01:000C09D8 72616D
01:000C09DB 00
                            	   126: *
01:000C09DC FEE8            	   127: abotab   dc.w    ab1-abotab
01:000C09DE FEF3            	   128:          dc.w    ab2-abotab
01:000C09E0 FF01            	   129:          dc.w    ab3-abotab
01:000C09E2 FF15            	   130:          dc.w    ab4-abotab
01:000C09E4 FF26            	   131:          dc.w    ab5-abotab
01:000C09E6 FF34            	   132:          dc.w    ab6-abotab
01:000C09E8 FF44            	   133:          dc.w    ab7-abotab
01:000C09EA FF58            	   134:          dc.w    ab8-abotab
01:000C09EC FF62            	   135:          dc.w    ab9-abotab
01:000C09EE FF7D            	   136:          dc.w    ab10-abotab
01:000C09F0 FF98            	   137:          dc.w    ab11-abotab
01:000C09F2 FFAB            	   138:          dc.w    ab12-abotab
01:000C09F4 FFC0            	   139:          dc.w    ab13-abotab
01:000C09F6 FFD2            	   140:          dc.w    ab14-abotab
01:000C09F8 FFE1            	   141:          dc.w    ab15-abotab
01:000C09FA FFEC            	   142:          dc.w    ab16-abotab
                            	   143: *
                            	   144: 

Source: "monk.txt"
                            	   276: *
                            	   277:  include disk.txt

Source: "disk.txt"
                            	     1: *
                            	     2: ************************************
                            	     3: *  Mass storage drivers (MB2K2)    *
                            	     4: *  ------------------------------  *
                            	     5: *  Devices supported :-            *
                            	     6: *        0 (A) = PROMdisk          *
                            	     7: *        1 (B) = F-RAMdisk         *
                            	     8: *        2 (C) = RAMdisk           *
                            	     9: *        3 (D) = Remote disk       *
                            	    10: ************************************
                            	    11: *
                            	    12: * SELECT      Select a physical drive and swap vectors.
                            	    13: * Entry :-  a0 points to dcb.
                            	    14: * Exit :-   (d0) = error code, 0 if ok.
                            	    15: *
01:000C09FC 48E740E0        	    16: select   movem.l d1/a0-a2,-(sp)
01:000C0A00 116800000001    	    17:          move.b  0(a0),1(a0)  For the moment, logical=physical.
01:000C0A06 10280001        	    18:          move.b  1(a0),d0    
01:000C0A0A B03C0006        	    19:          cmp.b   #6,d0     Drive in range?
01:000C0A0E 6C000036        	    20:          bge     sel_err
                            	    21: *
01:000C0A12 43F90007FEF6    	    22: selfp    lea.l   j_table+$f6,a1 Move new jump table entries.
01:000C0A18 C0BC000000FF    	    23:          and.l   #$ff,d0
01:000C0A1E 223C00000018    	    24:          move.l  #24,d1
01:000C0A24 C0C1            	    25:          mulu    d1,d0        d0 has table offset.
01:000C0A26 45F9000C0A66    	    26:          lea.l   drv_tab,a2
01:000C0A2C D5C0            	    27:          add.l   d0,a2        a2 points to vectors.
01:000C0A2E 7005            	    28:          moveq.l #5,d0        Four 6 byte vectors to move.
01:000C0A30 22DA            	    29: sellp    move.l  (a2)+,(a1)+
01:000C0A32 51C8FFFC        	    30:          dbf   d0,sellp
                            	    31: *
01:000C0A36 13E800010007FC84	    32: sel_end  move.b  1(a0),olddrv
01:000C0A3E 7000            	    33:          moveq   #0,d0
01:000C0A40 4CDF0702        	    34:          movem.l (sp)+,d1/a0-a2
01:000C0A44 4E75            	    35:          rts
01:000C0A46 7001            	    36: sel_err  moveq   #1,d0
01:000C0A48 4CDF0702        	    37:          movem.l (sp)+,d1/a0-a2
01:000C0A4C 4E75            	    38:          rts
                            	    39: *
                            	    40: * Internal jump points.  (point to jump table entries).
01:000C0A4E 4EF90007FEF6    	    41: restore  jmp   j_table+$f6
01:000C0A54 4EF90007FEFC    	    42: seek     jmp   j_table+$fc
01:000C0A5A 4EF90007FF02    	    43: read     jmp   j_table+$102
01:000C0A60 4EF90007FF08    	    44: write    jmp   j_table+$108
                            	    45: *
                            	    46: * Table entries for drivers.
                            	    47: * Drive 0 (PROMdisk)
01:000C0A66 4EF9000C03C6    	    48: drv_tab  jmp  dummy
01:000C0A6C 4EF9000C03C6    	    49:          jmp  dummy
01:000C0A72 4EF9000C0AF6    	    50:          jmp  pdread
01:000C0A78 4EF9000C0B2E    	    51:          jmp  pdwrite
                            	    52: *
                            	    53: * Drive 1 (FRAMdisk)
01:000C0A7E 4EF9000C03C6    	    54:          jmp  dummy
01:000C0A84 4EF9000C03C6    	    55:          jmp  dummy
01:000C0A8A 4EF9000C0B66    	    56:          jmp  frread
01:000C0A90 4EF9000C0B9E    	    57:          jmp  frwrite
                            	    58: *
                            	    59: * Drive 2 (RAMdisk)
01:000C0A96 4EF9000C03C6    	    60:          jmp  dummy
01:000C0A9C 4EF9000C03C6    	    61:          jmp  dummy
01:000C0AA2 4EF9000C0C08    	    62:          jmp  rread
01:000C0AA8 4EF9000C0C26    	    63:          jmp  rwrite
                            	    64: *
                            	    65: * Drive 3 (remote disk)
01:000C0AAE 4EF9000C03C6    	    66:          jmp  dummy
01:000C0AB4 4EF9000C03C6    	    67:          jmp  dummy
01:000C0ABA 4EF9000C03C6    	    68:          jmp  dummy
01:000C0AC0 4EF9000C03C6    	    69:          jmp  dummy
                            	    70: *
                            	    71: * Drive 4 (floppy disc 0)
01:000C0AC6 4EF9000C03C6    	    72:          jmp  dummy
01:000C0ACC 4EF9000C03C6    	    73:          jmp  dummy
01:000C0AD2 4EF9000C0BDE    	    74:          jmp  fread
01:000C0AD8 4EF9000C0BE0    	    75:          jmp  fwrite
                            	    76: *
                            	    77: * Drive 5 (floppy disc 1)
01:000C0ADE 4EF9000C03C6    	    78:          jmp  dummy
01:000C0AE4 4EF9000C03C6    	    79:          jmp  dummy
01:000C0AEA 4EF9000C0BDE    	    80:          jmp  fread
01:000C0AF0 4EF9000C0BE0    	    81:          jmp  fwrite
                            	    82: *
                            	    83: ********************
                            	    84: * PROMdisk drivers *
                            	    85: ********************
                            	    86: * Entry :-  a0 points to dcb.
                            	    87: * Exit :-   (d0) = error code, 0 if ok.
                            	    88: *
                            	    89: * $FF330 PROMdisk  control reg
                            	    90: * $FF331 PROMdisk  track reg
                            	    91: * $FF332 PROMdisk  sector reg
                            	    92: * $FF333 PROMdisk  data reg
                            	    93: * $FF334 PROMdisk  mode reg
                            	    94: *
                            	    95: *** PROMdisk read
01:000C0AF6 48E700C0        	    96: pdread movem.l a0-a1,-(sp)
                            	    97: *
01:000C0AFA 13E80003000FF331	    98:  move.b 3(a0),$FF331 track
01:000C0B02 13E80005000FF332	    99:  move.b 5(a0),$FF332 sector
01:000C0B0A 22680006        	   100:  move.l 6(a0),a1     buffer address 
                            	   101: *
01:000C0B0E 13FC0084000FF330	   102:  move.b #$84,$FF330  PROMdisk read command (issued before data read) 
01:000C0B16 203C000000FF    	   103:  move.l #255,d0
01:000C0B1C 12F9000FF333    	   104: pdrlp move.b $FF333,(a1)+
01:000C0B22 51C8FFF8        	   105:  dbf d0,pdrlp
                            	   106:  *
01:000C0B26 7000            	   107:  moveq #0,d0 no errors
01:000C0B28 4CDF0300        	   108:  movem.l (sp)+,a0-a1
01:000C0B2C 4E75            	   109:  rts
                            	   110: *
                            	   111: *** PROMdisk write
01:000C0B2E 48E700C0        	   112: pdwrite movem.l a0-a1,-(sp)
                            	   113: *
01:000C0B32 13E80003000FF331	   114:  move.b 3(a0),$FF331 track
01:000C0B3A 13E80005000FF332	   115:  move.b 5(a0),$FF332 sector
01:000C0B42 22680006        	   116:  move.l 6(a0),a1     buffer address 
                            	   117: *
01:000C0B46 203C000000FF    	   118:  move.l #255,d0
01:000C0B4C 13D9000FF333    	   119: pdwlp move.b (a1)+,$FF333
01:000C0B52 51C8FFF8        	   120:  dbf d0,pdwlp 
01:000C0B56 13FC00A4000FF330	   121:  move.b #$A4,$FF330 PROMdisk write command (issued after data sent)
                            	   122: * 
01:000C0B5E 7000            	   123:  moveq #0,d0 no errors
01:000C0B60 4CDF0300        	   124:  movem.l (sp)+,a0-a1
01:000C0B64 4E75            	   125:  rts
                            	   126: * 
                            	   127: ********************
                            	   128: * FRAMdisk drivers *
                            	   129: ********************
                            	   130: * Entry :-  a0 points to dcb.
                            	   131: * Exit :-   (d0) = error code, 0 if ok.
                            	   132: *
                            	   133: * $FF258 f-ramdisk control reg
                            	   134: * $FF259 f-ramdisk track reg
                            	   135: * $FF25A f-ramdisk sector reg
                            	   136: * $FF25B f-ramdisk data reg
                            	   137: * $FF25C f-ramdisk mode reg
                            	   138: *
                            	   139: *** FRAMdisk read
01:000C0B66 48E700C0        	   140: frread movem.l a0-a1,-(sp)
                            	   141: *
01:000C0B6A 13E80003000FF259	   142:  move.b 3(a0),$FF259 track
01:000C0B72 13E80005000FF25A	   143:  move.b 5(a0),$FF25A sector
01:000C0B7A 13FC0000000FF258	   144:  move.b #0,$FF258    control reg write sets up xfer
01:000C0B82 22680006        	   145:  move.l 6(a0),a1     buffer address 
01:000C0B86 203C000000FF    	   146:  move.l #255,d0
                            	   147: *
01:000C0B8C 12F9000FF25B    	   148: frrlp move.b $FF25B,(a1)+ first read triggers sector read
01:000C0B92 51C8FFF8        	   149:  dbf d0,frrlp
                            	   150:  *
01:000C0B96 7000            	   151:  moveq #0,d0 no errors
01:000C0B98 4CDF0300        	   152:  movem.l (sp)+,a0-a1
01:000C0B9C 4E75            	   153:  rts
                            	   154: *
                            	   155: *** FRAMdisk write
01:000C0B9E 48E700C0        	   156: frwrite movem.l a0-a1,-(sp)
                            	   157: *
01:000C0BA2 13E80003000FF259	   158:  move.b 3(a0),$FF259 track
01:000C0BAA 13E80005000FF25A	   159:  move.b 5(a0),$FF25A sector
01:000C0BB2 13FC0000000FF258	   160:  move.b #0,$FF258    control reg write sets up xfer
01:000C0BBA 22680006        	   161:  move.l 6(a0),a1     buffer address 
01:000C0BBE 203C000000FF    	   162:  move.l #255,d0
                            	   163: *
01:000C0BC4 13D9000FF25B    	   164: frwlp move.b (a1)+,$FF25B
01:000C0BCA 51C8FFF8        	   165:  dbf d0,frwlp last write trigggers sector write
                            	   166: *
01:000C0BCE 7000            	   167:  moveq #0,d0 no errors
01:000C0BD0 4CDF0300        	   168:  movem.l (sp)+,a0-a1
01:000C0BD4 4E75            	   169:  rts
                            	   170: *
                            	   171: **********************************
                            	   172: * Floppy disk drivers (WD1770/2) *
                            	   173: **********************************
                            	   174: * Entry :-  a0 points to dcb.
                            	   175: * Exit :-   (d0) = error code, 0 if ok.
                            	   176: *
                            	   177: * Wait until current command is finished.
01:000C0BD6 4E75            	   178: fwait    rts
                            	   179: * Send command in (d0) to fdc.
01:000C0BD8 4E75            	   180: fcmd     rts
                            	   181: *
                            	   182: * Restore to track 00.
01:000C0BDA 4E75            	   183: frestore rts
                            	   184: * Seek to track pointed to by (d2).
01:000C0BDC 4E75            	   185: fseek    rts
                            	   186: *
                            	   187: * Read a logical sector from track/sector.
01:000C0BDE 4E75            	   188: fread    rts
                            	   189: *
                            	   190: * Write a logical sector to track/sector.
01:000C0BE0 4E75            	   191: fwrite   rts
                            	   192: *
                            	   193: * Process floppy error code.
01:000C0BE2 4E75            	   194: derror   rts
                            	   195: *
                            	   196: *******************
                            	   197: * RAMdisk drivers *
                            	   198: *******************
                            	   199: * Entry :-  a0 points to dcb.
                            	   200: * Exit :-   (d0) = error code, 0 if ok.
                            	   201: *
                            	   202: * set (a0) to the ramdisk 'sector'
01:000C0BE4 48E7C000        	   203: rdpnt movem.l d0-d1,-(sp)
01:000C0BE8 7000            	   204:  moveq #0,d0
01:000C0BEA 10280003        	   205:  move.b 3(a0),d0
01:000C0BEE E980            	   206:  asl.l #4,d0 times 16
01:000C0BF0 7200            	   207:  moveq.l #0,d1
01:000C0BF2 12280005        	   208:  move.b 5(a0),d1
01:000C0BF6 D081            	   209:  add.l d1,d0
01:000C0BF8 EF80            	   210:  asl.l #7,d0 byte boundary
01:000C0BFA D0BC00030000    	   211:  add.l #$30000,d0 ramdisk offset
01:000C0C00 2040            	   212:  movea.l d0,a0
01:000C0C02 4CDF0003        	   213:  movem.l (sp)+,d0-d1
01:000C0C06 4E75            	   214:  rts
                            	   215: *
                            	   216: * RAMdisk read.
01:000C0C08 48E700C0        	   217: rread movem.l a0-a1,-(sp)
01:000C0C0C 22680006        	   218:  move.l 6(a0),a1
01:000C0C10 61D2            	   219:  bsr.s rdpnt
01:000C0C12 203C0000001F    	   220:  move.l #31,d0
01:000C0C18 22D8            	   221: rrlp move.l (a0)+,(a1)+
01:000C0C1A 51C8FFFC        	   222:  dbf d0,rrlp
01:000C0C1E 7000            	   223:  moveq #0,d0
01:000C0C20 4CDF0300        	   224:  movem.l (sp)+,a0-a1
01:000C0C24 4E75            	   225:  rts
                            	   226: *
                            	   227: * RAMdisk write.
01:000C0C26 48E700C0        	   228: rwrite movem.l a0-a1,-(sp)
01:000C0C2A 22680006        	   229:  move.l 6(a0),a1
01:000C0C2E 61B4            	   230:  bsr.s rdpnt
01:000C0C30 203C0000001F    	   231:  move.l #31,d0
01:000C0C36 20D9            	   232: rwlp move.l (a1)+,(a0)+
01:000C0C38 51C8FFFC        	   233:  dbf d0,rwlp
01:000C0C3C 7000            	   234:  moveq #0,d0
01:000C0C3E 4CDF0300        	   235:  movem.l (sp)+,a0-a1
01:000C0C42 4E75            	   236:  rts
                            	   237: *
                            	   238: 

Source: "monk.txt"
                            	   278: *
                            	   279:  include console.txt

Source: "console.txt"
                            	     1: *********************
                            	     2: * Console routines  *
                            	     3: *********************
                            	     4: *
                            	     5: * Character status routines.
                            	     6: * Entry:- No parameters.
                            	     7: * Exit :- No registers altered, (z)=0 if character queued.
01:000C0C44 2F01            	     8: status   move.l  d1,-(sp)
01:000C0C46 4281            	     9:          clr.l   d1
01:000C0C48 12390007FC7D    	    10:          move.b  iport,d1
01:000C0C4E 4EBB1014        	    11:          jsr     statab(pc,d1)
01:000C0C52 6708            	    12:          beq.s   stt1
01:000C0C54 221F            	    13:          move.l  (sp)+,d1
01:000C0C56 44FC0000        	    14:          move.w  #$0,ccr
01:000C0C5A 4E75            	    15:          rts
01:000C0C5C 221F            	    16: stt1     move.l  (sp)+,d1
01:000C0C5E 44FC0004        	    17:          move.w  #4,ccr
01:000C0C62 4E75            	    18:          rts
01:000C0C64 6000005A        	    19: statab   bra     stakey
01:000C0C68 60000060        	    20:          bra     stater0
01:000C0C6C 60000066        	    21:          bra     stater1
01:000C0C70 6000F754        	    22:          bra     dummy
                            	    23: *
                            	    24: * Character input with no echo.
                            	    25: * Entry :- No parameters.
                            	    26: * Exit :- d0 = character.
01:000C0C74 6100FFCE        	    27: inch1    bsr     status
01:000C0C78 67FA            	    28:          beq.s   inch1
01:000C0C7A 2F01            	    29:          move.l  d1,-(sp)
01:000C0C7C 4281            	    30:          clr.l   d1
01:000C0C7E 12390007FC7D    	    31:          move.b  iport,d1
01:000C0C84 4EBB1006        	    32:          jsr     intab(pc,d1)
01:000C0C88 221F            	    33:          move.l  (sp)+,d1
01:000C0C8A 4E75            	    34:          rts
01:000C0C8C 60000050        	    35: intab    bra     inkey
01:000C0C90 6000005A        	    36:          bra     inter0
01:000C0C94 60000064        	    37:          bra     inter1
01:000C0C98 6000F72C        	    38:          bra     dummy
                            	    39: *
                            	    40: * Character input with echo.
                            	    41: * Entry :- No parameters.
                            	    42: * Exit :- d0 = character
01:000C0C9C 61D6            	    43: inch     bsr.s   inch1
                            	    44: *
                            	    45: * Character output routine.
                            	    46: * Entry :- d0 = character.
                            	    47: * Exit :-  No registers altered.
01:000C0C9E 2F01            	    48: outch    move.l  d1,-(sp)
01:000C0CA0 4281            	    49:          clr.l   d1
01:000C0CA2 12390007FC7E    	    50:          move.b  oport,d1
01:000C0CA8 4EBB1006        	    51:          jsr     outtab(pc,d1)
01:000C0CAC 221F            	    52:          move.l  (sp)+,d1
01:000C0CAE 4E75            	    53:          rts
01:000C0CB0 60000070        	    54: outtab   bra     outvdu
01:000C0CB4 60000052        	    55:          bra     outter0
01:000C0CB8 6000005A        	    56:          bra     outter1
01:000C0CBC 6000F708        	    57:          bra     dummy
                            	    58: *
                            	    59: ** Keyboard status routine.  
01:000C0CC0 08390007000FF11B	    60: stakey   btst.b #7,$FF11B   char ready on bit 7
01:000C0CC8 4E75            	    61:          rts
                            	    62: *
                            	    63: * Serial status routine.
01:000C0CCA 08390000000FF003	    64: stater0  btst.b  #0,acia+stat0
01:000C0CD2 4E75            	    65:          rts
                            	    66: *
01:000C0CD4 08390000000FF013	    67: stater1  btst.b  #0,acia+stat1
01:000C0CDC 4E75            	    68:          rts
                            	    69: ****************************
                            	    70: * Keyboard input routine.
01:000C0CDE 1039000FF113    	    71: inkey    move.b $FF113,d0
01:000C0CE4 02800000007F    	    72:          andi.l  #$7f,d0
01:000C0CEA 4E75            	    73:          rts
                            	    74: *
                            	    75: * Serial input routine.
01:000C0CEC 1039000FF007    	    76: inter0   move.b  acia+data0,d0
01:000C0CF2 02800000007F    	    77:          andi.l  #$7f,d0
01:000C0CF8 4E75            	    78:          rts
                            	    79: *
01:000C0CFA 1039000FF017    	    80: inter1   move.b  acia+data1,d0
01:000C0D00 02800000007F    	    81:          andi.l  #$7f,d0
01:000C0D06 4E75            	    82:          rts
                            	    83: ****************************
                            	    84: * Serial output routine.
                            	    85: *outter0  btst.b  #2,acia+stat0
                            	    86: *         beq.s   outter0
01:000C0D08 0200007F        	    87: outter0 andi.b  #$7f,d0
01:000C0D0C 13C0000FF007    	    88:          move.b  d0,acia+data0
01:000C0D12 4E75            	    89:          rts
                            	    90: *
                            	    91: *outter1  btst.b  #2,acia+stat1
                            	    92: *         beq.s   outter0
01:000C0D14 0200007F        	    93: outter1  andi.b  #$7f,d0
01:000C0D18 13C0000FF017    	    94:          move.b  d0,acia+data1
01:000C0D1E 4E75            	    95:          rts
                            	    96: *
01:000C0D20 4E75            	    97: outpri   rts
                            	    98: *
                            	    99: **********************************
                            	   100: * Output char to graphics screen *
                            	   101: **********************************
01:000C0D22 48E7C0C0        	   102: outvdu   movem.l d0-d1/a0-a1,-(sp)
                            	   103: *
                            	   104: *        bclr.b  #7,$ffe92    switch off cursor
                            	   105: *
01:000C0D26 C0BC0000007F    	   106:          and.l   #$7f,d0      strip any parity
                            	   107: *
01:000C0D2C 083900070007FCB4	   108:          btst.b  #7,vduflags  escape sequence?
01:000C0D34 6600015E        	   109:          bne     esc_proc
                            	   110: *
01:000C0D38 B03C0020        	   111:          cmp.b   #$20,d0      control character?
01:000C0D3C 65000108        	   112:          blo     c_code
                            	   113: *
                            	   114: * position pointer to character pattern
01:000C0D40 903C0020        	   115:          sub.b   #$20,d0      remove bias
01:000C0D44 C0FC000B        	   116:          mulu    #11,d0       bytes per character * char
01:000C0D48 41F9000C2BFC    	   117:          lea.l   chrtab,a0    base of chracter patterns
01:000C0D4E 41F00000        	   118:          lea.l   (a0,d0.w),a0 base of chracter
                            	   119: *
                            	   120: * calculate current screen position
01:000C0D52 223C000003C0    	   121:          move.l  #960,d1  bytes per row
01:000C0D58 C2F90007FCB0    	   122:          mulu    row,d1       times current row
01:000C0D5E D2790007FCB2    	   123:          add.w   col,d1
01:000C0D64 7000            	   124:          moveq   #0,d0
01:000C0D66 30390007FCB6    	   125:          move.w  offset,d0
01:000C0D6C D280            	   126:          add.l   d0,d1        add in vertical offset
01:000C0D6E B2BC00004B00    	   127:          cmp.l   #$4b00,d1    off the screen?
01:000C0D74 6D06            	   128:          blt.s   crok
01:000C0D76 92BC00004B00    	   129:          sub.l   #$4b00,d1    is so, adjust
01:000C0D7C D2BC0003B500    	   130: crok     add.l   #$3b500,d1   add in screen base address
01:000C0D82 2241            	   131:          move.l  d1,a1
                            	   132: *
                            	   133: * move character pattern to ram
01:000C0D84 7050            	   134:          moveq   #80,d0       line offset
                            	   135: *
01:000C0D86 083900050007FCB4	   136:          btst.b  #5,vduflags  attributes on?
01:000C0D8E 662C            	   137:          bne.s   mvc1
                            	   138: * move the data (non inverted)
01:000C0D90 1298            	   139:          move.b  (a0)+,(a1)
01:000C0D92 D3C0            	   140:          add.l   d0,a1
01:000C0D94 1298            	   141:          move.b  (a0)+,(a1)
01:000C0D96 D3C0            	   142:          add.l   d0,a1
01:000C0D98 1298            	   143:          move.b  (a0)+,(a1)
01:000C0D9A D3C0            	   144:          add.l   d0,a1
01:000C0D9C 1298            	   145:          move.b  (a0)+,(a1)
01:000C0D9E D3C0            	   146:          add.l   d0,a1
01:000C0DA0 1298            	   147:          move.b  (a0)+,(a1)
01:000C0DA2 D3C0            	   148:          add.l   d0,a1
01:000C0DA4 1298            	   149:          move.b  (a0)+,(a1)
01:000C0DA6 D3C0            	   150:          add.l   d0,a1
01:000C0DA8 1298            	   151:          move.b  (a0)+,(a1)
01:000C0DAA D3C0            	   152:          add.l   d0,a1
01:000C0DAC 1298            	   153:          move.b  (a0)+,(a1)
01:000C0DAE D3C0            	   154:          add.l   d0,a1
01:000C0DB0 1298            	   155:          move.b  (a0)+,(a1)
01:000C0DB2 D3C0            	   156:          add.l   d0,a1
01:000C0DB4 1298            	   157:          move.b  (a0)+,(a1)
01:000C0DB6 D3C0            	   158:          add.l   d0,a1
01:000C0DB8 1298            	   159:          move.b  (a0)+,(a1)
01:000C0DBA 6040            	   160:          bra.s   ov2
                            	   161: *
                            	   162: * move the data  (inverted version)
01:000C0DBC 1298            	   163: mvc1     move.b  (a0)+,(a1)
01:000C0DBE 4611            	   164:          not.b   (a1)
01:000C0DC0 D3C0            	   165:          add.l   d0,a1
01:000C0DC2 1298            	   166:          move.b  (a0)+,(a1)
01:000C0DC4 4611            	   167:          not.b   (a1)
01:000C0DC6 D3C0            	   168:          add.l   d0,a1
01:000C0DC8 1298            	   169:          move.b  (a0)+,(a1)
01:000C0DCA 4611            	   170:          not.b   (a1)
01:000C0DCC D3C0            	   171:          add.l   d0,a1
01:000C0DCE 1298            	   172:          move.b  (a0)+,(a1)
01:000C0DD0 4611            	   173:          not.b   (a1)
01:000C0DD2 D3C0            	   174:          add.l   d0,a1
01:000C0DD4 1298            	   175:          move.b  (a0)+,(a1)
01:000C0DD6 4611            	   176:          not.b   (a1)
01:000C0DD8 D3C0            	   177:          add.l   d0,a1
01:000C0DDA 1298            	   178:          move.b  (a0)+,(a1)
01:000C0DDC 4611            	   179:          not.b   (a1)
01:000C0DDE D3C0            	   180:          add.l   d0,a1
01:000C0DE0 1298            	   181:          move.b  (a0)+,(a1)
01:000C0DE2 4611            	   182:          not.b   (a1)
01:000C0DE4 D3C0            	   183:          add.l   d0,a1
01:000C0DE6 1298            	   184:          move.b  (a0)+,(a1)
01:000C0DE8 4611            	   185:          not.b   (a1)
01:000C0DEA D3C0            	   186:          add.l   d0,a1
01:000C0DEC 1298            	   187:          move.b  (a0)+,(a1)
01:000C0DEE 4611            	   188:          not.b   (a1)
01:000C0DF0 D3C0            	   189:          add.l   d0,a1
01:000C0DF2 1298            	   190:          move.b  (a0)+,(a1)
01:000C0DF4 4611            	   191:          not.b   (a1)
01:000C0DF6 D3C0            	   192:          add.l   d0,a1
01:000C0DF8 1298            	   193:          move.b  (a0)+,(a1)
01:000C0DFA 4611            	   194:          not.b   (a1)
                            	   195: * increment col
01:000C0DFC 0C79004F0007FCB2	   196: ov2      cmp.w   #79,col
01:000C0E04 6706            	   197:          beq.s   ov1
01:000C0E06 52790007FCB2    	   198:          addq.w  #1,col
                            	   199: *
01:000C0E0C 4CDF0303        	   200: ov1      movem.l (sp)+,d0-d1/a0-a1
01:000C0E10 4E75            	   201:          rts
                            	   202: * copy of row/col to cursor routine
01:000C0E12 223C000003C0    	   203: rctocr   move.l  #960,d1  bytes per row
01:000C0E18 C2F90007FCB0    	   204:          mulu    row,d1       times current row
01:000C0E1E D2790007FCB2    	   205:          add.w   col,d1
01:000C0E24 7000            	   206:          moveq   #0,d0
01:000C0E26 30390007FCB6    	   207:          move.w  offset,d0
01:000C0E2C D280            	   208:          add.l   d0,d1        add in vertical offset
01:000C0E2E B2BC00004B00    	   209:          cmp.l   #$4b00,d1    off the screen?
01:000C0E34 6D06            	   210:          blt.s   ccrok
01:000C0E36 92BC00004B00    	   211:          sub.l   #$4b00,d1    is so, adjust
01:000C0E3C D2BC0003B500    	   212: ccrok    add.l   #$3b500,d1   add in screen base address
01:000C0E42 2241            	   213:          move.l  d1,a1
01:000C0E44 4E75            	   214:          rts
                            	   215: *
                            	   216: ****************************
                            	   217: * control codes jump table *
                            	   218: ****************************
01:000C0E46 E380            	   219: c_code   asl.l   #1,d0        two byte offsets
01:000C0E48 303B000A        	   220:          move.w  table(pc,d0.w),d0 point to correct routine
01:000C0E4C 4EBB0006        	   221:          jsr     table(pc,d0)      jump to it!
01:000C0E50 6000FFBA        	   222:          bra     ov1
                            	   223: *
01:000C0E54 0074            	   224: table    dc.w    nu-table,nu-table,nu-table,nu-table
01:000C0E56 0074
01:000C0E58 0074
01:000C0E5A 0074
01:000C0E5C 0074            	   225:          dc.w    nu-table,nu-table,nu-table,bl-table
01:000C0E5E 0074
01:000C0E60 0074
01:000C0E62 0076
01:000C0E64 007A            	   226:          dc.w    bs-table,ht-table,lf-table,vt-table
01:000C0E66 008C
01:000C0E68 009E
01:000C0E6A 00B2
01:000C0E6C 00C6            	   227:          dc.w    ff-table,cr-table,mv-table,ho-table
01:000C0E6E 00D0
01:000C0E70 00D8
01:000C0E72 00CA
01:000C0E74 00E2            	   228:          dc.w    il-table,dl-table,el-table,ep-table
01:000C0E76 00E4
01:000C0E78 00E6
01:000C0E7A 0118
01:000C0E7C 016A            	   229:          dc.w    at-table,ao-table,nu-table,nu-table
01:000C0E7E 0174
01:000C0E80 0074
01:000C0E82 0074
01:000C0E84 0074            	   230:          dc.w    nu-table,nu-table,nu-table,es-table
01:000C0E86 0074
01:000C0E88 0074
01:000C0E8A 0168
01:000C0E8C 0074            	   231:          dc.w    nu-table,nu-table,nu-table,nu-table
01:000C0E8E 0074
01:000C0E90 0074
01:000C0E92 0074
                            	   232: *
                            	   233: * 'escape' sequence processing
01:000C0E94 903C0020        	   234: esc_proc sub.b   #$20,d0      remove ascii bias
01:000C0E98 083900060007FCB4	   235:          btst.b  #6,vduflags  1st coord?
01:000C0EA0 67000014        	   236:          beq     esc1
01:000C0EA4 33C00007FCB0    	   237:          move.w  d0,row
01:000C0EAA 08B900060007FCB4	   238:          bclr.b  #6,vduflags
01:000C0EB2 6000FF58        	   239:          bra     ov1
                            	   240: *
01:000C0EB6 33C00007FCB2    	   241: esc1     move.w  d0,col       2nd coord
01:000C0EBC 08B900070007FCB4	   242:          bclr.b  #7,vduflags  clear escape flag
01:000C0EC4 6000FF46        	   243:          bra     ov1
                            	   244: *
01:000C0EC8 4E75            	   245: nu       rts                  null
                            	   246: *
01:000C0ECA 6000F70C        	   247: bl       bra     beep         bell
                            	   248: *
01:000C0ECE 0C7900000007FCB2	   249: bs       cmp.w   #0,col       back space
01:000C0ED6 6706            	   250:          beq.s   bse
01:000C0ED8 53790007FCB2    	   251:          subq.w  #1,col
01:000C0EDE 4E75            	   252: bse      rts
                            	   253: *
01:000C0EE0 0C79004F0007FCB2	   254: ht       cmp.w   #79,col      horizontal tab
01:000C0EE8 6706            	   255:          beq.s   hte
01:000C0EEA 52790007FCB2    	   256:          addq.w  #1,col
01:000C0EF0 4E75            	   257: hte      rts
                            	   258: *
01:000C0EF2 0C7900130007FCB0	   259: lf       cmp.w   #19,row      line feed
01:000C0EFA 670000D6        	   260:          beq     scr_up       if on bottom row, scroll
01:000C0EFE 52790007FCB0    	   261:          addq.w  #1,row
01:000C0F04 4E75            	   262:          rts
                            	   263: *
01:000C0F06 0C7900000007FCB0	   264: vt       cmp.w   #0,row       vertical tab
01:000C0F0E 6700010A        	   265:          beq     scr_dwn      if on top row, scroll
01:000C0F12 53790007FCB0    	   266:          subq.w  #1,row
01:000C0F18 4E75            	   267: vte      rts
                            	   268: *
01:000C0F1A 60000158        	   269: ff       bra     cleart       form feed
                            	   270: *
01:000C0F1E 42790007FCB0    	   271: ho       clr.w   row          home
                            	   272: *
01:000C0F24 42790007FCB2    	   273: cr       clr.w   col          cr return
01:000C0F2A 4E75            	   274:          rts
                            	   275: *
01:000C0F2C 003900C00007FCB4	   276: mv       or.b    #$c0,vduflags set escape flags for cursor move
01:000C0F34 4E75            	   277:          rts
                            	   278: *
01:000C0F36 4E75            	   279: il       rts                  no insert line
                            	   280: *
01:000C0F38 4E75            	   281: dl       rts                  no delete line
                            	   282: *
01:000C0F3A 48E73000        	   283: el movem.l d2-d3,-(sp)
01:000C0F3E 6100FED2        	   284:  bsr rctocr starting point
01:000C0F42 7050            	   285:  moveq #80,d0 deol
01:000C0F44 90790007FCB2    	   286:  sub.w col,d0
01:000C0F4A 5340            	   287:  subq #1,d0
01:000C0F4C 2049            	   288:  move.l a1,a0
01:000C0F4E 7400            	   289:  moveq #0,d2 clear value
01:000C0F50 2600            	   290:  move.l d0,d3 length
01:000C0F52 720B            	   291:  moveq #11,d1 lines to clear
01:000C0F54 2003            	   292: deol1 move.l d3,d0
01:000C0F56 2248            	   293:  move.l a0,a1
01:000C0F58 41E80050        	   294:  lea.l 80(a0),a0
01:000C0F5C 12C2            	   295: deol2 move.b d2,(a1)+
01:000C0F5E 51C8FFFC        	   296:  dbf d0,deol2
01:000C0F62 51C9FFF0        	   297:  dbf d1,deol1
01:000C0F66 4CDF000C        	   298:  movem.l (sp)+,d2-d3
01:000C0F6A 4E75            	   299:  rts
                            	   300: *
01:000C0F6C 3F390007FCB0    	   301: ep move.w row,-(sp)
01:000C0F72 3F390007FCB2    	   302:  move.w col,-(sp)
01:000C0F78 6100FFC0        	   303:  bsr el
01:000C0F7C 0C7900130007FCB0	   304:  cmp.w #19,row last line?
01:000C0F84 6728            	   305:  beq.s deope
01:000C0F86 52790007FCB0    	   306:  addq.w #1,row start from next row
01:000C0F8C 42790007FCB2    	   307:  clr.w col clear col
01:000C0F92 7014            	   308:  moveq #20,d0
01:000C0F94 90790007FCB0    	   309:  sub.w row,d0
01:000C0F9A 5340            	   310:  subq #1,d0 rows to clr
01:000C0F9C 2F00            	   311: deop_1 move.l d0,-(sp)
01:000C0F9E 6100FF9A        	   312:  bsr el
01:000C0FA2 201F            	   313:  move.l (sp)+,d0
01:000C0FA4 52790007FCB0    	   314:  addq.w #1,row
01:000C0FAA 51C8FFF0        	   315:  dbf d0,deop_1
01:000C0FAE 33DF0007FCB2    	   316: deope move.w (sp)+,col
01:000C0FB4 33DF0007FCB0    	   317:  move.w (sp)+,row
01:000C0FBA 4E75            	   318:  rts
                            	   319: *
01:000C0FBC 4E75            	   320: es       rts
                            	   321: *
01:000C0FBE 08F900050007FCB4	   322: at bset #5,vduflags
01:000C0FC6 4E75            	   323:  rts
                            	   324: *
01:000C0FC8 08B900050007FCB4	   325: ao bclr #5,vduflags
01:000C0FD0 4E75            	   326:  rts
                            	   327: *
01:000C0FD2 067903C00007FCB6	   328: scr_up add.w #960,offset
01:000C0FDA 0C794B000007FCB6	   329:  cmp.w #$4b00,offset
01:000C0FE2 6D08            	   330:  blt.s scrok
01:000C0FE4 33FC00000007FCB6	   331:  move.w #0,offset
                            	   332: *
01:000C0FEC 207C000FFE2C    	   333: scrok move.l #$ffe2c,a0
01:000C0FF2 30390007FCB6    	   334:  move.w offset,d0
01:000C0FF8 11400003        	   335:  move.b d0,3(a0)
01:000C0FFC E048            	   336:  lsr.w #8,d0
01:000C0FFE 11400002        	   337:  move.b d0,2(a0)
                            	   338: *
01:000C1002 42790007FCB2    	   339: scr1 clr.w col
01:000C1008 6100FE08        	   340:  bsr rctocr
01:000C100C 303C00EF        	   341:  move.w #239,d0
01:000C1010 4281            	   342:  clr.l d1
                            	   343: *
01:000C1012 22C1            	   344: scrloop move.l d1,(a1)+
01:000C1014 51C8FFFC        	   345:  dbf d0,scrloop
01:000C1018 4E75            	   346:  rts
                            	   347: *
                            	   348: *
01:000C101A 0C7900000007FCB6	   349: scr_dwn cmp.w #0,offset
01:000C1022 6608            	   350:  bne.s scrdzz1
01:000C1024 33FC4B000007FCB6	   351:  move.w #$4b00,offset
                            	   352: *
01:000C102C 047903C00007FCB6	   353: scrdzz1 sub.w #960,offset
01:000C1034 0C7900000007FCB6	   354:  cmp.w #0,offset
01:000C103C 6C08            	   355:  bge.s dscrok
01:000C103E 33FC4B000007FCB6	   356:  move.w #$4b00,offset
                            	   357: *
01:000C1046 207C000FFE2C    	   358: dscrok move.l #$ffe2c,a0
01:000C104C 30390007FCB6    	   359:  move.w offset,d0
01:000C1052 11400003        	   360:  move.b d0,3(a0)
01:000C1056 E048            	   361:  lsr.w #8,d0
01:000C1058 11400002        	   362:  move.b d0,2(a0)
                            	   363: *
01:000C105C 42790007FCB2    	   364: dscr1 clr.w col
01:000C1062 6100FDAE        	   365:  bsr rctocr
01:000C1066 303C00EF        	   366:  move.w #239,d0
01:000C106A 4281            	   367:  clr.l d1
                            	   368: *
01:000C106C 22C1            	   369: dscrloop move.l d1,(a1)+
01:000C106E 51C8FFFC        	   370:  dbf d0,dscrloop
01:000C1072 4E75            	   371:  rts
                            	   372: *
                            	   373: ************************************
                            	   374: *    Clear screen and init vars    *
                            	   375: ************************************
01:000C1074 7000            	   376: cleart    moveq  #0,d0        fill screen with $0
01:000C1076 41F90003B500    	   377:           lea.l  $3b500,a0
01:000C107C 223C000012BF    	   378:           move.l #4799,d1
01:000C1082 20C0            	   379: ctl1      move.l d0,(a0)+
01:000C1084 51C9FFFC        	   380:           dbf    d1,ctl1
                            	   381: *
01:000C1088 33C00007FCB0    	   382:           move.w d0,row       home cursor
01:000C108E 33C00007FCB2    	   383:           move.w d0,col
                            	   384: *
01:000C1094 13C00007FCB4    	   385:           move.b d0,vduflags  clear flags
                            	   386: *
01:000C109A 207C000FFE2C    	   387:           move.l #$ffe2c,a0   clear vert offset
01:000C10A0 11400003        	   388:           move.b d0,3(a0)
01:000C10A4 11400002        	   389:           move.b d0,2(a0)
01:000C10A8 33C00007FCB6    	   390:           move.w  d0,offset
                            	   391: *
                            	   392: * disable all t/o's.
01:000C10AE 7000            	   393:  moveq #0,d0
                            	   394: * move.b d0,$ffe92
                            	   395: * move.b d0,$ffe9a
                            	   396: * move.b d0,$ffe9e
                            	   397: * move.b d0,$ffe96
                            	   398: * move.b d0,$ffea6
                            	   399: * move.b d0,$ffeaa
                            	   400: * move.b d0,$ffeae
                            	   401: * set up true object 4 as cursor.
                            	   402: *          move.b #$07,$ffe0c  set object table address
                            	   403: *          move.b #$fc,$ffe0d
                            	   404: *          move.b #$00,$ffeb4  name t.o. four.
                            	   405: *
                            	   406: *          moveq  #5,d0        move cursor pattern to video ram
                            	   407: *          lea.l  cursor,a0
                            	   408: *          lea.l  $7fc00,a1
                            	   409: *cltlpp    move.l (a0)+,(a1)+
                            	   410: *          dbf    d0,cltlpp
                            	   411: *
01:000C10B0 33FC00010007FCB8	   412:           move.w #$1,flash    init flash counter
                            	   413: *
01:000C10B8 4E75            	   414:           rts
                            	   415: *
01:000C10BA F00C0000        	   416: cursor    dc.l   %11110000000011000000000000000000
01:000C10BE F03F0000        	   417:           dc.l   %11110000001111110000000000000000
01:000C10C2 F0FFC000        	   418:           dc.l   %11110000111111111100000000000000
01:000C10C6 F3FFF000        	   419:           dc.l   %11110011111111111111000000000000
01:000C10CA FFFFFC00        	   420:           dc.l   %11111111111111111111110000000000
01:000C10CE 00000000        	   421:           dc.l   %00000000000000000000000000000000
                            	   422: *
                            	   423: *
                            	   424: 

Source: "monk.txt"
                            	   280: *
                            	   281:  include commands.txt

Source: "commands.txt"
                            	     1: ********************
                            	     2: * monitor commands *
                            	     3: ********************
                            	     4: *
                            	     5: ***************************
                            	     6: * Jump table for commands *
                            	     7: ***************************
                            	     8: *
                            	     9: * Group I commands - Memory.
01:000C10D2 6475            	    10: comtab   dc.w    'du'         Hex and ASCII dump of memory.
01:000C10D4 000C1CC4        	    11:          dc.l    hd
01:000C10D8 6164            	    12:          dc.w    'ad'         ASCII dump of memory.
01:000C10DA 000C1DB2        	    13:          dc.l    ad
01:000C10DE 6D65            	    14:          dc.w    'me'         Memory examine and alter.
01:000C10E0 000C1764        	    15:          dc.l    me
01:000C10E4 706D            	    16:          dc.w    'pm'         Poke memory.
01:000C10E6 000C1E22        	    17:          dc.l    pm
01:000C10EA 746D            	    18:          dc.w    'tm'         Test memory.
01:000C10EC 000C1870        	    19:          dc.l    tm
01:000C10F0 666D            	    20:          dc.w    'fm'         Fill memory.
01:000C10F2 000C1E6A        	    21:          dc.l    fm
01:000C10F6 736D            	    22:          dc.w    'sm'         Shift memory.
01:000C10F8 000C1EAE        	    23:          dc.l    sm
01:000C10FC 6C6B            	    24:          dc.w    'lk'         Load memory from keyboard.
01:000C10FE 000C1F12        	    25:          dc.l    lk
01:000C1102 6669            	    26:          dc.w    'fi'         Find byte string.
01:000C1104 000C1F86        	    27:          dc.l    fi
                            	    28: *
                            	    29: * Group II commands - program.
01:000C1108 7270            	    30:          dc.w    'rp'         Run program.
01:000C110A 000C2048        	    31:          dc.l    rp
01:000C110E 6A75            	    32:          dc.w    'ju'         Jump to program.
01:000C1110 000C20C8        	    33:          dc.l    ju
01:000C1114 6A73            	    34:          dc.w    'js'         Jump to SK*DOS 68K warm start.
01:000C1116 000C20FA        	    35:          dc.l    js
01:000C111A 6472            	    36:          dc.w    'dr'         Display registers.
01:000C111C 000C2124        	    37:          dc.l    dr
01:000C1120 7361            	    38:          dc.w    'sa'         Set address register.
01:000C1122 000C21D2        	    39:          dc.l    sa
01:000C1126 7364            	    40:          dc.w    'sd'         Set data register.
01:000C1128 000C2214        	    41:          dc.l    sd
01:000C112C 7373            	    42:          dc.w    'ss'         Set status register.
01:000C112E 000C2254        	    43:          dc.l    ss
01:000C1132 7370            	    44:          dc.w    'sp'         Set program counter.
01:000C1134 000C2282        	    45:          dc.l    sp
01:000C1138 7472            	    46:          dc.w    'tr'         Trace program.
01:000C113A 000C22AC        	    47:          dc.l    tr
01:000C113E 6370            	    48:          dc.w    'cp'         Continue after breakpoint.
01:000C1140 000C22E2        	    49:          dc.l     cp
01:000C1144 6272            	    50:          dc.w    'br'         List current breakpoints.
01:000C1146 000C233C        	    51:          dc.l    br
01:000C114A 6462            	    52:          dc.w    'db'         Define breakpoints.
01:000C114C 000C23A8        	    53:          dc.l    db
                            	    54: *
                            	    55: * Group III commands - disk.
                            	    56: *         dc.w    'td'         Test drive.
                            	    57: *         dc.l    td
                            	    58: *         dc.w    'ts'         Test floppy stepping.
                            	    59: *         dc.l    ts
01:000C1150 6466            	    60:          dc.w    'df'         Disc format.
01:000C1152 000C258A        	    61:          dc.l    df
01:000C1156 626F            	    62:          dc.w    'bo'         Boot SK*DOS 68K.
01:000C1158 000C2BDC        	    63:          dc.l    bo
01:000C115C 6F62            	    64:          dc.w    'ob'         Boot OS9
01:000C115E 000C2BF0        	    65:          dc.l    ob
01:000C1162 7273            	    66:          dc.w    'rs'         Read sector.
01:000C1164 000C27D2        	    67:          dc.l    rs
01:000C1168 7773            	    68:          dc.w    'ws'         Write sector.
01:000C116A 000C2834        	    69:          dc.l    ws
01:000C116E 6964            	    70:          dc.w    'id'         Inspect Disk.
01:000C1170 000C28CE        	    71:          dc.l    id
                            	    72: *
                            	    73: * Group IV commands - misc.
01:000C1174 7369            	    74:          dc.w    'si'         Set input port.
01:000C1176 000C23F6        	    75:          dc.l    si
01:000C117A 736F            	    76:          dc.w    'so'         Set output port.
01:000C117C 000C2420        	    77:          dc.l    so
01:000C1180 6463            	    78:          dc.w    'dc'         Display real time clock contents.
01:000C1182 000C1A58        	    79:          dc.l    dc
01:000C1186 6D63            	    80:          dc.w    'mc'         Modify rtc contents.
01:000C1188 000C1B06        	    81:          dc.l    mc
01:000C118C 6373            	    82:          dc.w    'cs'         Checksum.
01:000C118E 000C16F0        	    83:          dc.l    cs
01:000C1192 3F3F            	    84:          dc.w    '??'         Help screen.
01:000C1194 000C16B4        	    85:          dc.l    he
01:000C1198 6865            	    86:          dc.w    'he'          "     "
01:000C119A 000C16B4        	    87:          dc.l    he
01:000C119E 7372            	    88:          dc.w    'sr'         S-record loader.
01:000C11A0 000C195C        	    89:          dc.l    sr
01:000C11A4 6470            	    90:          dc.w    'dp'         Display i/o data (ever other byte)
01:000C11A6 000C1BE0        	    91:          dc.l    dp
01:000C11AA 636F            	    92:          dc.w    'co'         Dumb comms terminal.
01:000C11AC 000C1C30        	    93:          dc.l    co
                            	    94: * End of table.
01:000C11B0 FFFF            	    95:          dc.w    $ffff
                            	    96: *
                            	    97: *****************
                            	    98: * Help screen   *
                            	    99: *****************
01:000C11B2 0D              	   100: hes dc.b $d,$a,'  MONK_68K v5.1 Help screen.'
01:000C11B3 0A
01:000C11B4 20204D4F4E4B5F36
01:000C11BC 384B2076352E3120
01:000C11C4 48656C7020736372
01:000C11CC 65656E2E
01:000C11D0 0D              	   101:     dc.b $d,$a
01:000C11D1 0A
01:000C11D2 0D              	   102:     dc.b $d,$a,' HEX numbers are input in free format, end with a space.'
01:000C11D3 0A
01:000C11D4 20484558206E756D
01:000C11DC 6265727320617265
01:000C11E4 20696E7075742069
01:000C11EC 6E20667265652066
01:000C11F4 6F726D61742C2065
01:000C11FC 6E64207769746820
01:000C1204 612073706163652E
01:000C120C 0D              	   103:     dc.b $d,$a,'  SI....Set input port           '
01:000C120D 0A
01:000C120E 202053492E2E2E2E
01:000C1216 53657420696E7075
01:000C121E 7420706F72742020
01:000C1226 2020202020202020
01:000C122E 20
01:000C122F 534F2E2E2E2E5365	   104:     dc.b       'SO....Set output port            '
01:000C1237 74206F7574707574
01:000C123F 20706F7274202020
01:000C1247 2020202020202020
01:000C124F 20
                            	   105: 
01:000C1250 0D              	   106:     dc.b $d,$a,'  AD....Ascii memory dump        '
01:000C1251 0A
01:000C1252 202041442E2E2E2E
01:000C125A 4173636969206D65
01:000C1262 6D6F72792064756D
01:000C126A 7020202020202020
01:000C1272 20
01:000C1273 42522E2E2E2E5368	   107:     dc.b       'BR....Show breakpoints           '
01:000C127B 6F7720627265616B
01:000C1283 706F696E74732020
01:000C128B 2020202020202020
01:000C1293 20
                            	   108: 
01:000C1294 0D              	   109:     dc.b $d,$a,'  LK....load ascii text to ram   '
01:000C1295 0A
01:000C1296 20204C4B2E2E2E2E
01:000C129E 6C6F616420617363
01:000C12A6 6969207465787420
01:000C12AE 746F2072616D2020
01:000C12B6 20
01:000C12B7 44502E2E2E2E6469	   110:     dc.b       'DP....display peripheral data    '
01:000C12BF 73706C6179207065
01:000C12C7 726970686572616C
01:000C12CF 2064617461202020
01:000C12D7 20
                            	   111: 
01:000C12D8 0D              	   112:     dc.b $d,$a,'  CP....Continue program         '
01:000C12D9 0A
01:000C12DA 202043502E2E2E2E
01:000C12E2 436F6E74696E7565
01:000C12EA 2070726F6772616D
01:000C12F2 2020202020202020
01:000C12FA 20
01:000C12FB 43532E2E2E2E4765	   113:     dc.b       'CS....Generate memory checksum   '
01:000C1303 6E6572617465206D
01:000C130B 656D6F7279206368
01:000C1313 65636B73756D2020
01:000C131B 20
                            	   114: 
01:000C131C 0D              	   115:     dc.b $d,$a,'  DB....Define breakpoints       '
01:000C131D 0A
01:000C131E 202044422E2E2E2E
01:000C1326 446566696E652062
01:000C132E 7265616B706F696E
01:000C1336 7473202020202020
01:000C133E 20
01:000C133F 44432E2E2E2E4469	   116:     dc.b       'DC....Display time and date      '
01:000C1347 73706C6179207469
01:000C134F 6D6520616E642064
01:000C1357 6174652020202020
01:000C135F 20
                            	   117: 
01:000C1360 0D              	   118:     dc.b $d,$a,'  DR....Display 68000 registers  '
01:000C1361 0A
01:000C1362 202044522E2E2E2E
01:000C136A 446973706C617920
01:000C1372 3638303030207265
01:000C137A 6769737465727320
01:000C1382 20
01:000C1383 54532E2E2E2E7465	   119:     dc.b       'TS....test drive stepping        '
01:000C138B 7374206472697665
01:000C1393 207374657070696E
01:000C139B 6720202020202020
01:000C13A3 20
                            	   120: 
01:000C13A4 0D              	   121:     dc.b $d,$a,'  TD....ramdom read drive test   '
01:000C13A5 0A
01:000C13A6 202054442E2E2E2E
01:000C13AE 72616D646F6D2072
01:000C13B6 6561642064726976
01:000C13BE 6520746573742020
01:000C13C6 20
01:000C13C7 424F2E2E2E2E626F	   122:     dc.b       'BO....boot SK*DOS 68K            '
01:000C13CF 6F7420534B2A444F
01:000C13D7 532036384B202020
01:000C13DF 2020202020202020
01:000C13E7 20
                            	   123: 
01:000C13E8 0D              	   124:     dc.b $d,$a,'  FI....Find byte string         '
01:000C13E9 0A
01:000C13EA 202046492E2E2E2E
01:000C13F2 46696E6420627974
01:000C13FA 6520737472696E67
01:000C1402 2020202020202020
01:000C140A 20
01:000C140B 464D2E2E2E2E4669	   125:     dc.b       'FM....Fill memory with constant  '
01:000C1413 6C6C206D656D6F72
01:000C141B 7920776974682063
01:000C1423 6F6E7374616E7420
01:000C142B 20
                            	   126: 
01:000C142C 0D              	   127:     dc.b $d,$a,'  DU....Hex+ASCII dump of memory '
01:000C142D 0A
01:000C142E 202044552E2E2E2E
01:000C1436 4865782B41534349
01:000C143E 492064756D70206F
01:000C1446 66206D656D6F7279
01:000C144E 20
01:000C144F 48452E2E2E2E4469	   128:     dc.b       'HE....Display this screen        '
01:000C1457 73706C6179207468
01:000C145F 6973207363726565
01:000C1467 6E20202020202020
01:000C146F 20
                            	   129: 
01:000C1470 0D              	   130:     dc.b $d,$a,'  JS....jump to SK*DOS warm start'
01:000C1471 0A
01:000C1472 20204A532E2E2E2E
01:000C147A 6A756D7020746F20
01:000C1482 534B2A444F532077
01:000C148A 61726D2073746172
01:000C1492 74
01:000C1493 434F2E2E2E2E4475	   131:     dc.b       'CO....Dumb console               '
01:000C149B 6D6220636F6E736F
01:000C14A3 6C65202020202020
01:000C14AB 2020202020202020
01:000C14B3 20
                            	   132: 
01:000C14B4 0D              	   133:     dc.b $d,$a,'  JU....Jump to program          '
01:000C14B5 0A
01:000C14B6 20204A552E2E2E2E
01:000C14BE 4A756D7020746F20
01:000C14C6 70726F6772616D20
01:000C14CE 2020202020202020
01:000C14D6 20
01:000C14D7 4D432E2E2E2E4578	   134:     dc.b       'MC....Examine and alter clock    '
01:000C14DF 616D696E6520616E
01:000C14E7 6420616C74657220
01:000C14EF 636C6F636B202020
01:000C14F7 20
                            	   135: 
01:000C14F8 0D              	   136:     dc.b $d,$a,'  ME....Examine and alter memory '
01:000C14F9 0A
01:000C14FA 20204D452E2E2E2E
01:000C1502 4578616D696E6520
01:000C150A 616E6420616C7465
01:000C1512 72206D656D6F7279
01:000C151A 20
01:000C151B 504D2E2E2E2E506F	   137:     dc.b       'PM....Poke memory                '
01:000C1523 6B65206D656D6F72
01:000C152B 7920202020202020
01:000C1533 2020202020202020
01:000C153B 20
                            	   138: 
01:000C153C 0D              	   139:     dc.b $d,$a,'  RP....Run program (use regs)   '
01:000C153D 0A
01:000C153E 202052502E2E2E2E
01:000C1546 52756E2070726F67
01:000C154E 72616D2028757365
01:000C1556 2072656773292020
01:000C155E 20
01:000C155F 53412E2E2E2E5365	   140:     dc.b       'SA....Set 68000 address regs     '
01:000C1567 7420363830303020
01:000C156F 6164647265737320
01:000C1577 7265677320202020
01:000C157F 20
                            	   141: 
01:000C1580 0D              	   142:     dc.b $d,$a,'  ID....Inspect disk sectors     '
01:000C1581 0A
01:000C1582 202049442E2E2E2E
01:000C158A 496E737065637420
01:000C1592 6469736B20736563
01:000C159A 746F727320202020
01:000C15A2 20
01:000C15A3 53442E2E2E2E5365	   143:     dc.b       'SD....Set 68000 data regs        '
01:000C15AB 7420363830303020
01:000C15B3 6461746120726567
01:000C15BB 7320202020202020
01:000C15C3 20
                            	   144: 
01:000C15C4 0D              	   145:     dc.b $d,$a,'  SM....Shift block of memory    '
01:000C15C5 0A
01:000C15C6 2020534D2E2E2E2E
01:000C15CE 536869667420626C
01:000C15D6 6F636B206F66206D
01:000C15DE 656D6F7279202020
01:000C15E6 20
01:000C15E7 53522E2E2E2E532D	   146:     dc.b       'SR....S-record loader            '
01:000C15EF 7265636F7264206C
01:000C15F7 6F61646572202020
01:000C15FF 2020202020202020
01:000C1607 20
                            	   147: 
01:000C1608 0D              	   148:     dc.b $d,$a,'  SS....Set 68000 status reg     '
01:000C1609 0A
01:000C160A 202053532E2E2E2E
01:000C1612 5365742036383030
01:000C161A 3020737461747573
01:000C1622 2072656720202020
01:000C162A 20
01:000C162B 52532E2E2E2E7265	   149:     dc.b       'RS....read disk sector           '
01:000C1633 6164206469736B20
01:000C163B 736563746F722020
01:000C1643 2020202020202020
01:000C164B 20
                            	   150: 
01:000C164C 0D              	   151:     dc.b $d,$a,'  TM....Test memory              '
01:000C164D 0A
01:000C164E 2020544D2E2E2E2E
01:000C1656 54657374206D656D
01:000C165E 6F72792020202020
01:000C1666 2020202020202020
01:000C166E 20
01:000C166F 54522E2E2E2E5472	   152:     dc.b       'TR....Trace single instruction   '
01:000C1677 6163652073696E67
01:000C167F 6C6520696E737472
01:000C1687 756374696F6E2020
01:000C168F 20
                            	   153: 
01:000C1690 0D              	   154:     dc.b $d,$a,'  WS....write disk sector       ',0,0
01:000C1691 0A
01:000C1692 202057532E2E2E2E
01:000C169A 7772697465206469
01:000C16A2 736B20736563746F
01:000C16AA 7220202020202020
01:000C16B2 00
01:000C16B3 00
01:000C16B4 41FAFAFC        	   155: he lea.l hes(pc),a0
01:000C16B8 6100ED2E        	   156:  bsr pstring
01:000C16BC 6000ECA4        	   157:  bra mwarm
                            	   158: **********************
                            	   159: * Calculate checksum *
                            	   160: **********************
01:000C16C0 0D              	   161: css dc.b $d,'Calculate checksum from ',0,0
01:000C16C1 43616C63756C6174
01:000C16C9 6520636865636B73
01:000C16D1 756D2066726F6D20
01:000C16D9 00
01:000C16DA 00
01:000C16DB 20746F20        	   162: cts dc.b ' to ',0,0
01:000C16DF 00
01:000C16E0 00
01:000C16E1 202020436865636B	   163: cas dc.b '   Checksum = ',0
01:000C16E9 73756D203D20
01:000C16EF 00
01:000C16F0 41FAFFCE        	   164: cs lea.l css(pc),a0
01:000C16F4 6100ECF6        	   165:  bsr prompt
01:000C16F8 2841            	   166:  move.l d1,a4
01:000C16FA 41FAFFDF        	   167:  lea.l cts(pc),a0
01:000C16FE 6100ECEC        	   168:  bsr prompt
01:000C1702 5281            	   169:  addq.l #1,d1
01:000C1704 2A41            	   170:  move.l d1,a5
01:000C1706 41FAFFD9        	   171:  lea.l cas(pc),a0
01:000C170A 6100ECCC        	   172:  bsr pdata1
01:000C170E 283C00000000    	   173:  move.l #0,d4
01:000C1714 101C            	   174: c0 move.b (a4)+,d0
01:000C1716 2A3C00000007    	   175:  move.l #7,d5
01:000C171C E24C            	   176: c1 lsr.w #1,d4
01:000C171E E210            	   177:  roxr.b #1,d0
01:000C1720 40C1            	   178:  move.w sr,d1
01:000C1722 C23C0018        	   179:  and.b #$18,d1
01:000C1726 670A            	   180:  beq.s c2
01:000C1728 B23C0018        	   181:  cmp.b #$18,d1
01:000C172C 6704            	   182:  beq.s c2
01:000C172E 0A448408        	   183:  eor.w #$8408,d4
01:000C1732 51CDFFE8        	   184: c2 dbf d5,c1
01:000C1736 B9CD            	   185:  cmp.l a5,a4
01:000C1738 66DA            	   186:  bne.s c0
01:000C173A 2004            	   187:  move.l d4,d0
01:000C173C 6100ED28        	   188:  bsr out4h
01:000C1740 6000EC20        	   189:  bra mwarm
                            	   190: *
                            	   191: *******************************
                            	   192: *  Memory examine and alter.  *
                            	   193: *******************************
                            	   194: *
01:000C1744 0D              	   195: mes      dc.b     $d,'Memory examine and alter from ',0
01:000C1745 4D656D6F72792065
01:000C174D 78616D696E652061
01:000C1755 6E6420616C746572
01:000C175D 2066726F6D20
01:000C1763 00
01:000C1764 41FAFFDE        	   196: me       lea.l   mes(pc),a0
01:000C1768 6100EC82        	   197:          bsr     prompt
01:000C176C 2041            	   198:          move.l  d1,a0
01:000C176E 7601            	   199:          moveq.l   #1,d3
                            	   200: *
01:000C1770 6100EC5A        	   201: meloop   bsr     pcrlf
01:000C1774 2008            	   202:          move.l  a0,d0
01:000C1776 6100ECE8        	   203:          bsr     out8h
01:000C177A 6100ED12        	   204:          bsr     outs
01:000C177E 6100ED0E        	   205:          bsr     outs
01:000C1782 3403            	   206:          move.w  d3,d2
01:000C1784 5382            	   207:          subq.l    #1,d2
                            	   208: *
01:000C1786 1018            	   209: meloop1  move.b  (a0)+,d0
01:000C1788 6100ECE2        	   210:          bsr     out2h
01:000C178C 51CAFFF8        	   211:          dbf     d2,meloop1
01:000C1790 6100F50A        	   212:          bsr     inch
01:000C1794 6100ECB8        	   213:          bsr     locase
                            	   214: *
01:000C1798 B03C000D        	   215:          cmp.b   #$0d,d0
01:000C179C 6602            	   216:          bne.s   me1
01:000C179E 60D0            	   217:          bra.s   meloop
                            	   218: *
01:000C17A0 B03C002D        	   219: me1      cmp.b   #'-',d0
01:000C17A4 6606            	   220:          bne.s   me2
01:000C17A6 91C3            	   221:          sub.l   d3,a0
01:000C17A8 91C3            	   222:          sub.l   d3,a0
01:000C17AA 60C4            	   223:          bra.s   meloop
                            	   224: *
01:000C17AC B03C0008        	   225: me2      cmp.b   #$08,d0
01:000C17B0 6604            	   226:          bne.s   me3
01:000C17B2 91C3            	   227:          sub.l   d3,a0
01:000C17B4 60BA            	   228:          bra.s   meloop
                            	   229: *
01:000C17B6 B03C0062        	   230: me3      cmp.b   #'b',d0
01:000C17BA 6606            	   231:          bne.s   me4
01:000C17BC 91C3            	   232:          sub.l   d3,a0
01:000C17BE 7601            	   233:          moveq.l   #1,d3
01:000C17C0 60AE            	   234:          bra.s   meloop
                            	   235: *
01:000C17C2 B03C0077        	   236: me4      cmp.b   #'w',d0
01:000C17C6 6606            	   237:          bne.s   me5
01:000C17C8 91C3            	   238:          sub.l   d3,a0
01:000C17CA 7602            	   239:          moveq.l   #2,d3
01:000C17CC 60A2            	   240:          bra.s   meloop
                            	   241: *
01:000C17CE B03C006C        	   242: me5      cmp.b   #'l',d0
01:000C17D2 6606            	   243:          bne.s   me6
01:000C17D4 91C3            	   244:          sub.l   d3,a0
01:000C17D6 7604            	   245:          moveq.l   #4,d3
01:000C17D8 6096            	   246:          bra.s   meloop
                            	   247: *
01:000C17DA B03C0020        	   248: me6      cmp.b   #' ',d0
01:000C17DE 6600EB82        	   249:          bne     mwarm
01:000C17E2 6100EC24        	   250:          bsr     inhex
                            	   251: *
01:000C17E6 0C430002        	   252:          cmpi    #2,d3
01:000C17EA 6D16            	   253:          blt.s   me7
01:000C17EC 6E28            	   254:          bgt.s   me8
01:000C17EE 3141FFFE        	   255:          move.w  d1,-2(a0)
01:000C17F2 B268FFFE        	   256:          cmp.w   -2(a0),d1
01:000C17F6 6700FF78        	   257:          beq     meloop
01:000C17FA 41E8FFFE        	   258:          lea.l   -2(a0),a0
01:000C17FE 60000026        	   259:          bra     meerr
01:000C1802 1141FFFF        	   260: me7      move.b  d1,-1(a0)
01:000C1806 B228FFFF        	   261:          cmp.b   -1(a0),d1
01:000C180A 6700FF64        	   262:          beq     meloop
01:000C180E 41E8FFFF        	   263:          lea.l   -1(a0),a0
01:000C1812 60000012        	   264:          bra     meerr
01:000C1816 2141FFFC        	   265: me8      move.l  d1,-4(a0)
01:000C181A B2A8FFFC        	   266:          cmp.l   -4(a0),d1
01:000C181E 6700FF50        	   267:          beq     meloop
01:000C1822 41E8FFFC        	   268:          lea.l   -4(a0),a0
01:000C1826 103C003F        	   269: meerr    move.b  #$3f,d0
01:000C182A 6100F472        	   270:          bsr     outch
01:000C182E 6000FF40        	   271:          bra     meloop
                            	   272: *
                            	   273: *******************************
                            	   274: *     Quick memory test.      *
                            	   275: *******************************
                            	   276: *
01:000C1832 0D              	   277: tms      dc.b    $d,'Convergence ram test from ',0
01:000C1833 436F6E7665726765
01:000C183B 6E63652072616D20
01:000C1843 746573742066726F
01:000C184B 6D20
01:000C184D 00
01:000C184E 4572726F72206174	   278: tms2     dc.b    'Error at location ',7,0
01:000C1856 206C6F636174696F
01:000C185E 6E20
01:000C1860 07
01:000C1861 00
01:000C1862 206368616E676564	   279: tms3     dc.b    ' changed to ',0,0
01:000C186A 20746F20
01:000C186E 00
01:000C186F 00
01:000C1870 41FAFFC0        	   280: tm       lea.l   tms(pc),a0
01:000C1874 6100EB76        	   281:          bsr     prompt
01:000C1878 2841            	   282:          move.l  d1,a4
01:000C187A 41FAFE5F        	   283:          lea.l   cts(pc),a0
01:000C187E 6100EB6C        	   284:          bsr     prompt
01:000C1882 5281            	   285:  addq.l #1,d1
01:000C1884 2A41            	   286:          move.l  d1,a5
                            	   287: *
01:000C1886 4EB9000C03CC    	   288:          jsr     pcrlf
01:000C188C 7800            	   289:          moveq.l   #0,d4
01:000C188E 2A04            	   290:          move.l  d4,d5
                            	   291: *
                            	   292: * set up ram with test pattern.
01:000C1890 2C4C            	   293: tmfill   move.l  a4,a6
01:000C1892 1004            	   294: tm2      move.b  d4,d0
01:000C1894 220E            	   295:          move.l  a6,d1
01:000C1896 D001            	   296:          add.b   d1,d0
01:000C1898 E089            	   297:          lsr.l   #8,d1
01:000C189A D001            	   298:          add.b   d1,d0
01:000C189C 1CC0            	   299:          move.b  d0,(a6)+
01:000C189E BBCE            	   300:          cmpa.l  a6,a5
01:000C18A0 66F0            	   301:          bne.s   tm2
                            	   302: * check ram pattern.
01:000C18A2 2C4C            	   303: tmchk    move.l  a4,a6
01:000C18A4 1004            	   304: tm9      move.b  d4,d0
01:000C18A6 220E            	   305:          move.l  a6,d1
01:000C18A8 D001            	   306:          add.b   d1,d0
01:000C18AA E089            	   307:          lsr.l   #8,d1
01:000C18AC D001            	   308:          add.b   d1,d0
01:000C18AE B01E            	   309:          cmp.b   (a6)+,d0
01:000C18B0 6734            	   310:          beq.s   tm4
                            	   311: *
01:000C18B2 41FAFF9A        	   312: tmerr    lea.l   tms2(pc),a0
01:000C18B6 1200            	   313:          move.b  d0,d1
01:000C18B8 6100EB2E        	   314:          bsr     PSTRING
01:000C18BC 9CFC0001        	   315:          sub   #1,a6
01:000C18C0 200E            	   316:          move.l  a6,d0
01:000C18C2 6100EB9C        	   317:          bsr     OUT8H
01:000C18C6 7403            	   318:          moveq.l   #3,d2
01:000C18C8 6100EBD0        	   319:          bsr     outns
01:000C18CC 1001            	   320:          move.b  d1,d0
01:000C18CE 6100EB9C        	   321:          bsr     OUT2H
01:000C18D2 41FAFF8E        	   322:          lea.l   tms3(pc),a0
01:000C18D6 6100EB00        	   323:          bsr     PDATA1
01:000C18DA 1016            	   324:          move.b  (a6),d0
01:000C18DC 6100EB8E        	   325:          bsr     OUT2H
01:000C18E0 528E            	   326:          addq.l    #1,a6
01:000C18E2 6000FFBE        	   327:  bra tmchk
                            	   328: *
01:000C18E6 BDCD            	   329: tm4      cmpa.l  a5,a6
01:000C18E8 6600FFBA        	   330:          bne     tm9
                            	   331: *
01:000C18EC 4EB9000C0C44    	   332: tmkey    jsr     status
01:000C18F2 6718            	   333:          beq.s   tmpass
01:000C18F4 6100F37E        	   334:          bsr     inch1
01:000C18F8 B03C001B        	   335:          cmp.b   #$1b,d0
01:000C18FC 66E8            	   336:          bne.s   tm4
01:000C18FE 6100F374        	   337:          bsr     inch1
01:000C1902 B03C000D        	   338:          cmp.b   #$0d,d0
01:000C1906 6604            	   339:          bne.s   tmpass
01:000C1908 6000EA58        	   340:          bra     mwarm
                            	   341: *
01:000C190C 1004            	   342: tmpass   move.b  d4,d0
01:000C190E C0BC00000001    	   343:          and.l   #1,d0
01:000C1914 D03C002A        	   344:          add.b   #$2a,d0
01:000C1918 6100F384        	   345:          bsr     outch
01:000C191C 5284            	   346:          addq.l    #1,d4
01:000C191E 5285            	   347:          addq.l    #1,d5
01:000C1920 BA3C0050        	   348:          cmp.b   #80,d5
01:000C1924 6600FF6A        	   349:          bne     tmfill
01:000C1928 7A00            	   350:          moveq.l   #0,d5
01:000C192A 6100EAA0        	   351:          bsr     pcrlf
01:000C192E 6600FF60        	   352:          bne     tmfill
                            	   353: *
                            	   354: *
                            	   355: *******************************
                            	   356: *       S-Rec loader          *
                            	   357: *******************************
01:000C1932 0D              	   358: srs dc.b $d,'S-record loader     ',0
01:000C1933 532D7265636F7264
01:000C193B 206C6F6164657220
01:000C1943 20202020
01:000C1947 00
01:000C1948 07              	   359: cse dc.b 7,7,7,'Checksum error! ',0
01:000C1949 07
01:000C194A 07
01:000C194B 436865636B73756D
01:000C1953 206572726F722120
01:000C195B 00
01:000C195C 41FAFFD4        	   360: sr lea.l srs(pc),a0
01:000C1960 6100EA76        	   361:  bsr pdata1
01:000C1964 610000CA        	   362: srloop bsr srint
01:000C1968 B03C0053        	   363:  cmp.b #'S',d0
01:000C196C 66F6            	   364:  bne.s srloop
01:000C196E 610000C0        	   365:  bsr srint
01:000C1972 B03C0031        	   366:  cmp.b #'1',d0
01:000C1976 6730            	   367:  beq.s get_rec
01:000C1978 B03C0032        	   368:  cmp.b #'2',d0
01:000C197C 672A            	   369:  beq.s get_rec
01:000C197E B03C0033        	   370:  cmp.b #'3',d0
01:000C1982 6724            	   371:  beq.s get_rec
01:000C1984 B03C0037        	   372:  cmp.b #'7',d0
01:000C1988 6700E9D8        	   373:  beq mwarm
01:000C198C B03C0038        	   374:  cmp.b #'8',d0
01:000C1990 6700E9D0        	   375:  beq mwarm
01:000C1994 B03C0039        	   376:  cmp.b #'9',d0
01:000C1998 6700E9C8        	   377:  beq mwarm
01:000C199C 41FAFFAA        	   378: srerr lea.l cse(pc),a0
01:000C19A0 6100EA36        	   379:  bsr pdata1
01:000C19A4 6000E9BC        	   380:  bra mwarm
                            	   381: *
01:000C19A8 C0BC00000003    	   382: get_rec and.l #3,d0
01:000C19AE 2800            	   383:  move.l d0,d4 d4=address count
                            	   384: *
01:000C19B0 7A00            	   385:  moveq.l  #0,d5
01:000C19B2 61000038        	   386:  bsr srbyte
01:000C19B6 2E00            	   387:  move.l d0,d7 d7=byte count
                            	   388: *
01:000C19B8 7C00            	   389:  moveq.l #0,d6  d6=temp
                            	   390: *
01:000C19BA 9E84            	   391:  sub.l d4,d7 subtract address count from byte count
01:000C19BC 9EBC00000003    	   392:  sub.l #3,d7 adjust byte count for dbf and c-sum
01:000C19C2 99CC            	   393:  sub.l a4,a4 clear a4
                            	   394: *
01:000C19C4 61000026        	   395: addlp bsr srbyte
01:000C19C8 E186            	   396:  asl.l #8,d6
01:000C19CA 1C00            	   397:  move.b d0,d6
01:000C19CC 51CCFFF6        	   398:  dbf d4,addlp
01:000C19D0 2846            	   399:  move.l d6,a4 a4=pointer
                            	   400: *
01:000C19D2 61000018        	   401: datlp bsr srbyte
01:000C19D6 18C0            	   402:  move.b d0,(a4)+
01:000C19D8 51CFFFF8        	   403:  dbf d7,datlp
                            	   404: *
01:000C19DC 61000014        	   405:  bsr srbyte1
01:000C19E0 4600            	   406:  not.b d0
01:000C19E2 BA00            	   407:  cmp.b d0,d5
01:000C19E4 6600FFB6        	   408:  bne srerr
01:000C19E8 6000FF7A        	   409:  bra srloop
                            	   410: *
01:000C19EC 6104            	   411: srbyte bsr.s srbyte1
01:000C19EE DA00            	   412:  add.b d0,d5
01:000C19F0 4E75            	   413:  rts
01:000C19F2 4281            	   414: srbyte1   clr.l   d1
01:000C19F4 6100003A        	   415:          bsr     srint
01:000C19F8 6100EA54        	   416:  bsr locase
01:000C19FC 903C0030        	   417:          sub.b   #'0',d0
01:000C1A00 B03C0009        	   418:          cmp.b   #9,d0
01:000C1A04 6F04            	   419:          ble.s   sr3
01:000C1A06 903C0027        	   420:          sub.b   #39,d0
01:000C1A0A D280            	   421: sr3      add.l   d0,d1
01:000C1A0C E901            	   422:          asl.b   #4,d1
01:000C1A0E 61000020        	   423:          bsr     srint
01:000C1A12 6100EA3A        	   424:  bsr locase
01:000C1A16 903C0030        	   425:          sub.b   #'0',d0
01:000C1A1A B03C0009        	   426:          cmp.b   #9,d0
01:000C1A1E 6F04            	   427:          ble.s   sr4
01:000C1A20 903C0027        	   428:          sub.b   #39,d0
01:000C1A24 D280            	   429: sr4      add.l   d0,d1
01:000C1A26 C2BC000000FF    	   430:          and.l   #$ff,d1
01:000C1A2C 2001            	   431:          move.l d1,d0
01:000C1A2E 4E75            	   432:  rts
                            	   433: *
01:000C1A30 6100F212        	   434: srint bsr status
01:000C1A34 6700000A        	   435:  beq srint1
01:000C1A38 6100F23A        	   436:  bsr inch1
01:000C1A3C 6000E924        	   437:  bra mwarm
01:000C1A40 6100F292        	   438: srint1 bsr stater1
01:000C1A44 67EA            	   439:  beq.s srint
01:000C1A46 6000F2B2        	   440:  bra inter1
                            	   441: *
                            	   442: *******************************
                            	   443: *   Display rtc contents.     *
                            	   444: *******************************
                            	   445: *
01:000C1A4A 0D              	   446: dcs dc.b $d,'Rtc time is ',0
01:000C1A4B 5274632074696D65
01:000C1A53 20697320
01:000C1A57 00
01:000C1A58 41FAFFF0        	   447: dc lea dcs(pc),a0
01:000C1A5C 6100E97A        	   448:  bsr pdata1
                            	   449: *
01:000C1A60 41F90007FCA8    	   450:  lea.l time_st,a0   download time string.
01:000C1A66 4EB9000C0568    	   451:  jsr getrtc
                            	   452: *
01:000C1A6C 10390007FCA8    	   453:  move.b hours,d0
01:000C1A72 C03C003F        	   454:  and.b #$3f,d0
01:000C1A76 6100E9F4        	   455:  bsr out2h
01:000C1A7A 103C003A        	   456:  move.b #':',d0
01:000C1A7E 6100F21E        	   457:  bsr outch
                            	   458: *
01:000C1A82 10390007FCA9    	   459:  move.b mins,d0
01:000C1A88 6100E9E2        	   460:  bsr out2h
01:000C1A8C 103C003A        	   461:  move.b #':',d0
01:000C1A90 6100F20C        	   462:  bsr outch
                            	   463: *
01:000C1A94 10390007FCAA    	   464:  move.b secs,d0
01:000C1A9A 6100E9D0        	   465:  bsr out2h
01:000C1A9E 6100E9EE        	   466:  bsr outs
01:000C1AA2 6100E9EA        	   467:  bsr outs
                            	   468: *
01:000C1AA6 10390007FCAE    	   469:  move.b date,d0
01:000C1AAC 6100E9BE        	   470:  bsr out2h
01:000C1AB0 103C002F        	   471:  move.b #'/',d0
01:000C1AB4 6100F1E8        	   472:  bsr outch
                            	   473: *
01:000C1AB8 10390007FCAD    	   474:  move.b month,d0
01:000C1ABE 6100E9AC        	   475:  bsr out2h
01:000C1AC2 103C002F        	   476:  move.b #'/',d0
01:000C1AC6 6100F1D6        	   477:  bsr outch
                            	   478: *
01:000C1ACA 103C0032        	   479:  move.b #$32,d0
01:000C1ACE 6100F1CE        	   480:  bsr outch
01:000C1AD2 103C0030        	   481:  move.b #$30,d0
01:000C1AD6 6100F1C6        	   482:  bsr outch
01:000C1ADA 10390007FCAC    	   483:  move.b year,d0
01:000C1AE0 6100E98A        	   484:  bsr out2h
                            	   485: *
01:000C1AE4 6000E87C        	   486:  bra mwarm
                            	   487: *
                            	   488: *
                            	   489: *******************************
                            	   490: *     Modify rtc contents.    *
                            	   491: *******************************
                            	   492: *
01:000C1AE8 0D              	   493: mcs      dc.b     $d,'rtc examine and alter from ',0,0
01:000C1AE9 727463206578616D
01:000C1AF1 696E6520616E6420
01:000C1AF9 616C746572206672
01:000C1B01 6F6D20
01:000C1B04 00
01:000C1B05 00
01:000C1B06 41FAFFE0        	   494: mc       lea.l   mcs(pc),a0
01:000C1B0A 6100E8E0        	   495:          bsr     prompt
                            	   496: *
01:000C1B0E 6100E8BC        	   497: mcloop   bsr     pcrlf
01:000C1B12 C2BC00000007    	   498:  and.l #$07,d1
01:000C1B18 1001            	   499:          move.b  d1,d0
01:000C1B1A 6100E950        	   500:          bsr     out2h
01:000C1B1E 6100E96E        	   501:          bsr     outs
01:000C1B22 6100E96A        	   502:          bsr     outs
                            	   503: *
01:000C1B26 41F90007FCA8    	   504: mcloop1  lea.l time_st,a0
01:000C1B2C 4EB9000C0568    	   505:  jsr getrtc
01:000C1B32 10301000        	   506:  move.b 0(a0,d1.w),d0
01:000C1B36 6100E934        	   507:          bsr     out2h
01:000C1B3A 6100F160        	   508:          bsr     inch
01:000C1B3E 6100E90E        	   509:          bsr     locase
                            	   510: *
01:000C1B42 B03C000D        	   511:          cmp.b   #$0d,d0
01:000C1B46 6604            	   512:          bne.s   mc1
01:000C1B48 5281            	   513:          addq.l #1,d1
01:000C1B4A 60C2            	   514:          bra.s   mcloop
                            	   515: *
01:000C1B4C B03C002D        	   516: mc1      cmp.b   #'-',d0
01:000C1B50 6604            	   517:          bne.s   mc2
01:000C1B52 5381            	   518:          subq.l #1,d1
01:000C1B54 60B8            	   519:          bra.s   mcloop
                            	   520: *
01:000C1B56 B03C0020        	   521: mc2      cmp.b   #' ',d0
01:000C1B5A 6600E806        	   522:          bne     mwarm
01:000C1B5E 1E01            	   523:          move.b  d1,d7
01:000C1B60 6100E8A6        	   524:          bsr     inhex
01:000C1B64 1001            	   525:          move.b  d1,d0
01:000C1B66 1207            	   526:          move.b d7,d1
01:000C1B68 41F90007FCA8    	   527:  lea.l time_st,a0
01:000C1B6E 4EB9000C0568    	   528:  jsr getrtc
01:000C1B74 11801000        	   529:  move.b d0,0(a0,d1.w)
01:000C1B78 4EB9000C04F8    	   530:  jsr putrtc
01:000C1B7E 5281            	   531:          addq.l    #1,d1
01:000C1B80 6000FF8C        	   532:          bra     mcloop
                            	   533: *
                            	   534: *******************************
                            	   535: *   Display peripheral data   *
                            	   536: *******************************
                            	   537: *
01:000C1B84 0D              	   538: dps      dc.b    $d,'Display peripheral data from ',0,0
01:000C1B85 446973706C617920
01:000C1B8D 7065726970686572
01:000C1B95 616C206461746120
01:000C1B9D 66726F6D20
01:000C1BA2 00
01:000C1BA3 00
01:000C1BA4 2020202020202020	   539: dps1 dc.b '           0  2  4  6  8  A  C  E'
01:000C1BAC 2020203020203220
01:000C1BB4 2034202036202038
01:000C1BBC 2020412020432020
01:000C1BC4 45
01:000C1BC5 2020203130203132	   540:      dc.b '   10 12 14 16 18 1A 1C 1E',0
01:000C1BCD 2031342031362031
01:000C1BD5 3820314120314320
01:000C1BDD 3145
01:000C1BDF 00
01:000C1BE0 41FAFFA2        	   541: dp       lea.l   dps(pc),a0
01:000C1BE4 6100E806        	   542:          bsr     prompt
01:000C1BE8 2241            	   543:          move.l  d1,a1
01:000C1BEA 6100E7E0        	   544: dp2      bsr     pcrlf
01:000C1BEE 41FAFFB4        	   545:          lea     dps1(pc),a0
01:000C1BF2 6100E7F4        	   546:          bsr     pstring
01:000C1BF6 7601            	   547:          moveq   #1,d3
01:000C1BF8 6108            	   548: dploop   bsr.s   lp
01:000C1BFA 51CBFFFC        	   549:          dbf     d3,dploop
01:000C1BFE 6000E762        	   550:          bra     mwarm
                            	   551: *
01:000C1C02 780F            	   552: lp       moveq   #15,d4
01:000C1C04 6100E7C6        	   553:          bsr     pcrlf
01:000C1C08 2009            	   554:          move.l  a1,d0
01:000C1C0A 6100E854        	   555:          bsr     out8h
01:000C1C0E 7402            	   556:          moveq   #2,d2
01:000C1C10 6100E888        	   557:          bsr     outns
                            	   558: *
01:000C1C14 1019            	   559: lp1      move.b  (a1)+,d0
01:000C1C16 5249            	   560:          addq    #1,a1
01:000C1C18 6100E852        	   561:          bsr     out2h
01:000C1C1C 6100E870        	   562:          bsr     outs
01:000C1C20 0C440008        	   563:          cmpi    #8,d4
01:000C1C24 6604            	   564:          bne.s   dp1
01:000C1C26 6100E866        	   565:          bsr     outs
01:000C1C2A 51CCFFE8        	   566: dp1      dbf     d4,lp1
01:000C1C2E 4E75            	   567:          rts
                            	   568: *
                            	   569: ***************************
                            	   570: *   Dumb comms terminal   *
                            	   571: ***************************
01:000C1C30 700C            	   572: co moveq #$0c,d0
01:000C1C32 4EB9000C0C9E    	   573:  jsr outch
01:000C1C38 4EB9000C0C44    	   574: colp jsr status
01:000C1C3E 6712            	   575:  beq.s colp1
01:000C1C40 4EB9000C0C74    	   576:  jsr inch1
01:000C1C46 C0BC0000007F    	   577:  and.l #$7f,d0
01:000C1C4C 4EB9000C0D08    	   578:  jsr outter0
01:000C1C52 4EB9000C0CCA    	   579: colp1 jsr stater0
01:000C1C58 67DE            	   580:  beq.s colp
01:000C1C5A 4EB9000C0CEC    	   581:  jsr inter0
01:000C1C60 C0BC0000007F    	   582:  and.l #$7f,d0
01:000C1C66 4EB9000C0C9E    	   583:  jsr outch
01:000C1C6C 60CA            	   584:  bra.s colp
                            	   585: *
                            	   586: *******************************
                            	   587: *      Hex memory dump        *
                            	   588: *******************************
                            	   589: *
01:000C1C6E 0D              	   590: hds dc.b $d,'Hex dump of memory  from ',0
01:000C1C6F 4865782064756D70
01:000C1C77 206F66206D656D6F
01:000C1C7F 7279202066726F6D
01:000C1C87 20
01:000C1C88 00
01:000C1C89 2020202020202020	   591: hds1 dc.b '           0  1  2  3  4  5  6  7'
01:000C1C91 2020203020203120
01:000C1C99 2032202033202034
01:000C1CA1 2020352020362020
01:000C1CA9 37
01:000C1CAA 2020203820203920	   592:      dc.b '   8  9  A  B  C  D  E  F',0
01:000C1CB2 2041202042202043
01:000C1CBA 2020442020452020
01:000C1CC2 46
01:000C1CC3 00
01:000C1CC4 41FAFFA8        	   593: hd lea hds(pc),a0
01:000C1CC8 6100E722        	   594:  bsr prompt
                            	   595: 
01:000C1CCC 2241            	   596:  move.l d1,a1
01:000C1CCE 6100E6FC        	   597: hd2 bsr PCRLF
01:000C1CD2 41FAFFB5        	   598:  lea hds1(pc),a0
01:000C1CD6 6100E710        	   599:  bsr PSTRING
01:000C1CDA 760F            	   600:  moveq #15,d3
01:000C1CDC 611C            	   601: hloop bsr.s loop
01:000C1CDE 51CBFFFC        	   602:  dbf d3,hloop
                            	   603: *
01:000C1CE2 6100EF90        	   604:  bsr INCH1
01:000C1CE6 0C40000D        	   605:  cmpi #$d,d0
01:000C1CEA 67E2            	   606:  beq.s hd2
01:000C1CEC 0C40002D        	   607:  cmpi #'-',d0
01:000C1CF0 6600E670        	   608:  bne MWARM
01:000C1CF4 43E9FE00        	   609:  lea.l -512(a1),a1
01:000C1CF8 60D4            	   610:  bra.s hd2
                            	   611: *
01:000C1CFA 780F            	   612: loop moveq #15,d4
01:000C1CFC 6100E6CE        	   613:  bsr PCRLF
01:000C1D00 2009            	   614:  move.l a1,d0
01:000C1D02 6100E75C        	   615:  bsr OUT8H
01:000C1D06 7402            	   616:  moveq #2,d2
01:000C1D08 6100E790        	   617:  bsr OUTNS
                            	   618: *
01:000C1D0C 1019            	   619: loop1 move.b (a1)+,d0
01:000C1D0E 6100E75C        	   620:  bsr OUT2H
01:000C1D12 6100E77A        	   621:  bsr OUTS
01:000C1D16 0C440008        	   622:  cmpi #8,d4
01:000C1D1A 6604            	   623:  bne.s hd1
01:000C1D1C 6100E770        	   624:  bsr OUTS
01:000C1D20 51CCFFEA        	   625: hd1 dbf d4,loop1
                            	   626: *
01:000C1D24 7403            	   627:  moveq #3,d2
01:000C1D26 6100E772        	   628:  bsr OUTNS
01:000C1D2A 43E9FFF0        	   629:  lea  -16(a1),a1
01:000C1D2E 780F            	   630:  moveq #15,d4
01:000C1D30 1019            	   631: loop2 move.b (a1)+,d0
01:000C1D32 0C000020        	   632:  cmpi.b #$20,d0
01:000C1D36 6506            	   633:  blo.s hdx
01:000C1D38 0C00007F        	   634:  cmpi.b #$7f,d0
01:000C1D3C 6502            	   635:  blo.s hdy
01:000C1D3E 702E            	   636: hdx moveq #'.',d0
01:000C1D40 6100EF5C        	   637: hdy bsr OUTCH
01:000C1D44 51CCFFEA        	   638:  dbf d4,loop2
01:000C1D48 4E75            	   639:  rts
                            	   640: *******************************
                            	   641: *     Ascii memory dump.      *
                            	   642: *******************************
                            	   643: *
01:000C1D4A 0D              	   644: ads dc.b $d,'Ascii dump of memory from ',0
01:000C1D4B 4173636969206475
01:000C1D53 6D70206F66206D65
01:000C1D5B 6D6F72792066726F
01:000C1D63 6D20
01:000C1D65 00
01:000C1D66 2020202020202020	   645: ads1 dc.b '           0   4   8   C   0   4   8   C   '
01:000C1D6E 2020203020202034
01:000C1D76 2020203820202043
01:000C1D7E 2020203020202034
01:000C1D86 2020203820202043
01:000C1D8E 202020
01:000C1D91 3020202034202020	   646:      dc.b '0   4   8   C   0   4   8   C  F',0
01:000C1D99 3820202043202020
01:000C1DA1 3020202034202020
01:000C1DA9 3820202043202046
01:000C1DB1 00
01:000C1DB2 41FAFF96        	   647: ad lea ads(pc),a0
01:000C1DB6 6100E634        	   648:  bsr prompt
01:000C1DBA 2241            	   649:  move.l d1,a1
01:000C1DBC 6100E60E        	   650: ad2 bsr PCRLF
01:000C1DC0 41FAFFA4        	   651:  lea ads1(pc),a0
01:000C1DC4 6100E622        	   652:  bsr PSTRING
01:000C1DC8 760F            	   653:  moveq #15,d3
01:000C1DCA 783F            	   654: adloop moveq #63,d4
01:000C1DCC 6100E5FE        	   655:  bsr PCRLF
01:000C1DD0 2009            	   656:  move.l a1,d0
01:000C1DD2 6100E68C        	   657:  bsr OUT8H
01:000C1DD6 7402            	   658:  moveq #2,d2
01:000C1DD8 6100E6C0        	   659:  bsr OUTNS
01:000C1DDC 1019            	   660: adloop1 move.b (a1)+,d0
01:000C1DDE 0C000020        	   661:  cmpi.b #$20,d0
01:000C1DE2 6506            	   662:  blo.s adx
01:000C1DE4 0C00007F        	   663:  cmpi.b #$7f,d0
01:000C1DE8 6502            	   664:  blo.s ady
01:000C1DEA 702E            	   665: adx moveq #'.',d0
01:000C1DEC 6100EEB0        	   666: ady bsr OUTCH
01:000C1DF0 51CCFFEA        	   667:  dbf d4,adloop1
01:000C1DF4 51CBFFD4        	   668:  dbf d3,adloop
01:000C1DF8 6100EE7A        	   669:  bsr INCH1
01:000C1DFC 0C00000D        	   670:  cmpi.b #$d,d0
01:000C1E00 67BA            	   671:  beq.s ad2
01:000C1E02 0C00002D        	   672:  cmpi.b #'-',d0
01:000C1E06 6600E55A        	   673:  bne MWARM
01:000C1E0A 43E9F800        	   674:  lea -2048(a1),a1
01:000C1E0E 60AC            	   675:  bra.s ad2
                            	   676: *
                            	   677: *******************************
                            	   678: *  Poke memory with constant. *
                            	   679: *******************************
                            	   680: *
01:000C1E10 0D              	   681: pms      dc.b    $d,'Poke memory  at ',0
01:000C1E11 506F6B65206D656D
01:000C1E19 6F72792020617420
01:000C1E21 00
01:000C1E22 41FAFFEC        	   682: pm       lea.l   pms(pc),a0
01:000C1E26 6100E5C4        	   683:          bsr     prompt
01:000C1E2A 2241            	   684:          move.l  d1,a1
01:000C1E2C 41FA0035        	   685:          lea.l   values(pc),a0
01:000C1E30 6100E5A6        	   686:          bsr     pdata1
01:000C1E34 6100E5D2        	   687:          bsr     inhex
01:000C1E38 1281            	   688:          move.b  d1,(a1)
01:000C1E3A 6000E526        	   689:          bra     mwarm
                            	   690: *
                            	   691: *******************************
                            	   692: *  Fill memory with constant. *
                            	   693: *******************************
                            	   694: *
01:000C1E3E 0D              	   695: fms dc.b $d,'Fill memory with constant from ',0
01:000C1E3F 46696C6C206D656D
01:000C1E47 6F72792077697468
01:000C1E4F 20636F6E7374616E
01:000C1E57 742066726F6D20
01:000C1E5E 00
01:000C1E5F 746F20          	   696: tos dc.b 'to ',0
01:000C1E62 00
01:000C1E63 76616C756520    	   697: values dc.b 'value ',0
01:000C1E69 00
01:000C1E6A 41FAFFD2        	   698: fm lea fms(pc),a0
01:000C1E6E 6100E57C        	   699:  bsr prompt
01:000C1E72 2241            	   700:  move.l d1,a1
01:000C1E74 41FAFFE9        	   701:  lea tos(pc),a0
01:000C1E78 6100E572        	   702:  bsr prompt
01:000C1E7C 2441            	   703:  move.l d1,a2
01:000C1E7E 41FAFFE3        	   704:  lea values(pc),a0
01:000C1E82 6100E568        	   705:  bsr prompt
01:000C1E86 12C1            	   706: fmloop move.b d1,(a1)+
01:000C1E88 B5C9            	   707:  cmp.l a1,a2
01:000C1E8A 66FA            	   708:  bne.s fmloop
01:000C1E8C 6000E4D4        	   709:  bra MWARM
                            	   710: *
                            	   711: *******************************
                            	   712: *     Shift memory block.     *
                            	   713: *******************************
                            	   714: *
01:000C1E90 0D              	   715: sms      dc.b    $d,'Shift memory from ',0
01:000C1E91 5368696674206D65
01:000C1E99 6D6F72792066726F
01:000C1EA1 6D20
01:000C1EA3 00
01:000C1EA4 206C656E67746820	   716: lengths  dc.b    ' length ',0,0
01:000C1EAC 00
01:000C1EAD 00
01:000C1EAE 41FAFFE0        	   717: sm       lea.l   sms(pc),a0
01:000C1EB2 6100E538        	   718:          bsr     prompt
01:000C1EB6 2241            	   719:          move.l  d1,a1
01:000C1EB8 41FAFFA5        	   720:          lea.l   tos(pc),a0
01:000C1EBC 6100E52E        	   721:          bsr     prompt
01:000C1EC0 2441            	   722:          move.l  d1,a2
01:000C1EC2 41FAFFE0        	   723:          lea.l   lengths(pc),a0
01:000C1EC6 6100E524        	   724:          bsr     prompt
01:000C1ECA 5341            	   725:          subq    #1,d1
01:000C1ECC 14D9            	   726: smloop   move.b  (a1)+,(a2)+
01:000C1ECE 51C9FFFC        	   727:          dbf     d1,smloop
01:000C1ED2 6000E48E        	   728:          bra     mwarm
                            	   729: *
                            	   730: *******************************
                            	   731: *   Load text from keyboard.  *
                            	   732: *******************************
                            	   733: *
01:000C1ED6 0D              	   734: lks      dc.b    $d,'Load text from keyboard to memory at ',0
01:000C1ED7 4C6F616420746578
01:000C1EDF 742066726F6D206B
01:000C1EE7 6579626F61726420
01:000C1EEF 746F206D656D6F72
01:000C1EF7 7920617420
01:000C1EFC 00
01:000C1EFD 20746578742E2E28	   735: lks1     dc.b    ' text..(end with ^D)',0
01:000C1F05 656E642077697468
01:000C1F0D 205E4429
01:000C1F11 00
01:000C1F12 41FAFFC2        	   736: lk       lea.l   lks(pc),a0
01:000C1F16 6100E4D4        	   737:          bsr     prompt
01:000C1F1A 2241            	   738:          move.l  d1,a1
01:000C1F1C 41FAFFDF        	   739:          lea.l   lks1(pc),a0
01:000C1F20 6100E4B6        	   740:          bsr     pdata1
01:000C1F24 6100ED76        	   741: lkloop   bsr     inch
01:000C1F28 12C0            	   742:          move.b  d0,(a1)+
01:000C1F2A B03C0004        	   743:          cmp.b   #4,d0
01:000C1F2E 66F4            	   744:          bne.s   lkloop
01:000C1F30 4229FFFF        	   745:          clr.b   -1(a1)
01:000C1F34 6000E42C        	   746:          bra     mwarm
                            	   747: *
                            	   748: *******************************
                            	   749: *      Find byte string.      *
                            	   750: *******************************
                            	   751: *
01:000C1F38 0D              	   752: fis      dc.b    $d,'Find byte string from ',0
01:000C1F39 46696E6420627974
01:000C1F41 6520737472696E67
01:000C1F49 2066726F6D20
01:000C1F4F 00
01:000C1F50 2020206E756D6265	   753: nbs      dc.b    '   number of bytes in string ',0
01:000C1F58 72206F6620627974
01:000C1F60 657320696E207374
01:000C1F68 72696E6720
01:000C1F6D 00
01:000C1F6E 2020456E74657220	   754: ebs      dc.b    '  Enter byte string... ',0
01:000C1F76 6279746520737472
01:000C1F7E 696E672E2E2E20
01:000C1F85 00
01:000C1F86 41FAFFB0        	   755: fi       lea.l   fis(pc),a0
01:000C1F8A 6100E460        	   756:          bsr     prompt
01:000C1F8E 2441            	   757:          move.l  d1,a2
01:000C1F90 41FAFECD        	   758:          lea.l   tos(pc),a0
01:000C1F94 6100E456        	   759:          bsr     prompt
01:000C1F98 2641            	   760:          move.l  d1,a3
01:000C1F9A 41FAFFB4        	   761:          lea.l   nbs(pc),a0
01:000C1F9E 6100E44C        	   762:          bsr     prompt
01:000C1FA2 2E01            	   763:          move.l  d1,d7
01:000C1FA4 5347            	   764:          subq    #1,d7
01:000C1FA6 41FAFFC6        	   765:          lea.l   ebs(pc),a0
01:000C1FAA 6100E43C        	   766:          bsr     pstring
01:000C1FAE 41F900028000    	   767:          lea.l   rbuff,a0
01:000C1FB4 6100E452        	   768: inloop   bsr     inhex
01:000C1FB8 10C1            	   769:          move.b  d1,(a0)+
01:000C1FBA 51CFFFF8        	   770:          dbf     d7,inloop
01:000C1FBE 2248            	   771:          move.l  a0,a1
01:000C1FC0 41F900028000    	   772:          lea.l   rbuff,a0
01:000C1FC6 B508            	   773: fchk1    cmp.b   (a0)+,(a2)+
01:000C1FC8 6606            	   774:          bne.s   fnope
01:000C1FCA B1C9            	   775:          cmp.l   a1,a0
01:000C1FCC 66F8            	   776:          bne.s   fchk1
01:000C1FCE 6110            	   777:          bsr.s   ffound
01:000C1FD0 41F900028000    	   778: fnope    lea.l   rbuff,a0
01:000C1FD6 284A            	   779:          move.l  a2,a4
01:000C1FD8 B5CB            	   780:          cmp.l   a3,a2
01:000C1FDA 6C00E386        	   781:          bge     mwarm
01:000C1FDE 60E6            	   782:          bra.s   fchk1
                            	   783: *
01:000C1FE0 780F            	   784: ffound moveq #15,d4
01:000C1FE2 6100E3E8        	   785:  bsr PCRLF
01:000C1FE6 534C            	   786:  subq #1,a4
01:000C1FE8 200C            	   787:  move.l a4,d0
01:000C1FEA 6100E474        	   788:  bsr OUT8H
01:000C1FEE 7402            	   789:  moveq #2,d2
01:000C1FF0 6100E4A8        	   790:  bsr OUTNS
                            	   791: *
01:000C1FF4 514C            	   792:  subq #8,a4
01:000C1FF6 101C            	   793: floop1 move.b (a4)+,d0
01:000C1FF8 6100E472        	   794:  bsr OUT2H
01:000C1FFC 6100E490        	   795:  bsr OUTS
01:000C2000 0C440008        	   796:  cmpi #8,d4
01:000C2004 6604            	   797:  bne.s fhd1
01:000C2006 6100E486        	   798:  bsr OUTS
01:000C200A 51CCFFEA        	   799: fhd1 dbf d4,floop1
                            	   800: *
01:000C200E 7404            	   801:  moveq #4,d2
01:000C2010 6100E488        	   802:  bsr OUTNS
01:000C2014 49ECFFF0        	   803:  lea  -16(a4),a4
01:000C2018 780F            	   804:  moveq #15,d4
01:000C201A 101C            	   805: floop2 move.b (a4)+,d0
01:000C201C 0C000020        	   806:  cmpi.b #$20,d0
01:000C2020 6506            	   807:  blo.s fhdx
01:000C2022 0C00007F        	   808:  cmpi.b #$7f,d0
01:000C2026 6502            	   809:  blo.s fhdy
01:000C2028 702E            	   810: fhdx moveq #'.',d0
01:000C202A 6100EC72        	   811: fhdy bsr OUTCH
01:000C202E 51CCFFEA        	   812:  dbf d4,floop2
01:000C2032 4E75            	   813:  rts
                            	   814: *
                            	   815: *******************************
                            	   816: *      Run user program.      *
                            	   817: *******************************
                            	   818: *
01:000C2034 0D              	   819: rps     dc.b    $d,'Run program from ',0,0
01:000C2035 52756E2070726F67
01:000C203D 72616D2066726F6D
01:000C2045 20
01:000C2046 00
01:000C2047 00
01:000C2048 41FAFFEA        	   820: rp      lea.l   rps(pc),a0
01:000C204C 6100E39E        	   821:         bsr     prompt
01:000C2050 23C10007FC5A    	   822:         move.l  d1,upc
                            	   823: *
01:000C2056 083900050007FC58	   824: go1     btst    #5,usr       Check supervisor bit not set.
01:000C205E 660002BA        	   825:         bne     goerr        Error if so.
01:000C2062 42390007FC7C    	   826:         clr.b   bflg         Clear breakpoint flag.
                            	   827: *
01:000C2068 28790007FC5A    	   828: cgo     move.l  upc,a4       Extract user pc.
01:000C206E 43F90007FC5E    	   829:         lea.l   brkp,a1      Point to breakpoint space.
01:000C2074 7004            	   830:         moveq   #4,d0        Counter.
01:000C2076 95CA            	   831:         sub.l   a2,a2        Zero a2.
01:000C2078 2219            	   832: go2     move.l  (a1)+,d1     Breakpoint address.
01:000C207A 670E            	   833:         beq.s   go3          Zero address so no breakpoint.
01:000C207C 32B21800        	   834:         move.w  0(a2,d1.l),(a1) Save orgional instruction.
01:000C2080 B9C1            	   835:         cmp.l   d1,a4        Check if breakpoint at user pc.
01:000C2082 6706            	   836:         beq.s   go3          Do not insert breakpoint if so.
01:000C2084 35BC4E4E1800    	   837:         move.w  #$4e4e,0(a2,d1.l) Replace with breakpoint trap.
01:000C208A D3FC00000002    	   838: go3     add.l   #2,a1        Increment a1.
01:000C2090 51C8FFE6        	   839:         dbf     d0,go2       Try next breakpoint.
                            	   840: *
01:000C2094 20790007FC54    	   841:         move.l  usptr,a0     Extract user stack pointer.
01:000C209A 4E60            	   842:         move.l  a0,usp       And set it up.
01:000C209C 2F390007FC5A    	   843:         move.l  upc,-(sp)    Stack user pc.
01:000C20A2 3F390007FC58    	   844:         move.w  usr,-(sp)    Stack user sr.
01:000C20A8 4CF97FFF0007FC18	   845:         movem.l ud,d0-d7/a0-a6 Set up user's registers.
01:000C20B0 4E73            	   846:         rte                  Geronimo!
                            	   847: *
                            	   848: *******************************
                            	   849: *    Jump tp user program.    *
                            	   850: *******************************
                            	   851: *
01:000C20B2 0D              	   852: jps      dc.b    $d,'Jump to program at  ',0
01:000C20B3 4A756D7020746F20
01:000C20BB 70726F6772616D20
01:000C20C3 61742020
01:000C20C7 00
01:000C20C8 41FAFFE8        	   853: ju       lea.l   jps(pc),a0
01:000C20CC 6100E30A        	   854:          bsr     pdata1
01:000C20D0 6100E336        	   855:          bsr     inhex
01:000C20D4 2041            	   856:          move.l  d1,a0
01:000C20D6 4ED0            	   857:          jmp     (a0)
                            	   858: *
                            	   859: **********************************
                            	   860: *  Jump to SK*DOS 68K warm start *
                            	   861: **********************************
                            	   862: *
01:000C20D8 0D              	   863: jvs      dc.b    $d,'Jump to SK*DOS 68K warm start..',0,0
01:000C20D9 4A756D7020746F20
01:000C20E1 534B2A444F532036
01:000C20E9 384B207761726D20
01:000C20F1 73746172742E2E
01:000C20F8 00
01:000C20F9 00
01:000C20FA 41FAFFDC        	   864: js       lea.l   jvs(pc),a0
01:000C20FE 6100E2D8        	   865:          bsr     pdata1
01:000C2102 4EF9000C0362    	   866:          jmp     mwarm
                            	   867: *
                            	   868: *******************************
                            	   869: *   Display user registers.   *
                            	   870: *******************************
                            	   871: *
01:000C2108 0D              	   872: drs      dc.b    $d,'Display registers.',0
01:000C2109 446973706C617920
01:000C2111 7265676973746572
01:000C2119 732E
01:000C211B 00
01:000C211C 506320          	   873: drs1     dc.b    'Pc ',0
01:000C211F 00
01:000C2120 537220          	   874: drs2     dc.b    'Sr ',0
01:000C2123 00
01:000C2124 41FAFFE2        	   875: dr       lea.l   drs(pc),a0
01:000C2128 6100E2AE        	   876:          bsr     pdata1
01:000C212C 6104            	   877:          bsr.s   drx
01:000C212E 6000E232        	   878:          bra     mwarm
                            	   879: *
01:000C2132 48E7E0C0        	   880: drx      movem.l d0-d2/a0-a1,-(sp)
01:000C2136 6100E294        	   881:          bsr     pcrlf
01:000C213A 41FAFFE0        	   882:          lea.l   drs1(pc),a0
01:000C213E 6100E298        	   883:          bsr     pdata1
01:000C2142 20390007FC5A    	   884:          move.l  upc,d0
01:000C2148 6100E316        	   885:          bsr     out8h
01:000C214C 6100E340        	   886:          bsr     outs
01:000C2150 6100E33C        	   887:          bsr     outs
01:000C2154 41FAFFCA        	   888:          lea.l   drs2(pc),a0
01:000C2158 6100E27E        	   889:          bsr     pdata1
01:000C215C 30390007FC58    	   890:          move.w  usr,d0
01:000C2162 6100E302        	   891:          bsr     out4h
01:000C2166 6100E264        	   892:          bsr     pcrlf
01:000C216A 43F90007FC18    	   893:          lea.l   ud,a1
01:000C2170 123C00D0        	   894:          move.b  #$d0,d1
01:000C2174 611C            	   895:          bsr.s   drx1
01:000C2176 6100E254        	   896:          bsr     pcrlf
01:000C217A 6116            	   897:          bsr.s   drx1
01:000C217C 6100E24E        	   898:          bsr     pcrlf
01:000C2180 123C00A0        	   899:          move.b  #$a0,d1
01:000C2184 610C            	   900:          bsr.s   drx1
01:000C2186 6100E244        	   901:          bsr     pcrlf
01:000C218A 6106            	   902:          bsr.s   drx1
01:000C218C 4CDF0307        	   903:          movem.l (sp)+,d0-d2/a0-a1
01:000C2190 4E75            	   904:          rts
                            	   905: *
01:000C2192 7403            	   906: drx1     moveq   #3,d2
01:000C2194 3001            	   907: drx2     move    d1,d0
01:000C2196 6100E2D4        	   908:          bsr     out2h
01:000C219A 6100E2F2        	   909:          bsr     outs
01:000C219E 2019            	   910:          move.l  (a1)+,d0
01:000C21A0 6100E2BE        	   911:          bsr     out8h
01:000C21A4 6100E2E8        	   912:          bsr     outs
01:000C21A8 6100E2E4        	   913:          bsr     outs
01:000C21AC 5241            	   914:          addq    #1,d1
01:000C21AE 51CAFFE4        	   915:          dbf     d2,drx2
01:000C21B2 4E75            	   916:          rts
                            	   917: *
                            	   918: *******************************
                            	   919: *    Set address register.    *
                            	   920: *******************************
                            	   921: *
01:000C21B4 0D              	   922: sas      dc.b    $d,'Set address register number ',0
01:000C21B5 5365742061646472
01:000C21BD 6573732072656769
01:000C21C5 73746572206E756D
01:000C21CD 62657220
01:000C21D1 00
01:000C21D2 41FAFFE0        	   923: sa       lea.l   sas(pc),a0
01:000C21D6 6100E214        	   924:          bsr     prompt
01:000C21DA 1001            	   925:          move.b  d1,d0
01:000C21DC 02400007        	   926:          andi    #7,d0
01:000C21E0 E500            	   927:          asl.b   #2,d0
01:000C21E2 41FAFC7F        	   928:          lea.l   values(pc),a0
01:000C21E6 6100E204        	   929:          bsr     prompt
01:000C21EA 41F90007FC38    	   930:          lea.l   ua,a0
01:000C21F0 21810000        	   931:          move.l  d1,(a0,d0)
01:000C21F4 6000E16C        	   932:          bra     mwarm
                            	   933: *
                            	   934: *******************************
                            	   935: *      Set data register.     *
                            	   936: *******************************
                            	   937: *
01:000C21F8 0D              	   938: sds      dc.b    $d,'Set data register number ',0,0
01:000C21F9 5365742064617461
01:000C2201 2072656769737465
01:000C2209 72206E756D626572
01:000C2211 20
01:000C2212 00
01:000C2213 00
01:000C2214 41FAFFE2        	   939: sd       lea.l   sds(pc),a0
01:000C2218 6100E1D2        	   940:          bsr     prompt
01:000C221C 1001            	   941:          move.b  d1,d0
01:000C221E 02400007        	   942:          andi    #7,d0
01:000C2222 E500            	   943:          asl.b   #2,d0
01:000C2224 41FAFC3D        	   944:          lea.l   values(pc),a0
01:000C2228 6100E1C2        	   945:          bsr     prompt
01:000C222C 41F90007FC18    	   946:          lea.l   ud,a0
01:000C2232 21810000        	   947:          move.l  d1,(a0,d0)
01:000C2236 6000E12A        	   948:          bra     mwarm
                            	   949: *
                            	   950: *******************************
                            	   951: *     Set status register.    *
                            	   952: *******************************
                            	   953: *
01:000C223A 0D              	   954: sss      dc.b    $d,'Set status register to ',0,0
01:000C223B 5365742073746174
01:000C2243 7573207265676973
01:000C224B 74657220746F20
01:000C2252 00
01:000C2253 00
01:000C2254 41FAFFE4        	   955: ss       lea.l   sss(pc),a0
01:000C2258 6100E192        	   956:          bsr     prompt
01:000C225C 41F90007FC58    	   957:          lea.l   usr,a0
01:000C2262 3081            	   958:          move.w  d1,(a0)
01:000C2264 6000E0FC        	   959:          bra     mwarm
                            	   960: *
                            	   961: *******************************
                            	   962: *     Set program counter.    *
                            	   963: *******************************
                            	   964: *
01:000C2268 0D              	   965: sps      dc.b    $d,'Set program counter to ',0,0
01:000C2269 5365742070726F67
01:000C2271 72616D20636F756E
01:000C2279 74657220746F20
01:000C2280 00
01:000C2281 00
01:000C2282 41FAFFE4        	   966: sp       lea.l   sps(pc),a0
01:000C2286 6100E164        	   967:          bsr     prompt
01:000C228A 41F90007FC5A    	   968:          lea.l   upc,a0
01:000C2290 2081            	   969:          move.l  d1,(a0)
01:000C2292 6000E0CE        	   970:          bra     mwarm
                            	   971: *
                            	   972: *******************************
                            	   973: *     Trace user counter.     *
                            	   974: *******************************
                            	   975: *
01:000C2296 0D              	   976: trs     dc.b    $d,'Trace program from ',0,0
01:000C2297 5472616365207072
01:000C229F 6F6772616D206672
01:000C22A7 6F6D20
01:000C22AA 00
01:000C22AB 00
01:000C22AC 41FAFFE8        	   977: tr      lea.l   trs(pc),a0
01:000C22B0 6100E13A        	   978:         bsr     prompt
01:000C22B4 23C10007FC5A    	   979:         move.l  d1,upc
                            	   980: *
01:000C22BA 08F900070007FC58	   981:         bset    #7,usr            Set trace bit in saved status reg.
01:000C22C2 6000FD92        	   982:         bra     go1
                            	   983: *
                            	   984: *******************************
                            	   985: * Continue after breakpoint.  *
                            	   986: *******************************
                            	   987: *
01:000C22C6 0D              	   988: cps dc.b $d,'Continue after breakpoint.',0
01:000C22C7 436F6E74696E7565
01:000C22CF 2061667465722062
01:000C22D7 7265616B706F696E
01:000C22DF 742E
01:000C22E1 00
01:000C22E2 41FAFFE2        	   989: cp lea.l cps(pc),a0
01:000C22E6 6100E0F0        	   990:  bsr pdata1
01:000C22EA 083900050007FC58	   991:  btst #5,usr
01:000C22F2 6626            	   992:  bne.s goerr
01:000C22F4 08F900070007FC58	   993:  bset #7,usr
01:000C22FC 50F90007FC7C    	   994:  st bflg
01:000C2302 6000FD64        	   995:  bra   cgo
                            	   996: *
01:000C2306 5375706572766973	   997: goerrs dc.b 'Supervisor bit set.',0
01:000C230E 6F72206269742073
01:000C2316 65742E
01:000C2319 00
01:000C231A 41FAFFEA        	   998: goerr lea.l goerrs(pc),a0
01:000C231E 6100E0C8        	   999:  bsr pstring
01:000C2322 6000E03E        	  1000:  bra mwarm
                            	  1001: *
                            	  1002: *******************************
                            	  1003: *    Display breakpoints.     *
                            	  1004: *******************************
                            	  1005: *
01:000C2326 0D              	  1006: brs     dc.b    $d,'Display breakpoints.',0
01:000C2327 446973706C617920
01:000C232F 627265616B706F69
01:000C2337 6E74732E
01:000C233B 00
01:000C233C 41FAFFE8        	  1007: br      lea.l   brs(pc),a0
01:000C2340 6100E096        	  1008:         bsr     pdata1
01:000C2344 6100E086        	  1009:         bsr     pcrlf
01:000C2348 43F90007FC5E    	  1010: brk     lea.l   brkp,a1      Point to breakpoint table.
01:000C234E 7200            	  1011:         moveq   #0,d1        Counter.
01:000C2350 1001            	  1012: brk0    move.b  d1,d0        Breakpoint number into d0.
01:000C2352 6100E11E        	  1013:         bsr     outh         Print breakpoint number.
01:000C2356 6100E136        	  1014:         bsr     outs
01:000C235A 2011            	  1015:         move.l  (a1),d0      Extract breakpoint location.
01:000C235C 6100E102        	  1016:         bsr     out8h
01:000C2360 6100E06A        	  1017:         bsr     pcrlf
01:000C2364 D3FC00000006    	  1018: brk01   add.l   #6,a1        Increment pointer.
01:000C236A D23C0001        	  1019:         add.b   #1,d1        Increment offset.
01:000C236E B23C0004        	  1020:         cmp.b   #4,d1        Check if done.
01:000C2372 6FDC            	  1021:         ble.s   brk0         Loop until done.
01:000C2374 6000DFEC        	  1022:         bra     mwarm
                            	  1023: *
                            	  1024: *******************************
                            	  1025: *      Define breakpoint.     *
                            	  1026: *******************************
                            	  1027: *
01:000C2378 0D              	  1028: dbs     dc.b    $d,'Define breakpoint number ',0,0
01:000C2379 446566696E652062
01:000C2381 7265616B706F696E
01:000C2389 74206E756D626572
01:000C2391 20
01:000C2392 00
01:000C2393 00
01:000C2394 496E76616C696420	  1029: bre     dc.b    'Invalid breakpoint',7,0
01:000C239C 627265616B706F69
01:000C23A4 6E74
01:000C23A6 07
01:000C23A7 00
01:000C23A8 41FAFFCE        	  1030: db      lea.l   dbs(pc),a0
01:000C23AC 6100E03E        	  1031:         bsr     prompt
01:000C23B0 4A81            	  1032:         tst.l   d1           Check within bounds.
01:000C23B2 6D22            	  1033:         blt.s   brke         Too small.
01:000C23B4 B2BC00000004    	  1034:         cmp.l   #4,d1        Check other bound.
01:000C23BA 6E1A            	  1035:         bgt.s   brke         Too big
                            	  1036: *
01:000C23BC 43F90007FC5E    	  1037:         lea.l   brkp,a1      point to table.
01:000C23C2 C3FC0006        	  1038:         muls    #6,d1        Offset in table.
01:000C23C6 D3C1            	  1039:         add.l   d1,a1        Point to slot.
                            	  1040: *
01:000C23C8 41FAFA99        	  1041:         lea.l   values(pc),a0
01:000C23CC 6100E01E        	  1042:         bsr     prompt
01:000C23D0 2281            	  1043:         move.l  d1,(a1)      Place address in slot.
01:000C23D2 6000DF8E        	  1044:         bra     mwarm
                            	  1045: *
01:000C23D6 41FAFFBC        	  1046: brke    lea.l   bre(pc),a0
01:000C23DA 6100E00C        	  1047:         bsr     pstring
01:000C23DE 6000DF82        	  1048:         bra     mwarm
                            	  1049: *
                            	  1050: *******************************
                            	  1051: *       Set input port.       *
                            	  1052: *******************************
                            	  1053: *
01:000C23E2 0D              	  1054: sis      dc.b    $d,'Set input port to ',0
01:000C23E3 53657420696E7075
01:000C23EB 7420706F72742074
01:000C23F3 6F20
01:000C23F5 00
01:000C23F6 41FAFFEA        	  1055: si       lea.l   sis(pc),a0
01:000C23FA 6100DFF0        	  1056:          bsr     prompt
01:000C23FE E501            	  1057:          asl.b   #2,d1
01:000C2400 13C10007FC7D    	  1058:          move.b  d1,iport
01:000C2406 6000DF5A        	  1059:          bra     mwarm
                            	  1060: *
                            	  1061: *******************************
                            	  1062: *       Set output port.      *
                            	  1063: *******************************
                            	  1064: *
01:000C240A 0D              	  1065: sos      dc.b    $d,'Set output port to ',0,0
01:000C240B 536574206F757470
01:000C2413 757420706F727420
01:000C241B 746F20
01:000C241E 00
01:000C241F 00
01:000C2420 41FAFFE8        	  1066: so       lea.l   sos(pc),a0
01:000C2424 6100DFC6        	  1067:          bsr     prompt
01:000C2428 E501            	  1068:          asl.b   #2,d1
01:000C242A 13C10007FC7E    	  1069:          move.b  d1,oport
01:000C2430 6000DF30        	  1070:          bra     mwarm
                            	  1071: *
                            	  1072: *******************************
                            	  1073: *  Random read floppy test.   *
                            	  1074: *******************************
                            	  1075: *
01:000C2434 0D              	  1076: tds      dc.b    $d,'Random read test on drive ',0
01:000C2435 52616E646F6D2072
01:000C243D 6561642074657374
01:000C2445 206F6E2064726976
01:000C244D 6520
01:000C244F 00
01:000C2450 41FAFFE2        	  1077: td       lea.l   tds(pc),a0
01:000C2454 6100DF96        	  1078:          bsr     prompt
01:000C2458 41F90007FC9E    	  1079:          lea.l   sys_dcb,a0
01:000C245E 217C000280000006	  1080:          move.l  #rbuff,6(a0)
01:000C2466 1081            	  1081:          move.b  d1,(a0)
01:000C2468 6100E592        	  1082:  bsr select
01:000C246C 41FA0061        	  1083:          lea.l   hks(pc),a0
01:000C2470 6100DF66        	  1084:          bsr     pdata1
01:000C2474 41F90007FC9E    	  1085:          lea.l   sys_dcb,a0
01:000C247A 6100E5D2        	  1086:          bsr     restore
01:000C247E 41F90007FC9E    	  1087: tdl      lea.l   sys_dcb,a0
01:000C2484 203C00000050    	  1088:          move.l  #80,d0
01:000C248A 6100E01A        	  1089:          bsr     random
01:000C248E 11400003        	  1090:          move.b  d0,3(a0)
01:000C2492 700F            	  1091:          moveq   #15,d0
01:000C2494 6100E010        	  1092:          bsr     random
01:000C2498 11400005        	  1093:          move.b  d0,5(a0)
01:000C249C 6100E5BC        	  1094:          bsr     read
01:000C24A0 6100E7A2        	  1095:          bsr     status
01:000C24A4 6700FFD8        	  1096:          beq     tdl
01:000C24A8 41F90007FC9E    	  1097:          lea.l   sys_dcb,a0
01:000C24AE 6100E59E        	  1098:          bsr     restore
01:000C24B2 6000DEAE        	  1099:          bra     mwarm
                            	  1100: *
                            	  1101: 
                            	  1102: *******************************
                            	  1103: *    Test floppy stepping.    *
                            	  1104: *******************************
                            	  1105: *
01:000C24B6 0D              	  1106: tss      dc.b    $d,'Test stepping on drive ',0
01:000C24B7 5465737420737465
01:000C24BF 7070696E67206F6E
01:000C24C7 20647269766520
01:000C24CE 00
01:000C24CF 2048697420616E79	  1107: hks      dc.b    ' Hit any key to stop......',0
01:000C24D7 206B657920746F20
01:000C24DF 73746F702E2E2E2E
01:000C24E7 2E2E
01:000C24E9 00
01:000C24EA 41FAFFCA        	  1108: ts       lea.l   tss(pc),a0
01:000C24EE 6100DEFC        	  1109:          bsr     prompt
01:000C24F2 41F90007FC9E    	  1110:          lea.l   sys_dcb,a0
01:000C24F8 1081            	  1111:          move.b  d1,(a0)
01:000C24FA 6100E500        	  1112:          bsr     select
01:000C24FE 41FAFFCF        	  1113:          lea.l   hks(pc),a0
01:000C2502 6100DED4        	  1114:          bsr     pdata1
01:000C2506 41F90007FC9E    	  1115:          lea.l   sys_dcb,a0
01:000C250C 6100E540        	  1116: tsl      bsr     restore
01:000C2510 143C0050        	  1117:          move.b  #80,d2
01:000C2514 6100E53E        	  1118:          bsr     seek
01:000C2518 6100E72A        	  1119:          bsr     status
01:000C251C 67EE            	  1120:          beq.s   tsl
01:000C251E 6100E52E        	  1121:          bsr     restore
01:000C2522 6000DE3E        	  1122:          bra     mwarm
                            	  1123: *
                            	  1124: *******************************
                            	  1125: *     Format floppy disc.     *
                            	  1126: *******************************
                            	  1127: *
                            	  1128: maxtrk equ 50 (00-32)
                            	  1129: maxsec equ 10 (1-A)
                            	  1130: *
                            	  1131: trk equ ftrack
                            	  1132: sec equ ftrack+1
                            	  1133: buff equ $400
                            	  1134: *
01:000C2526 0D              	  1135: dfs      dc.b    $d,'Format disc to SK*DOS 68k standard on drive ',0
01:000C2527 466F726D61742064
01:000C252F 69736320746F2053
01:000C2537 4B2A444F53203638
01:000C253F 6B207374616E6461
01:000C2547 7264206F6E206472
01:000C254F 69766520
01:000C2553 00
01:000C2554 2020204172652079	  1136: ays      dc.b    '   Are you sure(y-n)? ',0
01:000C255C 6F75207375726528
01:000C2564 792D6E293F20
01:000C256A 00
01:000C256B 0D              	  1137: dft      dc.b    $d,'formatting track ',0
01:000C256C 666F726D61747469
01:000C2574 6E6720747261636B
01:000C257C 20
01:000C257D 00
01:000C257E 462D52414D646973	  1138: dfn      dc.b    'F-RAMdisk   '
01:000C2586 6B202020
                            	  1139: *
01:000C258A 41F90007FCA8    	  1140: df       lea.l   time_st,a0   download time string.
01:000C2590 4EB9000C0568    	  1141:          jsr     getrtc
01:000C2596 41FAFF8E        	  1142:          lea.l   dfs(pc),a0
01:000C259A 6100DE50        	  1143:          bsr     prompt get drive number
01:000C259E 43F90007FC9E    	  1144:          lea.l   sys_dcb,a1
01:000C25A4 1281            	  1145:          move.b  d1,(a1)
01:000C25A6 41FAFFAC        	  1146:          lea.l   ays(pc),a0 sure?
01:000C25AA 6100DE2C        	  1147:          bsr     pdata1
01:000C25AE 6100E6EC        	  1148:          bsr     inch
01:000C25B2 6100DE9A        	  1149:          bsr     locase
01:000C25B6 B03C0079        	  1150:          cmp.b   #'y',d0
01:000C25BA 6600DDA6        	  1151:          bne     mwarm
01:000C25BE 4EB9000C03CC    	  1152:          jsr     pcrlf
                            	  1153: *
01:000C25C4 41F90007FC9E    	  1154:          lea.l   sys_dcb,a0
01:000C25CA 4EB9000C09FC    	  1155:          jsr     select
                            	  1156: *
01:000C25D0 217C000004000006	  1157:          move.l  #buff,6(a0)
                            	  1158: *
01:000C25D8 227C00000400    	  1159:          move.l  #buff,a1 clear buffer
01:000C25DE 203C0000003F    	  1160:          move.l  #63,d0 256 bytes
01:000C25E4 22FC00000000    	  1161: clrl     move.l  #0,(a1)+
01:000C25EA 51C8FFF8        	  1162:          dbf     d0,clrl
                            	  1163: *
01:000C25EE 227C00000400    	  1164:          move.l  #buff,a1
01:000C25F4 13FC00000007FC86	  1165:          move.b  #0,trk initial track/sector
01:000C25FC 13FC00010007FC87	  1166:          move.b  #1,sec
                            	  1167: *
                            	  1168: * main formatting loop
01:000C2604 41FAFF65        	  1169: fmt1     lea.l   dft(pc),a0 print the current track number
01:000C2608 6100DDCE        	  1170:          bsr     pdata1
01:000C260C 10390007FC86    	  1171:          move.b  trk,d0
01:000C2612 4EB9000C046C    	  1172:          jsr     out2h
01:000C2618 41F90007FC9E    	  1173:          lea.l   sys_dcb,a0
                            	  1174: *         
01:000C261E 12B90007FC86    	  1175:          move.b  trk,(a1) set forward link
01:000C2624 13790007FC870001	  1176:          move.b  sec,1(a1)
01:000C262C 062900010001    	  1177:          add.b   #1,1(a1)
01:000C2632 0C29000B0001    	  1178:          cmp.b   #maxsec+1,1(a1)
01:000C2638 6600000C        	  1179:          bne     fmt2
01:000C263C 137C00010001    	  1180:          move.b  #1,1(a1) point to 1st sector on the next track
01:000C2642 06110001        	  1181:          add.b   #1,(a1)
                            	  1182: *
01:000C2646 11790007FC860003	  1183: fmt2     move.b  trk,3(a0) track
01:000C264E 11790007FC870005	  1184:          move.b  sec,5(a0) sec
01:000C2656 323C000A        	  1185:          move.w  #10,d1
01:000C265A 4EB9000C03F2    	  1186:          jsr     delay
01:000C2660 4EB9000C0A60    	  1187:          jsr     write buffer to disk
                            	  1188: *
01:000C2666 063900010007FC87	  1189:          add.b   #1,sec
01:000C266E 0C39000B0007FC87	  1190:          cmp.b   #maxsec+1,sec
01:000C2676 6600FF8C        	  1191:          bne     fmt1
01:000C267A 13FC00010007FC87	  1192:          move.b  #1,sec
01:000C2682 063900010007FC86	  1193:          add.b   #1,trk
01:000C268A 0C3900330007FC86	  1194:          cmp.b   #maxtrk+1,trk
01:000C2692 6600FF70        	  1195:          bne     fmt1
                            	  1196: *
                            	  1197: * clear links in the last directory sector and end of free chain
01:000C2696 12BC0000        	  1198:          move.b  #0,(a1)
01:000C269A 137C00000001    	  1199:          move.b  #0,1(a1)
01:000C26A0 117C00000003    	  1200:          move.b  #0,3(a0)
01:000C26A6 117C000A0005    	  1201:          move.b  #maxsec,5(a0) 
01:000C26AC 4EB9000C0A60    	  1202:          jsr     write        
01:000C26B2 323C000A        	  1203:          move.w  #10,d1
01:000C26B6 4EB9000C03F2    	  1204:          jsr     delay
01:000C26BC 117C00320003    	  1205:          move.b  #maxtrk,3(a0) 
01:000C26C2 117C000A0005    	  1206:          move.b  #maxsec,5(a0) 
01:000C26C8 323C000A        	  1207:          move.w  #10,d1
01:000C26CC 4EB9000C03F2    	  1208:          jsr     delay
01:000C26D2 4EB9000C0A60    	  1209:          jsr     write 
                            	  1210: *
                            	  1211: * set up SIS
                            	  1212: * Bytes 16-26 Disk name (and extension)
                            	  1213: * Bytes 27-28 Disk Number 
                            	  1214: * Bytes 29-30 Track and sector number of first free sector
                            	  1215: * Bytes 31-32 Track and sector number of last free sector
                            	  1216: * Bytes 33-34 Number of free sectors
                            	  1217: * Bytes 35-37 Month, day, and year of disk creation
                            	  1218: * Byte 38     Number of logical tracks on the disk-l
                            	  1219: * Byte 39     Number of logical sectors per track
                            	  1220: *
01:000C26D8 12BC0000        	  1221:          move.b  #0,(a1) clear forward link in SIS
01:000C26DC 137C00000001    	  1222:          move.b  #0,1(a1)
                            	  1223: *
01:000C26E2 2379000C257E0010	  1224:          move.l  dfn,16(a1)  volume name
01:000C26EA 2379000C25820014	  1225:          move.l  dfn+4,20(a1)
01:000C26F2 2379000C25860018	  1226:          move.l  dfn+8,24(a1)
                            	  1227: *                  
01:000C26FA 137C0000001B    	  1228:          move.b  #0,27(a1) disk number
01:000C2700 137C0001001C    	  1229:          move.b  #1,28(a1)
                            	  1230: *
01:000C2706 137C0001001D    	  1231:          move.b  #1,29(a1) Track and sector number of first free sector
01:000C270C 137C0001001E    	  1232:          move.b  #1,30(a1)
                            	  1233: *         
01:000C2712 137C0032001F    	  1234:          move.b  #maxtrk,31(a1) Track and sector number of last free sector
01:000C2718 137C000A0020    	  1235:          move.b  #maxsec,32(a1)
                            	  1236: *
01:000C271E 103C0032        	  1237:          move.b  #maxtrk,d0       Number of free sectors
01:000C2722 C0FC000A        	  1238:          mulu.w  #maxsec,d0
01:000C2726 13400022        	  1239:          move.b  d0,34(a1)
01:000C272A E088            	  1240:          lsr.l   #8,d0
01:000C272C 13400021        	  1241:          move.b  d0,33(a1)
                            	  1242: *
01:000C2730 13790007FCAD0023	  1243:          move.b  month,35(a1)    Month, day, and year of disk creation
01:000C2738 13790007FCAE0024	  1244:          move.b  date,36(a1)
01:000C2740 13790007FCAC0025	  1245:          move.b  year,37(a1)
                            	  1246: *
01:000C2748 137C00310026    	  1247:          move.b  #maxtrk-1,38(a1)
01:000C274E 137C000A0027    	  1248:          move.b  #maxsec,39(a1)
                            	  1249: *
01:000C2754 117C00000003    	  1250:          move.b #0,3(a0) track
01:000C275A 117C00030005    	  1251:          move.b #3,5(a0) sec
01:000C2760 323C000A        	  1252:          move.w  #10,d1
01:000C2764 4EB9000C03F2    	  1253:          jsr     delay
01:000C276A 4EB9000C0A60    	  1254:          jsr write  buffer to disk
                            	  1255: *
01:000C2770 4EB9000C03CC    	  1256:          jsr pcrlf
01:000C2776 4EF9000C0362    	  1257:          jmp mwarm
                            	  1258: *
                            	  1259: *******************************
                            	  1260: *      Read disc sector.      *
                            	  1261: *******************************
                            	  1262: *
01:000C277C 0D              	  1263: rss      dc.b    $d,'Read',0
01:000C277D 52656164
01:000C2781 00
01:000C2782 5468652064697363	  1264: wps      dc.b    'The disc is write protected!',0
01:000C278A 2069732077726974
01:000C2792 652070726F746563
01:000C279A 74656421
01:000C279E 00
01:000C279F 536563746F72206E	  1265: snfs     dc.b    'Sector not found!',0
01:000C27A7 6F7420666F756E64
01:000C27AF 21
01:000C27B0 00
01:000C27B1 435243206572726F	  1266: crcs     dc.b    'CRC error!',0
01:000C27B9 7221
01:000C27BB 00
01:000C27BC 44617461206C6F73	  1267: dls      dc.b    'Data lost or overrun!',0
01:000C27C4 74206F72206F7665
01:000C27CC 7272756E21
01:000C27D1 00
01:000C27D2 41FAFFA8        	  1268: rs       lea.l   rss(pc),a0
01:000C27D6 6100DC00        	  1269:          bsr     pdata1
01:000C27DA 6100006E        	  1270:          bsr     fdcb
01:000C27DE 4EB9000C0A5A    	  1271:          jsr     read
01:000C27E4 6000DB7C        	  1272:          bra     mwarm
                            	  1273: *
01:000C27E8 20736563746F7220	  1274: fds      dc.b    ' sector on drive ',0
01:000C27F0 6F6E206472697665
01:000C27F8 20
01:000C27F9 00
01:000C27FA 20747261636B20  	  1275: trks     dc.b    ' track ',0
01:000C2801 00
01:000C2802 20736563746F7220	  1276: ssecs     dc.b    ' sector ',0
01:000C280A 00
01:000C280B 2020646174612061	  1277: das      dc.b    '  data address ',0,0
01:000C2813 64647265737320
01:000C281A 00
01:000C281B 00
01:000C281C 4572726F72206F6E	  1278: ers      dc.b    'Error on drive ',0
01:000C2824 20647269766520
01:000C282B 00
                            	  1279: *
                            	  1280: *******************************
                            	  1281: *      Write disc sector.     *
                            	  1282: *******************************
                            	  1283: *
01:000C282C 0D              	  1284: wss      dc.b    $d,'Write',0,0
01:000C282D 5772697465
01:000C2832 00
01:000C2833 00
01:000C2834 41FAFFF6        	  1285: ws       lea.l   wss(pc),a0
01:000C2838 6100DB9E        	  1286:          bsr     pdata1
01:000C283C 6100000C        	  1287:          bsr     fdcb
01:000C2840 4EB9000C0A60    	  1288:          jsr     write
01:000C2846 6000DB1A        	  1289:          bra     mwarm
                            	  1290: *
01:000C284A 43F90007FC9E    	  1291: fdcb     lea.l   sys_dcb,a1
01:000C2850 41FAFF96        	  1292:          lea.l   fds(pc),a0
01:000C2854 6100DB96        	  1293:          bsr     prompt
01:000C2858 1281            	  1294:          move.b  d1,(a1)
01:000C285A 41FAFF9E        	  1295:          lea.l   trks(pc),a0
01:000C285E 6100DB8C        	  1296:          bsr     prompt
01:000C2862 13410003        	  1297:          move.b  d1,3(a1)
01:000C2866 41FAFF9A        	  1298:          lea.l   ssecs(pc),a0
01:000C286A 6100DB80        	  1299:          bsr     prompt
01:000C286E 13410005        	  1300:          move.b  d1,5(a1)
01:000C2872 41FAFF97        	  1301:          lea.l   das(pc),a0
01:000C2876 6100DB74        	  1302:          bsr     prompt
01:000C287A 23410006        	  1303:          move.l  d1,6(a1)
01:000C287E 2049            	  1304:          move.l  a1,a0
01:000C2880 6100E17A        	  1305:          bsr     select
01:000C2884 4E75            	  1306:          rts
                            	  1307: *
                            	  1308: ***********************************
                            	  1309: * Inspect disk contents (sectors) *
                            	  1310: ***********************************
01:000C2886 0C              	  1311: ids      dc.b    $c,'Inspect sectors on drive ',0
01:000C2887 496E737065637420
01:000C288F 736563746F727320
01:000C2897 6F6E206472697665
01:000C289F 20
01:000C28A0 00
01:000C28A1 0A              	  1312: id1      dc.b    $a,$d,'SIS found, max track = ',0
01:000C28A2 0D
01:000C28A3 53495320666F756E
01:000C28AB 642C206D61782074
01:000C28B3 7261636B203D20
01:000C28BA 00
01:000C28BB 2020736563746F72	  1313: ids2     dc.b    '  sectors/track = ',0
01:000C28C3 732F747261636B20
01:000C28CB 3D20
01:000C28CD 00
                            	  1314: *
01:000C28CE 43F90007FC9E    	  1315: id       lea.l   sys_dcb,a1 point to system FCB
01:000C28D4 41FAFFB0        	  1316:          lea     ids(pc),a0
01:000C28D8 6100DB12        	  1317:          bsr     prompt
01:000C28DC 1281            	  1318:          move.b  d1,(a1) drive
01:000C28DE 2049            	  1319:          move.l  a1,a0
01:000C28E0 6100E11A        	  1320:          bsr select
                            	  1321: *
01:000C28E4 137C00000003    	  1322:          move.b  #0,3(a1) pick up SIS at trk 00 sec 03
01:000C28EA 137C00030005    	  1323:          move.b  #3,5(a1) 
01:000C28F0 237C000004000006	  1324:          move.l  #$400,6(a1)
01:000C28F8 2049            	  1325:          move.l  a1,a0
01:000C28FA 6100E15E        	  1326:          bsr     read
                            	  1327: *
01:000C28FE 227C00000400    	  1328:           move.l #$400,a1
                            	  1329: *       
01:000C2904 6100DAC6        	  1330:           bsr    PCRLF
01:000C2908 41FAF37F        	  1331:           lea    hds1(pc),a0
01:000C290C 6100DADA        	  1332:           bsr    PSTRING
01:000C2910 760F            	  1333:           moveq  #15,d3
01:000C2912 4EB9000C1CFA    	  1334: diloop    jsr    loop
01:000C2918 51CBFFF8        	  1335:           dbf    d3,diloop
                            	  1336: *          
01:000C291C 4EF9000C0362    	  1337:           jmp    mwarm
                            	  1338: *

Source: "monk.txt"
                            	   282: *
                            	   283:  include ossubs.txt

Source: "ossubs.txt"
                            	     1: ***********************************************
                            	     2: * OS interface routines (BIOS) for SK*DOS 68K *
                            	     3: ***********************************************
                            	     4: *
                            	     5: * EXTERNAL REFERENCES - MOST OF THESE ARE REFERENCED TO 'DOSORG',
                            	     6: * WHICH IS THE BEGINNING POINT OF SK*DOS.
                            	     7: * FOR EXAMPLE, A TYPICAL SK*DOS BEGINS AT $1000, SO DOSORG IS
                            	     8: * SET TO $1000 BELOW. MAKE SURE TO MODIFY DOSORG AS NECESSARY.
                            	     9: 
                            	    10: ****** CAUTION - THE NEXT ADDRESSES MAY CHANGE!!!! ****
                            	    11: LVL5IA   EQU      $2F4A               LEVEL 5 VECTOR
                            	    12: PUTCD5   EQU      $4AB0               PUTCHR INTERNAL
                            	    13: *******************************************************
                            	    14: 
                            	    15: DOSORG   EQU      $1000               BEGINNING LOCATION OF SK*DOS
                            	    16: WINTAB   EQU      DOSORG+$200         WINCHESTER DATA TABLE
                            	    17: VRBLES   EQU      DOSORG+$400         BEGINNING OF SK*DOS VARIABLE AREA
                            	    18: GETDAT   EQU      DOSORG+$00C         VECTOR TO GET THE DATE
                            	    19: INTIME   EQU      DOSORG+$012         VECTOR TO GET THE TIME
                            	    20: CDAY     EQU      VRBLES+751          Current date - day
                            	    21: CMONTH   EQU      VRBLES+750          Current date - month
                            	    22: CYEAR    EQU      VRBLES+752          Current date - year
                            	    23: BREAK    EQU      VRBLES+762          BREAK ADDRESS
                            	    24: DICOLD   EQU      DOSORG+$100         DISK COLD-START INIT
                            	    25: DIWARM   EQU      DOSORG+$106         DISK WARM-START INIT
                            	    26: DIREAD   EQU      DOSORG+$10C         DISK READ
                            	    27: DIWRIT   EQU      DOSORG+$112         DISK WRITE
                            	    28: DICHEK   EQU      DOSORG+$118         DISK READY CHECK
                            	    29: DIMOFF   EQU      DOSORG+$11E         TURN OFF DISK MOTOR
                            	    30: DIREST   EQU      DOSORG+$124         PRIMARY DISK RESTORE
                            	    31: DISEEK   EQU      DOSORG+$12A         PRIMARY DISK SEEK
                            	    32: ERRTYP   EQU      VRBLES+782          ERROR TYPE
                            	    33: INDOS    EQU      VRBLES+794          0=OUTSIDE DOS, ELSE IN DOS
                            	    34: INECHO   EQU      VRBLES+800          INPUT ECHO FLAG
                            	    35: DEVOUT   EQU      VRBLES+3275         OUTPUT DEVICE NUMBER
                            	    36: STPRAT   EQU      DOSORG+$130         STEPRATES FOR THREE DRIVES
                            	    37: VERFLG   EQU      DOSORG+$13A         VERIFY FLAG
                            	    38: DRUSED   EQU      DOSORG+$13C         DRIVE USED TABLE
                            	    39: NRETRY   EQU      DOSORG+$150         FLOPPY RETRY COUNTER
                            	    40: FOTHER   EQU      DOSORG+$151         =0 IF SK*DOS, ELSE # SECT/SIDE
                            	    41: NUMBHD   EQU      DOSORG+$152         NUMBER OF HARD DRIVES
                            	    42: SINITV   EQU      DOSORG+$180         SERIAL PORT INIT
                            	    43: STATVE   EQU      DOSORG+$186         SERIAL PORT STATUS CHECK
                            	    44: STATV1   EQU      DOSORG+$1D4         INPUT STATUS CHECK W/O TYPEAHEAD
                            	    45: OUTCHV   EQU      DOSORG+$18C         OUTPUT TO PORT
                            	    46: OFFINI   EQU      DOSORG+$018         INITIAL OFFSET VALUE
                            	    47: INCHV    EQU      DOSORG+$192         INPUT FROM KBD WITH ECHO
                            	    48: KINPUV   EQU      DOSORG+$198         INPUT W/O ECHO
                            	    49: KINPV1   EQU      DOSORG+$1DA         INPUT W/O ECHO  W/O TYPEAHEAD
                            	    50: ICNTRL   EQU      DOSORG+$1A4         INPUT CONTROL
                            	    51: MONITV   EQU      DOSORG+$1AA         RETURN TO MONITOR
                            	    52: RESETV   EQU      DOSORG+$1B0         RESET MONITOR/SYSTEM
                            	    53: TIMINI   EQU      DOSORG+$1B6         TIMER INITIALIZE
                            	    54: TIMOFF   EQU      DOSORG+$1BC         TIMER OFF
                            	    55: TIMON    EQU      DOSORG+$1C2         TIMER ON
                            	    56: OSTATV   EQU      DOSORG+$1C8         OUTPUT STATUS VECTOR
                            	    57: GETDTV   EQU      DOSORG+$1CE         GET DATE AND TIME VECTOR
                            	    58: KILLV1   EQU      DOSORG+$1E0         FLUSH TYPEAHEAD BUFFER
                            	    59: PSTRNV   EQU      DOSORG+$B6          PRINT STRING VECTOR
                            	    60: ASKDAV   EQU      DOSORG+$B0          ASK FOR DATE VECTOR
                            	    61: 
                            	    62: * SK*DOS FCB EQUATES
                            	    63: 
                            	    64: FCBPHY   EQU      72        Physical drive number
                            	    65: FCBDAT   EQU      96        Beginning of data buffer (256 bytes)
                            	    66: FCBCSE   EQU      35        Current sector in buffer
                            	    67: FCBCTR   EQU      34        Current track in buffer
                            	    68: FCBDRV   EQU      3         Logical Drive number
                            	    69: FCBERR   EQU      1         Error code
                            	    70: *
                            	    71: MEMINI    equ $101C         end of availible system RAM
                            	    72: ***************************************
                            	    73: **** --- PART 1 - DISK DRIVERS --- ****
                            	    74: ***************************************
                            	    75: 
                            	    76: * CAUTION - THESE DRIVERS MUST PRESERVE ALL REGISTERS!!!
                            	    77: 
                            	    78: *********************************************
                            	    79: * READ ENTRY POINT FOR PRIMARY DISK DRIVERS
                            	    80: *********************************************
                            	    81: 
                            	    82: * THIS IS ESSENTIALLY SREAD OPERATION
                            	    83: 
                            	    84: * ENTER: A4 POINTS TO FCB WHICH NEEDS DATA.
                            	    85: *        FCBDRV(A4) HAS DRIVE NUMBER
                            	    86: *        FCBCTR(A4) HAS TRACK NUMBER
                            	    87: *        FCBCSE(A4) HAS SECTOR NUMBER
                            	    88: 
                            	    89: * EXIT:  ZERO IF NO ERROR;
                            	    90: *        IF ERROR: NON-ZERO,
                            	    91: *                  FCBERR(A4) AND ERRTYP BOTH HAVE ERROR CODE
                            	    92: *        ALL REGISTERS RESTORED!
                            	    93: 
01:000C2922 48E7F0F8        	    94: PRIMRD    movem.l d0-d3/a0-a4,-(A7)
                            	    95: 
01:000C2926 41F90007FC9E    	    96:           lea.l  sys_dcb,a0        build MONK FCB
01:000C292C 10AC0003        	    97:           move.b FCBDRV(A4),(a0)   drive
01:000C2930 116C00220003    	    98:           move.b FCBCTR(a4),3(a0)  track
01:000C2936 116C00230005    	    99:           move.b FCBCSE(a4),5(a0)  sector
01:000C293C 43EC0060        	   100:           lea.l  FCBDAT(a4),a1     buffer
01:000C2940 21490006        	   101:           move.l a1,6(a0)
                            	   102: *
01:000C2944 4EB9000C09FC    	   103:           jsr select
01:000C294A 4EB9000C0A5A    	   104:           jsr read
                            	   105: *
01:000C2950 4CDF1F0F        	   106:           movem.l (A7)+,d0-d3/a0-a4
01:000C2954 4E75            	   107:           RTS
                            	   108: *
                            	   109: *********************************************
                            	   110: * WRITE ENTRY POINT FOR PRIMARY DISK DRIVERS
                            	   111: *********************************************
                            	   112: 
                            	   113: * THIS IS ESSENTIALLY SWRITE OPERATION
                            	   114: 
                            	   115: * ENTER: A4 POINTS TO FCB WHICH NEEDS DATA.
                            	   116: *        FCBDRV(A4) HAS DRIVE NUMBER
                            	   117: *        FCBCTR(A4) HAS TRACK NUMBER
                            	   118: *        FCBCSE(A4) HAS SECTOR NUMBER
                            	   119: 
                            	   120: * EXIT:  ZERO IF NO ERROR;
                            	   121: *        IF ERROR: NON-ZERO,
                            	   122: *                  FCBERR(A4) AND ERRTYP BOTH HAVE ERROR CODE
                            	   123: *        ALL REGISTERS RESTORED!
                            	   124: 
01:000C2956 48E7F0F8        	   125: PRIMWR    movem.l d0-d3/a0-a4,-(A7)
                            	   126: 
01:000C295A 41F90007FC9E    	   127:           lea.l  sys_dcb,a0        build MONK FCB
01:000C2960 10AC0003        	   128:           move.b FCBDRV(A4),(a0)   drive
01:000C2964 116C00220003    	   129:           move.b FCBCTR(a4),3(a0)  track
01:000C296A 116C00230005    	   130:           move.b FCBCSE(a4),5(a0)  sector
01:000C2970 43EC0060        	   131:           lea.l  FCBDAT(a4),a1     buffer
01:000C2974 21490006        	   132:           move.l a1,6(a0)
                            	   133: *
01:000C2978 4EB9000C09FC    	   134:           jsr select
01:000C297E 4EB9000C0A60    	   135:           jsr write
                            	   136: *
01:000C2984 4CDF1F0F        	   137:           movem.l (A7)+,d0-d3/a0-a4
01:000C2988 4E75            	   138:           RTS
                            	   139: *
                            	   140: ******************************************
                            	   141: **** --- PART 2 - CONSOLE DRIVERS --- ****
                            	   142: ******************************************
                            	   143: 
                            	   144: * CONVENTIONS: D1-D5 AND A1-A5 MUST BE PRESERVED
                            	   145: *                  (EXCEPT WHEN D5 IS FOR INPUT)
                            	   146: *              OTHER REGISTERS ARE SCRATCH
                            	   147: 
                            	   148: 
                            	   149: * SERIAL INPUT PORT STATUS CHECK.
                            	   150: *
                            	   151: *    INPUT: NONE
                            	   152: *    OUTPUT: RETURN ZERO IF NO CHARACTER READY,
                            	   153: *                   NON-ZERO IF CHARACTER IS THERE
                            	   154: *    REGISTERS USED: NONE (MUST PRESERVE D5)
                            	   155: 
01:000C298A 4EF9000C0C44    	   156: STAT      jmp status             
                            	   157: 
                            	   158: * OUTPUT CHARACTER IN D5 TO TERMINAL
                            	   159: *
                            	   160: *    INPUT: D5 HOLDS CHARACTER TO OUTPUT
                            	   161: *    OUTPUT: NONE
                            	   162: *    REGISTERS USED: NONE (MUST PRESERVE D5)
                            	   163: 
01:000C2990 48E78000        	   164: OUTEEE      movem.l d0,-(A7)
01:000C2994 2005            	   165:             move.l d5,d0
01:000C2996 4EB9000C0C9E    	   166:             jsr outch
01:000C299C 4CDF0001        	   167:             movem.l (A7)+,d0
01:000C29A0 4E75            	   168:             rts
                            	   169: 
                            	   170: * INPUT CHARACTER INTO D5 AND ECHO IT
                            	   171: *
                            	   172: *    INPUT: NONE
                            	   173: *    OUTPUT: D5 HOLDS 7-BIT CHARACTER INPUT
                            	   174: *    REGISTERS USED: PRESERVED (EXCEPT D5 HOLDS CHAR)
                            	   175: 
01:000C29A2 48E78000        	   176: INEEE       movem.l d0,-(A7)
01:000C29A6 4EB9000C0C9C    	   177:             jsr inch
01:000C29AC 2A00            	   178:             move.l d0,d5
01:000C29AE 4CDF0001        	   179:             movem.l (A7)+,d0
01:000C29B2 4E75            	   180:             rts
                            	   181: 
                            	   182: * KEYBOARD INPUT INTO D5 WITHOUT ECHO
                            	   183: *
                            	   184: *    INPUT: NONE
                            	   185: *    OUTPUT: D5 HOLDS 8-BIT CHARACTER INPUT
                            	   186: *    REGISTERS USED: PRESERVED (EXCEPT D5 HOLDS CHAR)
                            	   187: 
01:000C29B4 48E78000        	   188: KINPUT      movem.l d0,-(A7)
01:000C29B8 4EB9000C0C74    	   189:             jsr inch1
01:000C29BE 2A00            	   190:             move.l d0,d5
01:000C29C0 4CDF0001        	   191:             movem.l (A7)+,d0
01:000C29C4 4E75            	   192:             rts
                            	   193: 
                            	   194: 
                            	   195: * RE-ENTER MONITOR WITHOUT RESET
                            	   196: *
                            	   197: *    INPUT: NONE
                            	   198: *    OUTPUT: NONE
                            	   199: *    REGISTERS USED: A5 AND A7; CHANGED, IRRELEVANT
                            	   200: 
01:000C29C6 4EF9000C0362    	   201: MONITX    jmp mwarm
                            	   202: 
                            	   203: * RESET MONITOR/SYSTEM AS IF RESET FROM SCRATCH
                            	   204: 
01:000C29CC 4EF9000C02FA    	   205: RESETX    jmp mcold
                            	   206: 
                            	   207: * TIMER ON, OFF, INIT
                            	   208: * THESE ROUTINES DO NOTHING NOW, ARE STRICTLY PREPARATION
                            	   209: * FOR FUTURE ENHANCEMENTS
                            	   210: *
                            	   211: *    INPUT: NONE
                            	   212: *    OUTPUT: NONE
                            	   213: *    REGISTERS USED: NONE
                            	   214: 
01:000C29D2 4E75            	   215: TIMRTS    RTS                      RTS DO NOTHING
                            	   216: 
                            	   217: *****************************************
                            	   218: *** --- PART 3 - GET DATE ROUTINE --- ***
                            	   219: *****************************************
                            	   220: 
                            	   221: * IF THE SYSTEM HAS A CLOCK/CALENDARY CHIP, THEN
                            	   222: * THIS ROUTINE WOULD GET THE DATE DURING BOOTING,
                            	   223: * AND PUT IT INTO THE MONTH, DAY, YEAR LOCATIONS.
                            	   224: * DO NOTHING OTHERWISE
                            	   225: * ALL REGISTERS MUST BE PRESERVED
                            	   226: 
01:000C29D4 13FC0002000F0003	   227: GDATE    move.b   #2,$F0003
01:000C29DC 1A39000F0001    	   228:          MOVE.B   $F0001,D5          MINUTES
01:000C29E2 BA3C0059        	   229:          CMP.B    #$59,D5            CHECK
01:000C29E6 62000090        	   230:          BHI      NOGOOD             CLOCK NOT SET IF >59 MIN
                            	   231: *
01:000C29EA 13FC0004000F0003	   232:          move.b   #4,$F0003
01:000C29F2 1A39000F0001    	   233:          MOVE.B   $F0001,D5          HOURS
01:000C29F8 BA3C0023        	   234:          CMP.B    #$23,D5            CHECK IT
01:000C29FC 6200007A        	   235:          BHI      NOGOOD             NG IF PAST 23 O'CLOCK
                            	   236: *
01:000C2A00 13FC0006000F0003	   237:          move.b   #6,$F0003
01:000C2A08 1A39000F0001    	   238:          MOVE.B   $F0001,D5          DAY OF WEEK
01:000C2A0E BA3C0007        	   239:          CMP.B    #7,D5              CHECK IT
01:000C2A12 62000064        	   240:          BHI      NOGOOD             NO 8-DAY WEEKS ALLOWED
                            	   241: *
01:000C2A16 13FC0007000F0003	   242:          move.b   #7,$F0003
01:000C2A1E 1A39000F0001    	   243:          MOVE.B   $F0001,D5         GET DAY OF MONTH
01:000C2A24 BA3C0031        	   244:          CMP.B    #$31,D5            CHECK IT
01:000C2A28 6200004E        	   245:          BHI      NOGOOD             MAX 31 DAYS A MONTH
01:000C2A2C 6100007E        	   246:          BSR      BCDBIN             CVT TO BINARY
01:000C2A30 13C5000016EF    	   247:          MOVE.B   D5,CDAY            GIVE IT TO SK*DOS
                            	   248: *
01:000C2A36 13FC0008000F0003	   249:          move.b   #8,$F0003
01:000C2A3E 1A39000F0001    	   250:          MOVE.B   $F0001,D5          GET MONTH
01:000C2A44 BA3C0012        	   251:          CMP.B    #$12,D5            CHECK IT
01:000C2A48 6200002E        	   252:          BHI      NOGOOD             MAX 12 MONTHS A YEAR
01:000C2A4C 6100005E        	   253:          BSR      BCDBIN             CVT TO BINARY
01:000C2A50 13C5000016EE    	   254:          MOVE.B   D5,CMONTH
                            	   255: *
01:000C2A56 13FC0009000F0003	   256:          move.b   #9,$F0003
01:000C2A5E 1A39000F0001    	   257:          MOVE.B   $F0001,D5         GET THE YEAR
01:000C2A64 BA3C0099        	   258:          CMP.B    #$99,D5
01:000C2A68 6200000E        	   259:          BHI      NOGOOD             ASSUME THIS CENTURY
01:000C2A6C 6100003E        	   260:          BSR      BCDBIN             CVT TO BINARY
01:000C2A70 13C5000016F0    	   261:          MOVE.B   D5,CYEAR           GIVE IT TO SK*DOS
                            	   262: *
01:000C2A76 4E75            	   263:          rts
                            	   264: 
                            	   265: * ON INVALID DATE, GET IT FROM KEYBOARD
                            	   266: 
01:000C2A78 49FA000E        	   267: NOGOOD   LEA      CLKMSG(PC),A4        SAY CLOCK IS NO GOOD
01:000C2A7C 4EB9000010B6    	   268:          JSR      PSTRNV               ASK FOR DATE
01:000C2A82 4EF9000010B0    	   269:          JMP      ASKDAV               GO USE REGULAR SK*DOS DATE ENTRY
01:000C2A88 0D              	   270: CLKMSG   DC.B     $D,$A
01:000C2A89 0A
01:000C2A8A 43414C454E444152	   271:          DC.B     "CALENDAR/CLOCK NOT PROPERLY SET -",4
01:000C2A92 2F434C4F434B204E
01:000C2A9A 4F542050524F5045
01:000C2AA2 524C592053455420
01:000C2AAA 2D
01:000C2AAB 04
                            	   272: *
                            	   273: * CONVERT D5.B FROM BCD TO BINARY - PRESERVE ALL, INCLUDING
                            	   274: * TOP THREE BYTES IN D5
                            	   275: 
01:000C2AAC 2F05            	   276: BCDBIN   MOVE.L   D5,-(A7)          PUT ON STACK
01:000C2AAE E80D            	   277:          LSR.B    #4,D5              TENS DIGIT RIGHT
01:000C2AB0 CA7C000F        	   278:          AND.W    #$F,D5             ZERO REST OF WORD
01:000C2AB4 CAFC000A        	   279:          MULU     #10,D5              TIMES TEN
01:000C2AB8 4845            	   280:          SWAP     D5                  SAVE IN LEFT HALF
01:000C2ABA 1A2F0003        	   281:          MOVE.B   3(A7),D5          GET ORIGINAL BCD NUMBER
01:000C2ABE CA3C000F        	   282:          AND.B    #$F,D5             UNITS DIGIT
01:000C2AC2 1F450003        	   283:          MOVE.B   D5,3(A7)          PUT ON STACK
01:000C2AC6 4845            	   284:          SWAP     D5                  TENS DIGIT AGAIN
01:000C2AC8 DA2F0003        	   285:          ADD.B    3(A7),D5           ADD BACK UNITS
01:000C2ACC 1F450003        	   286:          MOVE.B   D5,3(A7)
01:000C2AD0 2A1F            	   287:          MOVE.L   (A7)+,D5          FINALLY PULL AGAIN
01:000C2AD2 4E75            	   288:          RTS      AND RETURN
                            	   289: *
                            	   290: *****************************************
                            	   291: *** --- PART 4 - GET TIME ROUTINE --- ***
                            	   292: *****************************************
                            	   293: 
                            	   294: * IF THE SYSTEM HAS A CLOCK/CALENDARY CHIP, THEN
                            	   295: * THIS ROUTINE WOULD BE CALLED EACH TIME A FILE IS
                            	   296: * OPENED FOR WRITING, WOULD GET THE CURRENT TIME,
                            	   297: * AND PACK IT INTO A ONE-BYTE NUMBER IN D5.B.
                            	   298: * DO NOTHING OTHERWISE.
                            	   299: * ALL REGISTERS MUST BE PRESERVED
                            	   300: 
01:000C2AD4 13FC0002000F0003	   301: GTIME    move.b   #2,$F0003
01:000C2ADC 1A39000F0001    	   302:          MOVE.B   $F0001,D5          MINUTES
01:000C2AE2 6100FFC8        	   303:          BSR      BCDBIN             CVT MINUTE TO BINARY
01:000C2AE6 8AFC0006        	   304:          DIVU     #6,D5               DIVIDE MINUTES BY 6
01:000C2AEA 1E05            	   305:          MOVE.B   D5,D7             SAVE MINUTES/6 IN D7
                            	   306: *
01:000C2AEC 13FC0004000F0003	   307:          move.b   #4,$F0003
01:000C2AF4 1A39000F0001    	   308:          MOVE.B   $F0001,D5
01:000C2AFA 6100FFB0        	   309:          BSR      BCDBIN             GET HOURS
01:000C2AFE CAFC000A        	   310:          MULU     #10,D5              HOURS * 10
01:000C2B02 DA07            	   311:          ADD.B    D7,D5              HOURS*10 + MINUTES/6 IN D5
01:000C2B04 66000006        	   312:          BNE      QUIT               IF NOT 00
01:000C2B08 1A3C00F0        	   313:          MOVE.B   #$F0,D5           CHANGE 00 TO F0
01:000C2B0C 4E75            	   314: QUIT     RTS      RETURN
                            	   315: *
                            	   316: * IF TIME IS NG, RETURN 0
01:000C2B0E 2A3C00000000    	   317: TIMENG   MOVE.L   #0,D5
01:000C2B14 4E75            	   318:          RTS      AND THEN QUIT
                            	   319: *
                            	   320: *********************************
                            	   321: **** --- PART 5 - OFFSET --- ****
                            	   322: *********************************
                            	   323: 
                            	   324: *********************************
                            	   325: **** --- PART 6 - VECTORS --- ****
                            	   326: *********************************
                            	   327: 
                            	   328: * perform any necessary OS init
01:000C2B16 41F9000C2B3E    	   329: osinit    lea.l  os_jmptab,a0       overlay jump table entries
                            	   330: 
                            	   331: *                                    overlay system vars
01:000C2B1C 0C90FFFFFFFF    	   332: ojtlp     cmp.l   #$FFFFFFFF,(a0)
01:000C2B22 6700000E        	   333:           beq ojt1
                            	   334: *
01:000C2B26 2258            	   335:           move.l (a0)+,a1         pick up the address
01:000C2B28 32D8            	   336:           move.w (a0)+,(a1)+      move the jump instruction
01:000C2B2A 32D8            	   337:           move.w (a0)+,(a1)+
01:000C2B2C 32D8            	   338:           move.w (a0)+,(a1)+
01:000C2B2E 6000FFEC        	   339:           bra ojtlp     
                            	   340: *
01:000C2B32 23FC00037FFF0000	   341: ojt1      move.l  #$37FFF,MEMINI      fix memend
01:000C2B3A 101C
01:000C2B3C 4E75            	   342:           rts 
                            	   343: *
01:000C2B3E 0000110C        	   344: os_jmptab dc.l DIREAD
01:000C2B42 4EF9000C2922    	   345:           JMP PRIMRD               PRIMARY READ ROUTINE
                            	   346: *
01:000C2B48 00001112        	   347:           dc.l DIWRIT
01:000C2B4C 4EF9000C2956    	   348:           JMP PRIMWR               PRIMARY WRITE ROUTINE
                            	   349: *
01:000C2B52 00001186        	   350:           dc.l STATVE
01:000C2B56 4EF9000C298A    	   351:           JMP STAT                 CHECK KEYBOARD STATUS
                            	   352: *
01:000C2B5C 0000118C        	   353:           dc.l OUTCHV
01:000C2B60 4EF9000C2990    	   354:           JMP OUTEEE               OUTPUT CHARACTER TO TERMINAL
                            	   355: *
01:000C2B66 00001192        	   356:           dc.l INCHV
01:000C2B6A 4EF9000C29A2    	   357:           JMP INEEE                KEYBOARD INPUT WITH ECHO
                            	   358: *
01:000C2B70 00001198        	   359:           dc.l KINPUV
01:000C2B74 4EF9000C29B4    	   360:           JMP KINPUT               KEYBOARD INPUT WITHOUT ECHO
                            	   361: *
01:000C2B7A 000011AA        	   362:           dc.l MONITV
01:000C2B7E 4EF9000C29C6    	   363:           JMP MONITX               RE-ENTER MONITOR
                            	   364: *
01:000C2B84 000011B0        	   365:           dc.l RESETV              RESET MONITOR / SYSTEM
01:000C2B88 4EF9000C29CC    	   366:           JMP RESETX
                            	   367: *
01:000C2B8E 000011B6        	   368:           dc.l TIMINI
01:000C2B92 4EF9000C29D2    	   369:           JMP TIMRTS               TIMER INITIALIZE
                            	   370: *
01:000C2B98 000011BC        	   371:           dc.l TIMOFF
01:000C2B9C 4EF9000C29D2    	   372:           JMP TIMRTS               TIMER OFF
                            	   373: *
01:000C2BA2 000011C2        	   374:           dc.l TIMON
01:000C2BA6 4EF9000C29D2    	   375:           JMP TIMRTS               TIMER ON
                            	   376: *
01:000C2BAC 0000100C        	   377:           dc.l GETDAT               NOTHING NEEDED HERE
01:000C2BB0 4EF9000C29D4    	   378:           jmp GDATE
                            	   379: *
01:000C2BB6 00001012        	   380:           dc.l INTIME               NOTHING NEEDED HERE
01:000C2BBA 4EF9000C29D4    	   381:           jmp GDATE
                            	   382: *
01:000C2BC0 FFFFFFFF        	   383:           dc.l $FFFFFFFF
                            	   384: *
                            	   385: 

Source: "monk.txt"
                            	   284: *
                            	   285:  include boot.txt

Source: "boot.txt"
                            	     1: **********************
                            	     2: * OS boot SK*DOS 68K *
                            	     3: **********************
                            	     4: *
                            	     5: * SK*DOS 68K boot
01:000C2BC4 0D              	     6: bos      dc.b    $d,'Booting SK*DOS 68K',$d,$a,$a,0,0
01:000C2BC5 426F6F74696E6720
01:000C2BCD 534B2A444F532036
01:000C2BD5 384B
01:000C2BD7 0D
01:000C2BD8 0A
01:000C2BD9 0A
01:000C2BDA 00
01:000C2BDB 00
01:000C2BDC 41FAFFE6        	     7: bo       lea.l   bos(pc),a0
01:000C2BE0 6100D7F6        	     8:          bsr     pdata1
                            	     9: *
01:000C2BE4 4EB9000C2B16    	    10:          jsr     osinit  overlay jump tables, get date and time etc
01:000C2BEA 4EF900001000    	    11:          jmp     $1000   SK*DOS 68K cold start
                            	    12: *
                            	    13: * OS9 boot
01:000C2BF0 4EF9000C0362    	    14: ob       jmp mwarm       move.l #$1400,a7
                            	    15: *
01:000C2BF6 4EF9000C3462    	    16:          jmp  $c3462      modules are already in prom
                            	    17: *
                            	    18: 

Source: "monk.txt"
                            	   286: *
                            	   287:  include chars.txt

Source: "chars.txt"
                            	     1: **************************************
                            	     2: * MONK terminal emulator charter set *
                            	     3: **************************************
                            	     4: *
01:000C2BFC 00              	     5: chrtab dc.b 0 Character = ' '
01:000C2BFD 00              	     6:  dc.b 0
01:000C2BFE 00              	     7:  dc.b 0
01:000C2BFF 00              	     8:  dc.b 0
01:000C2C00 00              	     9:  dc.b 0
01:000C2C01 00              	    10:  dc.b 0
01:000C2C02 00              	    11:  dc.b 0
01:000C2C03 00              	    12:  dc.b 0
01:000C2C04 00              	    13:  dc.b 0
01:000C2C05 00              	    14:  dc.b 0
01:000C2C06 00              	    15:  dc.b 0
                            	    16: *
                            	    17:  NOLIST
                            	  1160: *
01:000C301C 7F              	  1161:  dc.b $7f Cursor type 1
01:000C301D 7F              	  1162:  dc.b $7f
01:000C301E 7F              	  1163:  dc.b $7f
01:000C301F 7F              	  1164:  dc.b $7f
01:000C3020 7F              	  1165:  dc.b $7f
01:000C3021 7F              	  1166:  dc.b $7f
01:000C3022 7F              	  1167:  dc.b $7f
01:000C3023 7F              	  1168:  dc.b $7f
01:000C3024 7F              	  1169:  dc.b $7f
01:000C3025 00              	  1170:  dc.b 0
01:000C3026 00              	  1171:  dc.b 0
                            	  1172: *
01:000C3027 63              	  1173:  dc.b %01100011 Cursor type 2
01:000C3028 41              	  1174:  dc.b %01000001
01:000C3029 41              	  1175:  dc.b %01000001
01:000C302A 00              	  1176:  dc.b 0
01:000C302B 00              	  1177:  dc.b 0
01:000C302C 00              	  1178:  dc.b 0
01:000C302D 41              	  1179:  dc.b %01000001
01:000C302E 41              	  1180:  dc.b %01000001
01:000C302F 63              	  1181:  dc.b %01100011
01:000C3030 00              	  1182:  dc.b 0
01:000C3031 00              	  1183:  dc.b 0
                            	  1184: *
                            	  1185: 

Source: "monk.txt"
                            	   288: *
                            	   289:  end
                            	   290: 


Symbols by name:
a_boot                           E:00000005
a_excpt                          A:000C07AE
ab1                              A:000C08C4
ab10                             A:000C0959
ab11                             A:000C0974
ab12                             A:000C0987
ab13                             A:000C099C
ab14                             A:000C09AE
ab15                             A:000C09BD
ab16                             A:000C09C8
ab2                              A:000C08CF
ab3                              A:000C08DD
ab4                              A:000C08F1
ab5                              A:000C0902
ab6                              A:000C0910
ab7                              A:000C0920
ab8                              A:000C0934
ab9                              A:000C093E
abotab                           A:000C09DC
acia                             E:000FF001
ad                               A:000C1DB2
ad2                              A:000C1DBC
addlp                            A:000C19C4
adloop                           A:000C1DCA
adloop1                          A:000C1DDC
ads                              A:000C1D4A
ads1                             A:000C1D66
adx                              A:000C1DEA
ady                              A:000C1DEC
ao                               A:000C0FC8
ASKDAV                           E:000010B0
at                               A:000C0FBE
ays                              A:000C2554
b_excpt                          A:000C07AC
BCDBIN                           A:000C2AAC
beep                             A:000C05D8
bflg                             A:0007FC7C
bitblt                           A:000C07AA
bl                               A:000C0ECA
bload                            A:000C0732
bo                               A:000C2BDC
border                           A:000C0792
bos                              A:000C2BC4
br                               A:000C233C
bre                              A:000C2394
brk                              A:000C2348
brk0                             A:000C2350
brk01                            A:000C2364
brke                             A:000C23D6
brkl                             A:000C0836
brkl1                            A:000C0844
brkp                             A:0007FC5E
brs                              A:000C2326
bs                               A:000C0ECE
bse                              A:000C0EDE
bstore                           A:000C0738
buff                             E:00000400
c0                               A:000C1714
c1                               A:000C171C
c2                               A:000C1732
c_code                           A:000C0E46
c_excpt                          A:000C07B4
cas                              A:000C16E1
ccrok                            A:000C0E3C
CDAY                             E:000016EF
cgo                              A:000C2068
chrtab                           A:000C2BFC
circle                           A:000C0798
clearg                           A:000C0764
cleart                           A:000C1074
CLKMSG                           A:000C2A88
cloop                            A:000C030E
cloop1                           A:000C033A
clrl                             A:000C25E4
clt                              A:000C0652
CMONTH                           E:000016EE
co                               A:000C1C30
col                              A:0007FCB2
col_lut                          A:000C06E6
colp                             A:000C1C38
colp1                            A:000C1C52
comloop                          A:000C0384
comtab                           A:000C10D2
copyrght                         A:000C02A0
cp                               A:000C22E2
cps                              A:000C22C6
cr                               A:000C0F24
crcs                             A:000C27B1
crlfs                            A:000C03C8
crok                             A:000C0D7C
cs                               A:000C16F0
cse                              A:000C1948
css                              A:000C16C0
ctl1                             A:000C1082
cts                              A:000C16DB
cursor                           A:000C10BA
CYEAR                            E:000016F0
d_excpt                          A:000C07B2
das                              A:000C280B
data0                            E:00000006
data1                            E:00000016
date                             A:0007FCAE
datlp                            A:000C19D2
day                              A:0007FCAF
db                               A:000C23A8
dbs                              A:000C2378
dc                               A:000C1A58
dcs                              A:000C1A4A
delay                            A:000C03F2
deol1                            A:000C0F54
deol2                            A:000C0F5C
deop_1                           A:000C0F9C
deope                            A:000C0FAE
derror                           A:000C0BE2
df                               A:000C258A
dfn                              A:000C257E
dfs                              A:000C2526
dft                              A:000C256B
diloop                           A:000C2912
DIREAD                           E:0000110C
DIWRIT                           E:00001112
dl                               A:000C0F38
dloop1                           A:000C03F6
dloop2                           A:000C03FA
dls                              A:000C27BC
dma                              A:0007FCA4
dma_len                          A:0007FC8C
DOSORG                           E:00001000
dp                               A:000C1BE0
dp1                              A:000C1C2A
dp2                              A:000C1BEA
dploop                           A:000C1BF8
dps                              A:000C1B84
dps1                             A:000C1BA4
dr                               A:000C2124
drs                              A:000C2108
drs1                             A:000C211C
drs2                             A:000C2120
drv_tab                          A:000C0A66
drx                              A:000C2132
drx1                             A:000C2192
drx2                             A:000C2194
dscr1                            A:000C105C
dscrloop                         A:000C106C
dscrok                           A:000C1046
dsecs                            A:0007FCAB
dummy                            A:000C03C6
dvs                              A:000C0752
ebs                              A:000C1F6E
el                               A:000C0F3A
ep                               A:000C0F6C
errcount                         A:0007FC89
ers                              A:000C281C
es                               A:000C0FBC
esc1                             A:000C0EB6
esc_proc                         A:000C0E94
excp1                            A:000C07CC
excp10                           A:000C07EE
excp2                            A:000C0800
excp3                            A:000C084A
excp4                            A:000C084C
excp5                            A:000C0870
excp6                            A:000C0898
FCBCSE                           E:00000023
FCBCTR                           E:00000022
FCBDAT                           E:00000060
FCBDRV                           E:00000003
fchk1                            A:000C1FC6
fcmd                             A:000C0BD8
fdc                              E:000F4001
fdcb                             A:000C284A
fdcerr                           A:0007FC8A
fds                              A:000C27E8
ff                               A:000C0F1A
ffound                           A:000C1FE0
fhd1                             A:000C200A
fhdx                             A:000C2028
fhdy                             A:000C202A
fi                               A:000C1F86
fill                             A:000C079C
fis                              A:000C1F38
flash                            A:0007FCB8
flood                            A:000C079E
floop1                           A:000C1FF6
floop2                           A:000C201A
fm                               A:000C1E6A
fmloop                           A:000C1E86
fms                              A:000C1E3E
fmt1                             A:000C2604
fmt2                             A:000C2646
fnope                            A:000C1FD0
found                            A:000C0396
fread                            A:000C0BDE
frestore                         A:000C0BDA
frread                           A:000C0B66
frrlp                            A:000C0B8C
frwlp                            A:000C0BC4
frwrite                          A:000C0B9E
fseek                            A:000C0BDC
ftrack                           A:0007FC86
fwait                            A:000C0BD6
fwrite                           A:000C0BE0
GDATE                            A:000C29D4
get_rec                          A:000C19A8
GETDAT                           E:0000100C
getrtc                           A:000C0568
go1                              A:000C2056
go2                              A:000C2078
go3                              A:000C208A
goerr                            A:000C231A
goerrs                           A:000C2306
grey_lut                         A:000C06D6
GTIME                            A:000C2AD4
hd                               A:000C1CC4
hd1                              A:000C1D20
hd2                              A:000C1CCE
hdr                              A:000C02C0
hds                              A:000C1C6E
hds1                             A:000C1C89
hdx                              A:000C1D3E
hdy                              A:000C1D40
he                               A:000C16B4
hes                              A:000C11B2
hi_g1                            A:000C078E
hi_g2                            A:000C0790
hi_graph                         A:000C0760
hitab                            A:000C070A
hks                              A:000C24CF
hloop                            A:000C1CDC
ho                               A:000C0F1E
hours                            A:0007FCA8
ht                               A:000C0EE0
hte                              A:000C0EF0
i_excpt                          A:000C07B0
id                               A:000C28CE
id1                              A:000C28A1
ids                              A:000C2886
ids2                             A:000C28BB
il                               A:000C0F36
in                               A:000C05F4
in_loop                          A:000C0608
inch                             A:000C0C9C
inch1                            A:000C0C74
INCHV                            E:00001192
INEEE                            A:000C29A2
inhex                            A:000C0408
inhex1                           A:000C040C
inhex2                           A:000C041A
inhex3                           A:000C0438
init_ip                          E:00000003
init_op                          E:00000004
inkey                            A:000C0CDE
inloop                           A:000C1FB4
int                              A:000C07C2
int7                             A:000C07C4
intab                            A:000C0C8C
inter0                           A:000C0CEC
inter1                           A:000C0CFA
INTIME                           E:00001012
iport                            A:0007FC7D
is1                              A:000C06A0
is2                              A:000C06A8
is3                              A:000C06B8
is4                              A:000C06C0
j_disk                           A:000C01B6
j_table                          E:0007FE00
jloop                            A:000C0324
jmp_tab                          A:000C00C0
jps                              A:000C20B2
js                               A:000C20FA
ju                               A:000C20C8
jvs                              A:000C20D8
KINPUT                           A:000C29B4
KINPUV                           E:00001198
lengths                          A:000C1EA4
lf                               A:000C0EF2
line                             A:000C0778
lk                               A:000C1F12
lkloop                           A:000C1F24
lks                              A:000C1ED6
lks1                             A:000C1EFD
lo_graph                         A:000C075C
load_lut                         A:000C074C
loadcmr                          A:000C078C
loc1                             A:000C045E
locase                           A:000C044E
locate                           A:000C07A4
loop                             A:000C1CFA
loop1                            A:000C1D0C
loop2                            A:000C1D30
lotab                            A:000C071E
lp                               A:000C1C02
lp1                              A:000C1C14
maxsec                           E:0000000A
maxtrk                           E:00000032
mc                               A:000C1B06
mc1                              A:000C1B4C
mc2                              A:000C1B56
mcloop                           A:000C1B0E
mcloop1                          A:000C1B26
mcold                            A:000C02FA
mcs                              A:000C1AE8
me                               A:000C1764
me1                              A:000C17A0
me2                              A:000C17AC
me3                              A:000C17B6
me4                              A:000C17C2
me5                              A:000C17CE
me6                              A:000C17DA
me7                              A:000C1802
me8                              A:000C1816
meerr                            A:000C1826
meloop                           A:000C1770
meloop1                          A:000C1786
MEMINI                           E:0000101C
mes                              A:000C1744
minit                            A:000C064C
mins                             A:0007FCA9
MONITV                           E:000011AA
MONITX                           A:000C29C6
mono_lut                         A:000C06C6
month                            A:0007FCAD
mouse                            A:000C07A6
move                             A:000C076A
move_b                           A:000C0748
mv                               A:000C0F2C
mvc1                             A:000C0DBC
mwarm                            A:000C0362
nbs                              A:000C1F50
NOGOOD                           A:000C2A78
nothex                           A:000C043E
notthere                         A:000C03BC
nts                              A:000C039A
nu                               A:000C0EC8
o_excpt                          A:000C07B6
ob                               A:000C2BF0
offset                           A:0007FCB6
ojt1                             A:000C2B32
ojtlp                            A:000C2B1C
olddrv                           A:0007FC84
oldfdv                           A:0007FC85
oport                            A:0007FC7E
os_jmptab                        A:000C2B3E
osinit                           A:000C2B16
out                              A:000C0620
out1                             A:000C0486
out2h                            A:000C046C
out4h                            A:000C0466
out8h                            A:000C0460
out_loop                         A:000C0634
outch                            A:000C0C9E
OUTCHV                           E:0000118C
OUTEEE                           A:000C2990
outh                             A:000C0472
outns                            A:000C049A
outns1                           A:000C049C
outpri                           A:000C0D20
outs                             A:000C048E
outtab                           A:000C0CB0
outter0                          A:000C0D08
outter1                          A:000C0D14
outvdu                           A:000C0D22
ov1                              A:000C0E0C
ov2                              A:000C0DFC
p_down                           A:0007FC7F
p_excpt                          A:000C07B8
pan                              A:000C07A2
parse                            A:000C0380
patdef                           A:000C079A
pcrlf                            A:000C03CC
pdata1                           A:000C03D8
pdend                            A:000C03E4
pdloop                           A:000C03DA
pdread                           A:000C0AF6
pdrlp                            A:000C0B1C
pdwlp                            A:000C0B4C
pdwrite                          A:000C0B2E
pm                               A:000C1E22
pms                              A:000C1E10
point                            A:000C077E
PRIMRD                           A:000C2922
PRIMWR                           A:000C2956
prmpt                            A:000C02F6
prom                             E:000C0000
prompt                           A:000C03EC
pstring                          A:000C03E8
PSTRNV                           E:000010B6
putrtc                           A:000C04F8
query                            A:000C0796
QUIT                             A:000C2B0C
r1                               A:000C04BA
r2                               A:000C04C4
r3                               A:000C04C6
r4                               A:000C04D2
r5                               A:000C04E6
ram                              E:0007FC00
ram_ok                           A:000C034C
rand                             A:0007FC80
randloop                         A:000C04DA
random                           A:000C04A6
rbuff                            E:00028000
rctocr                           A:000C0E12
rdpnt                            A:000C0BE4
read                             A:000C0A5A
rect                             A:000C0784
RESETV                           E:000011B0
RESETX                           A:000C29CC
restore                          A:000C0A4E
rms                              E:000FFE00
row                              A:0007FCB0
rp                               A:000C2048
rps                              A:000C2034
rread                            A:000C0C08
rrlp                             A:000C0C18
rs                               A:000C27D2
rss                              A:000C277C
rtc                              E:000F0001
rtrk                             A:0007FC88
rwlp                             A:000C0C36
rwrite                           A:000C0C26
s_excpt                          A:000C07C0
s_stack                          E:0007FDFE
sa                               A:000C21D2
sas                              A:000C21B4
scr1                             A:000C1002
scr_dwn                          A:000C101A
scr_up                           A:000C0FD2
scrdzz1                          A:000C102C
scrloop                          A:000C1012
scrok                            A:000C0FEC
scroll                           A:000C07A0
sd                               A:000C2214
sds                              A:000C21F8
sec                              E:0007FC87
secs                             A:0007FCAA
sector                           A:0007FCA2
seek                             A:000C0A54
sel_end                          A:000C0A36
sel_err                          A:000C0A46
select                           A:000C09FC
selfp                            A:000C0A12
sellp                            A:000C0A30
setpen                           A:000C0794
si                               A:000C23F6
sidex                            A:0007FCC2
sidey                            A:0007FCC4
sis                              A:000C23E2
sm                               A:000C1EAE
smloop                           A:000C1ECC
sms                              A:000C1E90
snfs                             A:000C279F
so                               A:000C2420
sos                              A:000C240A
sp                               A:000C2282
sps                              A:000C2268
sr                               A:000C195C
sr3                              A:000C1A0A
sr4                              A:000C1A24
srbyte                           A:000C19EC
srbyte1                          A:000C19F2
srerr                            A:000C199C
srint                            A:000C1A30
srint1                           A:000C1A40
srloop                           A:000C1964
srs                              A:000C1932
ss                               A:000C2254
ssecs                            A:000C2802
sss                              A:000C223A
stakey                           A:000C0CC0
STAT                             A:000C298A
stat0                            E:00000002
stat1                            E:00000012
statab                           A:000C0C64
stater0                          A:000C0CCA
stater1                          A:000C0CD4
status                           A:000C0C44
STATVE                           E:00001186
stp                              E:00000003
stt1                             A:000C0C5C
sync                             A:000C073E
sys_dcb                          A:0007FC9E
t_excpt                          A:000C07BA
table                            A:000C0E54
td                               A:000C2450
tdl                              A:000C247E
tds                              A:000C2434
temp                             A:0007FCC6
text                             A:000C0758
time_st                          E:0007FCA8
TIMENG                           A:000C2B0E
TIMINI                           E:000011B6
TIMOFF                           E:000011BC
TIMON                            E:000011C2
TIMRTS                           A:000C29D2
tm                               A:000C1870
tm2                              A:000C1892
tm4                              A:000C18E6
tm9                              A:000C18A4
tmchk                            A:000C18A2
tmerr                            A:000C18B2
tmfill                           A:000C1890
tmkey                            A:000C18EC
tmpass                           A:000C190C
tms                              A:000C1832
tms2                             A:000C184E
tms3                             A:000C1862
tos                              A:000C1E5F
tr                               A:000C22AC
track                            A:0007FCA0
trk                              E:0007FC86
trks                             A:000C27FA
trp                              A:000C07C6
trp14                            A:000C07C8
trp15                            A:000C07CA
trs                              A:000C2296
ts                               A:000C24EA
tsl                              A:000C250C
tss                              A:000C24B6
txttab                           A:000C06F6
u_stack                          E:0007FDFE
ua                               A:0007FC38
ud                               A:0007FC18
upc                              A:0007FC5A
usptr                            A:0007FC54
usr                              A:0007FC58
values                           A:000C1E63
vduflags                         A:0007FCB4
VRBLES                           E:00001400
vt                               A:000C0F06
vte                              A:000C0F18
winidcb                          A:0007FC8E
wordblt                          A:000C07A8
wps                              A:000C2782
wrabo                            A:000C08AC
write                            A:000C0A60
wrtrk                            A:0007FC9A
ws                               A:000C2834
wss                              A:000C282C
wtrk                             A:0007FC87
wwtrk                            A:0007FC9C
x_excpt                          A:000C07BC
xpos                             A:0007FCBA
xtemp                            A:0007FCBE
y_excpt                          A:000C07BE
year                             A:0007FCAC
ypos                             A:0007FCBC
ytemp                            A:0007FCC0

Symbols by value:
00000002 stat0
00000003 FCBDRV
00000003 stp
00000003 init_ip
00000004 init_op
00000005 a_boot
00000006 data0
0000000A maxsec
00000012 stat1
00000016 data1
00000022 FCBCTR
00000023 FCBCSE
00000032 maxtrk
00000060 FCBDAT
00000400 buff
00001000 DOSORG
0000100C GETDAT
00001012 INTIME
0000101C MEMINI
000010B0 ASKDAV
000010B6 PSTRNV
0000110C DIREAD
00001112 DIWRIT
00001186 STATVE
0000118C OUTCHV
00001192 INCHV
00001198 KINPUV
000011AA MONITV
000011B0 RESETV
000011B6 TIMINI
000011BC TIMOFF
000011C2 TIMON
00001400 VRBLES
000016EE CMONTH
000016EF CDAY
000016F0 CYEAR
00028000 rbuff
0007FC00 ram
0007FC18 ud
0007FC38 ua
0007FC54 usptr
0007FC58 usr
0007FC5A upc
0007FC5E brkp
0007FC7C bflg
0007FC7D iport
0007FC7E oport
0007FC7F p_down
0007FC80 rand
0007FC84 olddrv
0007FC85 oldfdv
0007FC86 ftrack
0007FC86 trk
0007FC87 wtrk
0007FC87 sec
0007FC88 rtrk
0007FC89 errcount
0007FC8A fdcerr
0007FC8C dma_len
0007FC8E winidcb
0007FC9A wrtrk
0007FC9C wwtrk
0007FC9E sys_dcb
0007FCA0 track
0007FCA2 sector
0007FCA4 dma
0007FCA8 hours
0007FCA8 time_st
0007FCA9 mins
0007FCAA secs
0007FCAB dsecs
0007FCAC year
0007FCAD month
0007FCAE date
0007FCAF day
0007FCB0 row
0007FCB2 col
0007FCB4 vduflags
0007FCB6 offset
0007FCB8 flash
0007FCBA xpos
0007FCBC ypos
0007FCBE xtemp
0007FCC0 ytemp
0007FCC2 sidex
0007FCC4 sidey
0007FCC6 temp
0007FDFE s_stack
0007FDFE u_stack
0007FE00 j_table
000C0000 prom
000C00C0 jmp_tab
000C01B6 j_disk
000C02A0 copyrght
000C02C0 hdr
000C02F6 prmpt
000C02FA mcold
000C030E cloop
000C0324 jloop
000C033A cloop1
000C034C ram_ok
000C0362 mwarm
000C0380 parse
000C0384 comloop
000C0396 found
000C039A nts
000C03BC notthere
000C03C6 dummy
000C03C8 crlfs
000C03CC pcrlf
000C03D8 pdata1
000C03DA pdloop
000C03E4 pdend
000C03E8 pstring
000C03EC prompt
000C03F2 delay
000C03F6 dloop1
000C03FA dloop2
000C0408 inhex
000C040C inhex1
000C041A inhex2
000C0438 inhex3
000C043E nothex
000C044E locase
000C045E loc1
000C0460 out8h
000C0466 out4h
000C046C out2h
000C0472 outh
000C0486 out1
000C048E outs
000C049A outns
000C049C outns1
000C04A6 random
000C04BA r1
000C04C4 r2
000C04C6 r3
000C04D2 r4
000C04DA randloop
000C04E6 r5
000C04F8 putrtc
000C0568 getrtc
000C05D8 beep
000C05F4 in
000C0608 in_loop
000C0620 out
000C0634 out_loop
000C064C minit
000C0652 clt
000C06A0 is1
000C06A8 is2
000C06B8 is3
000C06C0 is4
000C06C6 mono_lut
000C06D6 grey_lut
000C06E6 col_lut
000C06F6 txttab
000C070A hitab
000C071E lotab
000C0732 bload
000C0738 bstore
000C073E sync
000C0748 move_b
000C074C load_lut
000C0752 dvs
000C0758 text
000C075C lo_graph
000C0760 hi_graph
000C0764 clearg
000C076A move
000C0778 line
000C077E point
000C0784 rect
000C078C loadcmr
000C078E hi_g1
000C0790 hi_g2
000C0792 border
000C0794 setpen
000C0796 query
000C0798 circle
000C079A patdef
000C079C fill
000C079E flood
000C07A0 scroll
000C07A2 pan
000C07A4 locate
000C07A6 mouse
000C07A8 wordblt
000C07AA bitblt
000C07AC b_excpt
000C07AE a_excpt
000C07B0 i_excpt
000C07B2 d_excpt
000C07B4 c_excpt
000C07B6 o_excpt
000C07B8 p_excpt
000C07BA t_excpt
000C07BC x_excpt
000C07BE y_excpt
000C07C0 s_excpt
000C07C2 int
000C07C4 int7
000C07C6 trp
000C07C8 trp14
000C07CA trp15
000C07CC excp1
000C07EE excp10
000C0800 excp2
000C0836 brkl
000C0844 brkl1
000C084A excp3
000C084C excp4
000C0870 excp5
000C0898 excp6
000C08AC wrabo
000C08C4 ab1
000C08CF ab2
000C08DD ab3
000C08F1 ab4
000C0902 ab5
000C0910 ab6
000C0920 ab7
000C0934 ab8
000C093E ab9
000C0959 ab10
000C0974 ab11
000C0987 ab12
000C099C ab13
000C09AE ab14
000C09BD ab15
000C09C8 ab16
000C09DC abotab
000C09FC select
000C0A12 selfp
000C0A30 sellp
000C0A36 sel_end
000C0A46 sel_err
000C0A4E restore
000C0A54 seek
000C0A5A read
000C0A60 write
000C0A66 drv_tab
000C0AF6 pdread
000C0B1C pdrlp
000C0B2E pdwrite
000C0B4C pdwlp
000C0B66 frread
000C0B8C frrlp
000C0B9E frwrite
000C0BC4 frwlp
000C0BD6 fwait
000C0BD8 fcmd
000C0BDA frestore
000C0BDC fseek
000C0BDE fread
000C0BE0 fwrite
000C0BE2 derror
000C0BE4 rdpnt
000C0C08 rread
000C0C18 rrlp
000C0C26 rwrite
000C0C36 rwlp
000C0C44 status
000C0C5C stt1
000C0C64 statab
000C0C74 inch1
000C0C8C intab
000C0C9C inch
000C0C9E outch
000C0CB0 outtab
000C0CC0 stakey
000C0CCA stater0
000C0CD4 stater1
000C0CDE inkey
000C0CEC inter0
000C0CFA inter1
000C0D08 outter0
000C0D14 outter1
000C0D20 outpri
000C0D22 outvdu
000C0D7C crok
000C0DBC mvc1
000C0DFC ov2
000C0E0C ov1
000C0E12 rctocr
000C0E3C ccrok
000C0E46 c_code
000C0E54 table
000C0E94 esc_proc
000C0EB6 esc1
000C0EC8 nu
000C0ECA bl
000C0ECE bs
000C0EDE bse
000C0EE0 ht
000C0EF0 hte
000C0EF2 lf
000C0F06 vt
000C0F18 vte
000C0F1A ff
000C0F1E ho
000C0F24 cr
000C0F2C mv
000C0F36 il
000C0F38 dl
000C0F3A el
000C0F54 deol1
000C0F5C deol2
000C0F6C ep
000C0F9C deop_1
000C0FAE deope
000C0FBC es
000C0FBE at
000C0FC8 ao
000C0FD2 scr_up
000C0FEC scrok
000C1002 scr1
000C1012 scrloop
000C101A scr_dwn
000C102C scrdzz1
000C1046 dscrok
000C105C dscr1
000C106C dscrloop
000C1074 cleart
000C1082 ctl1
000C10BA cursor
000C10D2 comtab
000C11B2 hes
000C16B4 he
000C16C0 css
000C16DB cts
000C16E1 cas
000C16F0 cs
000C1714 c0
000C171C c1
000C1732 c2
000C1744 mes
000C1764 me
000C1770 meloop
000C1786 meloop1
000C17A0 me1
000C17AC me2
000C17B6 me3
000C17C2 me4
000C17CE me5
000C17DA me6
000C1802 me7
000C1816 me8
000C1826 meerr
000C1832 tms
000C184E tms2
000C1862 tms3
000C1870 tm
000C1890 tmfill
000C1892 tm2
000C18A2 tmchk
000C18A4 tm9
000C18B2 tmerr
000C18E6 tm4
000C18EC tmkey
000C190C tmpass
000C1932 srs
000C1948 cse
000C195C sr
000C1964 srloop
000C199C srerr
000C19A8 get_rec
000C19C4 addlp
000C19D2 datlp
000C19EC srbyte
000C19F2 srbyte1
000C1A0A sr3
000C1A24 sr4
000C1A30 srint
000C1A40 srint1
000C1A4A dcs
000C1A58 dc
000C1AE8 mcs
000C1B06 mc
000C1B0E mcloop
000C1B26 mcloop1
000C1B4C mc1
000C1B56 mc2
000C1B84 dps
000C1BA4 dps1
000C1BE0 dp
000C1BEA dp2
000C1BF8 dploop
000C1C02 lp
000C1C14 lp1
000C1C2A dp1
000C1C30 co
000C1C38 colp
000C1C52 colp1
000C1C6E hds
000C1C89 hds1
000C1CC4 hd
000C1CCE hd2
000C1CDC hloop
000C1CFA loop
000C1D0C loop1
000C1D20 hd1
000C1D30 loop2
000C1D3E hdx
000C1D40 hdy
000C1D4A ads
000C1D66 ads1
000C1DB2 ad
000C1DBC ad2
000C1DCA adloop
000C1DDC adloop1
000C1DEA adx
000C1DEC ady
000C1E10 pms
000C1E22 pm
000C1E3E fms
000C1E5F tos
000C1E63 values
000C1E6A fm
000C1E86 fmloop
000C1E90 sms
000C1EA4 lengths
000C1EAE sm
000C1ECC smloop
000C1ED6 lks
000C1EFD lks1
000C1F12 lk
000C1F24 lkloop
000C1F38 fis
000C1F50 nbs
000C1F6E ebs
000C1F86 fi
000C1FB4 inloop
000C1FC6 fchk1
000C1FD0 fnope
000C1FE0 ffound
000C1FF6 floop1
000C200A fhd1
000C201A floop2
000C2028 fhdx
000C202A fhdy
000C2034 rps
000C2048 rp
000C2056 go1
000C2068 cgo
000C2078 go2
000C208A go3
000C20B2 jps
000C20C8 ju
000C20D8 jvs
000C20FA js
000C2108 drs
000C211C drs1
000C2120 drs2
000C2124 dr
000C2132 drx
000C2192 drx1
000C2194 drx2
000C21B4 sas
000C21D2 sa
000C21F8 sds
000C2214 sd
000C223A sss
000C2254 ss
000C2268 sps
000C2282 sp
000C2296 trs
000C22AC tr
000C22C6 cps
000C22E2 cp
000C2306 goerrs
000C231A goerr
000C2326 brs
000C233C br
000C2348 brk
000C2350 brk0
000C2364 brk01
000C2378 dbs
000C2394 bre
000C23A8 db
000C23D6 brke
000C23E2 sis
000C23F6 si
000C240A sos
000C2420 so
000C2434 tds
000C2450 td
000C247E tdl
000C24B6 tss
000C24CF hks
000C24EA ts
000C250C tsl
000C2526 dfs
000C2554 ays
000C256B dft
000C257E dfn
000C258A df
000C25E4 clrl
000C2604 fmt1
000C2646 fmt2
000C277C rss
000C2782 wps
000C279F snfs
000C27B1 crcs
000C27BC dls
000C27D2 rs
000C27E8 fds
000C27FA trks
000C2802 ssecs
000C280B das
000C281C ers
000C282C wss
000C2834 ws
000C284A fdcb
000C2886 ids
000C28A1 id1
000C28BB ids2
000C28CE id
000C2912 diloop
000C2922 PRIMRD
000C2956 PRIMWR
000C298A STAT
000C2990 OUTEEE
000C29A2 INEEE
000C29B4 KINPUT
000C29C6 MONITX
000C29CC RESETX
000C29D2 TIMRTS
000C29D4 GDATE
000C2A78 NOGOOD
000C2A88 CLKMSG
000C2AAC BCDBIN
000C2AD4 GTIME
000C2B0C QUIT
000C2B0E TIMENG
000C2B16 osinit
000C2B1C ojtlp
000C2B32 ojt1
000C2B3E os_jmptab
000C2BC4 bos
000C2BDC bo
000C2BF0 ob
000C2BFC chrtab
000F0001 rtc
000F4001 fdc
000FF001 acia
000FFE00 rms
