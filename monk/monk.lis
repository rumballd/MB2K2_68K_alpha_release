Sections:
00: "seg7fc00" (7FC00-7FCC8)
01: "segc0000" (C0000-C2D0E)


Source: "monk.txt"
                            	     1: *
                            	     2:  include equates.txt

Source: "equates.txt"
                            	     1: ************************************************
                            	     2: *          Equate file for MONK ver 2.1        *
                            	     3: *          ----------------------------        *
                            	     4: * This file contains the hardware equates for  *
                            	     5: * MONK ver 2.1. It should be 'included' in     *
                            	     6: * each module of the program.                  *
                            	     7: ************************************************
                            	     8: *
                            	     9: **************************************
                            	    10: * Base addresses of the major blocks *
                            	    11: **************************************
                            	    12: prom     equ     $000C0000    Prom base address.
                            	    13: ram      equ     $0007fc00    Monk scratch ram base address.
                            	    14: io       equ     $000ff000    Input/output base address.
                            	    15: *
                            	    16: *************************************************
                            	    17: * Base addresses of buffers and jump tables etc *
                            	    18: *************************************************
                            	    19: s_stack  equ     $0007fdfe    Initial system stack.
                            	    20: u_stack  equ     $0007fdfe    Initial user stack.
                            	    21: *
                            	    22: j_table  equ     $0007fe00    Jump table base address.
                            	    23: *
                            	    24: cpmbase  equ     $00007000    CP/M 68k scratch ram.
                            	    25: *
                            	    26: text_bas equ     $00070000    text screen base address
                            	    27: text_siz equ     $00004b00    240lines * (640pixels / 8pixels per byte          )
                            	    28: grph_bas equ     $00074b00    graphics screen base address
                            	    29: grph_siz equ     $00009600    480lines * (640pixels / 8pixels per byte          )
                            	    30: *
                            	    31: rbuff    equ     $00028000    disk i/o read buffer
                            	    32: wbuff    equ     $00029400    disk i/o write buffer
                            	    33: wrbuff   equ     $0002a800    wini i/o read buffer
                            	    34: wwbuff   equ     $0002bc00    wini i/o write buffer
                            	    35: *
                            	    36: rd_base  equ     $0002d000    ramdisk base address
                            	    37: ed_base  equ     $000e0000    epromdisc base address
                            	    38: *
                            	    39: *************************************
                            	    40: * Peripheral device base addresses. *
                            	    41: *************************************
                            	    42: rms      equ     $000ffe00    RMS registers base address.
                            	    43: acia     equ     $000ff001    Acia base address.
                            	    44: rtc      equ     $000f0001    Real Time Clock Base Address
                            	    45: pia0     equ     $000ff101    Pia0 base address.
                            	    46: pia1     equ     $000ff201    Pia1 base address. (SCSI).
                            	    47: sound    equ     $000ff301    Sound generator base address.
                            	    48: fdc      equ     $000f4001    Floppy dics controller base address.
                            	    49: *
                            	    50: **************************************
                            	    51: * RMS register equates 68486 & 68487 *
                            	    52: **************************************
                            	    53: mem_map      equ $00      RMS memory map register.
                            	    54: mem_type     equ $24      Memory type and banks.
                            	    55: *
                            	    56: display_mode equ $01      List mode + lines/char row + bits/pel
                            	    57: video_op     equ $25      Video interlace + format.
                            	    58: sync_mode    equ $26      Sync mode and output.
                            	    59: int_stat     equ $02      Interrupt status.
                            	    60: *
                            	    61: border_col   equ $03      Wrap mode + mapa + video on + border colour.
                            	    62: vector_map   equ $06      Vector mapping register.
                            	    63: *
                            	    64: screen_base  equ $28      Virtual screen base address.
                            	    65: vert_scroll  equ $07      Vertical scroll register.
                            	    66: hori_scroll  equ $08      Horizontal scroll register.
                            	    67: *
                            	    68: drcs_tsa     equ $0a      DRCS definition table start.
                            	    69: to_dsa       equ $0c      True object table start.
                            	    70: fo_tsa       equ $0e      Fixed object table start.
                            	    71: collision    equ $18      Collison reports.
                            	    72: to_free      equ $04      True object free register.
                            	    73: *
                            	    74: rt_output    equ $1c      Real time output.
                            	    75: rt_input     equ $20      Real time input.
                            	    76: *
                            	    77: vert_off     equ $2c      Vertical offset register.
                            	    78: hori_off     equ $30      Horizontal offset register.
                            	    79: screen_size  equ $34      Virtual screen size.
                            	    80: screen_width equ $38      Virtual screen width.
                            	    81: *
                            	    82: clut         equ $40      Colour look up tables.
                            	    83: *
                            	    84: ********************************
                            	    85: * ACIA register equates  68681 *
                            	    86: ********************************
                            	    87: mode0    equ     00           Mode register A.
                            	    88: stat0    equ     02           Status reg A + Clock select reg.
                            	    89: com0     equ     04           Command reg A.
                            	    90: data0    equ     06           Xmit and recve reg.
                            	    91: *
                            	    92: mode1    equ     16           Mode register B.
                            	    93: stat1    equ     18           Status reg B + Clock select reg.
                            	    94: com1     equ     20           Command reg B.
                            	    95: data1    equ     22           Xmit and recve reg.
                            	    96: *
                            	    97: ipcr     equ     08           Input change reg + Aux control reg.
                            	    98: isr      equ     10           Interrupt mask + interrupt status.
                            	    99: ivr      equ     24           Interrupt vector register.
                            	   100: *
                            	   101: ctur0    equ     12           Counter timer upper register.
                            	   102: ctlr0    equ     14           Counter timer lower register.
                            	   103: *
                            	   104: sysreg   equ     26           Input port + output port config reg.
                            	   105: clrreg   equ     28           set (reset) output port bits + start cou          n
                            	   106: setreg   equ     30           reset (set) output port bits + stop coun          t
                            	   107: *
                            	   108: **************************
                            	   109: * ACIA parr port equates *
                            	   110: **************************
                            	   111: drv      equ     $80          bit7=drive select bit.
                            	   112: dden     equ     $40          bit6=drive density bit.
                            	   113: side     equ     $20          bit5=drive side select.
                            	   114: remote   equ     $10          bit4=local/remote video switch.
                            	   115: program  equ     $08          bit3=Program enable bit.
                            	   116: bell     equ     $04          bit2=Bell enable.
                            	   117: *
                            	   118: init_spare equ   2            Disk change flag.    switch0
                            	   119: init_ip  equ     3            Initial input port.  switch1
                            	   120: init_op  equ     4            Initial output port. switch2
                            	   121: a_boot   equ     5            Auto boot switch.    switch3
                            	   122: *
                            	   123: *******************************
                            	   124: * PIA register equates  68230 *
                            	   125: *******************************
                            	   126: pgcr     equ     $00          Port general control register.
                            	   127: pacr     equ     $0c          Port a control register.
                            	   128: pbcr     equ     $0e          Port b control register.
                            	   129: *
                            	   130: paddr    equ     $04          Port a data direction register.
                            	   131: pbddr    equ     $06          Port b data direction register.
                            	   132: *
                            	   133: padr     equ     $10          Port a data register.
                            	   134: pbdr     equ     $12          Port b data register.
                            	   135: *
                            	   136: psr      equ     $1a          Port status register.
                            	   137: *
                            	   138: ************************************
                            	   139: * Floppy disc register and command *
                            	   140: * equates.    WD1772               *
                            	   141: ************************************
                            	   142: fdccom   equ     fdc          fdc command register.
                            	   143: fdctrk   equ     fdc+2        fdc track register.
                            	   144: fdcsec   equ     fdc+4        fdc sector register.
                            	   145: fdcdat   equ     fdc+6        fdc data register.
                            	   146: *
                            	   147: stp      equ     $03          Drive stepping rate.
                            	   148: *
                            	   149: rstcmd   equ     $00+stp      Restore command.
                            	   150: seekcmd  equ     $10+stp      Seek command.
                            	   151: readcmd  equ     $90          Read command.
                            	   152: writecmd equ     $b0          Write command.
                            	   153: *
                            	   154: busy     equ     0            Fdc busy.
                            	   155: drq      equ     1            Data request.
                            	   156: *
                            	   157: *********************************
                            	   158: * SCSI pia register equates and *
                            	   159: * signal definitions.           *
                            	   160: *********************************
                            	   161: w_mode   equ     $00          pia mode register
                            	   162: w_dircn  equ     $04          pia data direction register a
                            	   163: w_setup  equ     $0c          pia port a submode control register
                            	   164: w_data   equ     $10          pia port a data register
                            	   165: w_cntrl  equ     $18          pia port c data (SCSI control lines)
                            	   166: w_status equ     $1a          pia port status register (ack + req)
                            	   167: * control register bit equates
                            	   168: w_busy   equ     0            SCSI busy line
                            	   169: w_cd     equ     1            SCSI command/data line
                            	   170: w_mess   equ     2            SCSI message line
                            	   171: w_io     equ     3            SCSI input/output line
                            	   172: w_sel    equ     4            SCSI select line
                            	   173: w_reset  equ     7            SCSI reset line
                            	   174: * status register equates
                            	   175: w_dreq   equ     0            SCSI req line edge
                            	   176: w_req    equ     4            SCSI req line level
                            	   177: w_dack   equ     1            SCSI ack line edge
                            	   178: w_ack    equ     5            SCSI ack line level
                            	   179: *
                            	   180: 
                            	   181: *

Source: "monk.txt"
                            	     3: *
                            	     4:  PAGE
                            	     5:  TTL MON_K    68k system services and debug routines
                            	     6:  LIST
                            	     7: **************************
                            	     8: **************************  
                            	     9: ** MONK   Ver 5.1       **  
                            	    10: ** D.A.Rumball   Jun 23 **  
                            	    11: **************************  
                            	    12: **************************
                            	    13: *
                            	    14: ******************************************
                            	    15: * This program is the core section of a  *
                            	    16: * general 68000 system monitor. It can   *
                            	    17: * be configured to a particular system   *
                            	    18: * by linking to other modules :-         *
                            	    19: *                                        *
                            	    20: *  OSSUBS......Contains the o/s          *
                            	    21: *              interface.                *
                            	    22: *  MINIT.......Contains the power on     *
                            	    23: *              and reset code.           *
                            	    24: *  EXCEPT......Contains the 68k          *
                            	    25: *              exception code.           *
                            	    26: *  CONSOLE.....Contains the console      *
                            	    27: *              driver code.              *
                            	    28: *  CHARS.......Font definitions.         *
                            	    29: *  GRAPHICS....Contains any system       *
                            	    30: *              code.                     *
                            	    31: *  DISK........Contains the disk driver  *
                            	    32: *              code.                     *
                            	    33: *  SUBS........Contains the code for any *
                            	    34: *              extra system subroutines. *
                            	    35: *  COMMANDS....Contains the command set. *
                            	    36: *  BOOT........Contains the boot routine.*
                            	    37: ******************************************
                            	    38: *
                            	    39: *
                            	    40:  PAGE
                            	    41:  include scratch.txt

Source: "scratch.txt"
                            	     1: **********************************
                            	     2: * MONK scratch storage locations *
                            	     3: **********************************
                            	     4:          ORG     ram
00:0007FC00 00000000        	     5:          ds.l    6            cursor data area.
00:0007FC04 *
00:0007FC18 00000000        	     6: ud       ds.l    8            Eight data registers.
00:0007FC1C *
00:0007FC38 00000000        	     7: ua       ds.l    7            Seven address registers.
00:0007FC3C *
00:0007FC54 00000000        	     8: usptr    ds.l    1            Stack pointer.
00:0007FC58 0000            	     9: usr      ds.w    1            Status register.
00:0007FC5A 00000000        	    10: upc      ds.l    1            Program counter.
                            	    11: *
00:0007FC5E 00              	    12: brkp     ds.b    30           Five breakpoints, six bytes each.
00:0007FC5F *
00:0007FC7C 00              	    13: bflg     ds.b    1            Breakpoint flag.
                            	    14: *
00:0007FC7D 00              	    15: iport    ds.b    1            Active input port.
00:0007FC7E 00              	    16: oport    ds.b    1            Active output port.
                            	    17: *
00:0007FC7F 00              	    18: p_down   ds.b    1            Power down detection byte.
00:0007FC80 00000000        	    19: rand     ds.l    1            Random number storage.
                            	    20: *
00:0007FC84 00              	    21: olddrv   ds.b    1            Old drive number
00:0007FC85 00              	    22: oldfdv   ds.b    1            Old floppy number
00:0007FC86 00              	    23: ftrack   ds.b    1            Old floppy track number
00:0007FC87 00              	    24: wtrk     ds.b    1            Floppy read track
00:0007FC88 00              	    25: rtrk     ds.b    1            Floppy write track
00:0007FC89 00              	    26: errcount ds.b    1            Floppy error count
00:0007FC8A 00              	    27: fdcerr   ds.b    1            Floppy error code
00:0007FC8B 00              	    28:          ds.b    1            Padding
00:0007FC8C 0000            	    29: dma_len  ds.w    1            Floppy data transfer length
                            	    30: *
00:0007FC8E 00              	    31: winidcb  ds.b    12           Hard disk DCB.
00:0007FC8F *
00:0007FC9A 0000            	    32: wrtrk    ds.w    1            Wini read track number
00:0007FC9C 0000            	    33: wwtrk    ds.w    1            Wini write track number
                            	    34: *
00:0007FC9E 00              	    35: sys_dcb  ds.b    1            System DCB. (logical drive)
00:0007FC9F 00              	    36:          ds.b    1            Physical drive.
00:0007FCA0 0000            	    37: track    ds.w    1            Track number.
00:0007FCA2 0000            	    38: sector   ds.w    1            Sector number.
00:0007FCA4 00000000        	    39: dma      ds.l    1            Data Move Address.
                            	    40: *
                            	    41: time_st  equ     hours        Real time clock scratch
00:0007FCA8 00              	    42: hours    ds.b    1            Hours
00:0007FCA9 00              	    43: mins     ds.b    1            Mins
00:0007FCAA 00              	    44: secs     ds.b    1            Secs
00:0007FCAB 00              	    45: dsecs    ds.b    1            Decimal secs
00:0007FCAC 00              	    46: year     ds.b    1            Year
00:0007FCAD 00              	    47: month    ds.b    1            Month
00:0007FCAE 00              	    48: date     ds.b    1            Day of month
00:0007FCAF 00              	    49: day      ds.b    1            Day of week
                            	    50: *
00:0007FCB0 0000            	    51: row      ds.w    1            Terminal emulator scratch (row)
00:0007FCB2 0000            	    52: col ds.w 1                    Col
00:0007FCB4 00              	    53: vduflags ds.b 1               Escape and inverse flags
00:0007FCB5 00              	    54:  ds.b 1                       Padding
00:0007FCB6 0000            	    55: offset ds.w 1                 Display offset
00:0007FCB8 0000            	    56: flash ds.w 1                  Flash cursor count
                            	    57: *
00:0007FCBA 0000            	    58: xpos ds.w 1                   Graphics routines scratch. (current x-coord)
00:0007FCBC 0000            	    59: ypos ds.w 1                   Current Y-coord
00:0007FCBE 0000            	    60: xtemp ds.w 1
00:0007FCC0 0000            	    61: ytemp ds.w 1
00:0007FCC2 0000            	    62: sidex ds.w 1                  Rectangle delta-x
00:0007FCC4 0000            	    63: sidey ds.w 1                  Rectangle delta-y
00:0007FCC6 0000            	    64: temp ds.w 1
                            	    65: *
                            	    66: 

Source: "monk.txt"
                            	    42: *
                            	    43: 
                            	    44:  ORG prom
                            	    45: *
                            	    46: *************************************************
                            	    47: * Exception jump table & subroutine jump table. *
                            	    48: *************************************************
                            	    49: *  Mapped to $0 after reset.
01:000C0000 0007FDFE        	    50:          dc.l    s_stack      Monitor stack.
01:000C0004 000C02FA        	    51:          dc.l    mcold        Monitor cold start.
01:000C0008 000C07AC        	    52:          dc.l    b_excpt      Bus error.
01:000C000C 000C07AE        	    53:          dc.l    a_excpt      Address error.
01:000C0010 000C07B0        	    54:          dc.l    i_excpt      Illegal instruction.
01:000C0014 000C07B2        	    55:          dc.l    d_excpt      Divide by zero.
01:000C0018 000C07B4        	    56:          dc.l    c_excpt      CHK exception.
01:000C001C 000C07B6        	    57:          dc.l    o_excpt      TRAPV exception.
01:000C0020 000C07B8        	    58:          dc.l    p_excpt      Privilege exception.
01:000C0024 000C07BA        	    59:          dc.l    t_excpt      Trace exception.
01:000C0028 000C07BC        	    60:          dc.l    x_excpt      L1010 emulation (illegal instruction).
01:000C002C 000C07BE        	    61:          dc.l    y_excpt      L1111 emulation (illegal instruction).
01:000C0030 FFFFFFFF        	    62:          dc.l    $ffffffff
01:000C0034 FFFFFFFF        	    63:          dc.l    $ffffffff
01:000C0038 FFFFFFFF        	    64:          dc.l    $ffffffff
01:000C003C 000C07C0        	    65:          dc.l    s_excpt      Uninitialised interrupt.
01:000C0040 FFFFFFFF        	    66:          dc.l    $ffffffff
01:000C0044 FFFFFFFF        	    67:          dc.l    $ffffffff
01:000C0048 FFFFFFFF        	    68:          dc.l    $ffffffff
01:000C004C FFFFFFFF        	    69:          dc.l    $ffffffff
01:000C0050 FFFFFFFF        	    70:          dc.l    $ffffffff
01:000C0054 FFFFFFFF        	    71:          dc.l    $ffffffff
01:000C0058 FFFFFFFF        	    72:          dc.l    $ffffffff
01:000C005C FFFFFFFF        	    73:          dc.l    $ffffffff
01:000C0060 000C07C0        	    74:          dc.l    s_excpt      Spurious interrupt.
                            	    75: *
                            	    76: * Autovectored interrupts.
                            	    77: *
01:000C0064 000C07C2        	    78:          dc.l    int          Interrupt level 1
01:000C0068 000C07C2        	    79:          dc.l    int          Interrupt level 2
01:000C006C 000C07C2        	    80:          dc.l    int          Interrupt level 3
01:000C0070 000C07C2        	    81:          dc.l    int          Interrupt level 4
01:000C0074 000C07C2        	    82:          dc.l    int          Interrupt level 5
01:000C0078 000C07C2        	    83:          dc.l    int          Interrupt level 6
01:000C007C 000C07C4        	    84:          dc.l    int7         Interrupt level 7
                            	    85: *
                            	    86: * Trap vectors
                            	    87: *
01:000C0080 000C07C6        	    88:          dc.l   trp           Unexpected trap.
01:000C0084 000C07C6        	    89:          dc.l   trp
01:000C0088 000C07C6        	    90:          dc.l   trp
01:000C008C 000C07C6        	    91:          dc.l   trp
01:000C0090 000C07C6        	    92:          dc.l   trp
01:000C0094 000C07C6        	    93:          dc.l   trp
01:000C0098 000C07C6        	    94:          dc.l   trp
01:000C009C 000C07C6        	    95:          dc.l   trp
01:000C00A0 000C07C6        	    96:          dc.l   trp
01:000C00A4 000C07C6        	    97:          dc.l   trp
01:000C00A8 000C07C6        	    98:          dc.l   trp
01:000C00AC 000C07C6        	    99:          dc.l   trp
01:000C00B0 000C07C6        	   100:          dc.l   trp
01:000C00B4 000C07C6        	   101:          dc.l   trp
01:000C00B8 000C07C8        	   102:          dc.l   trp14         Breakpoints.
01:000C00BC 000C07CA        	   103:          dc.l   trp15         User requests.
                            	   104: *
                            	   105: *
                            	   106: * Monitor jump table Copied to j_table on reset.
                            	   107: * jump table is a seies of 6 byte entries
                            	   108: * Class 1 routines.
01:000C00C0 4EF9000C02FA    	   109: jmp_tab  jmp   mcold        Monitor cold start.
01:000C00C6 4EF9000C0362    	   110:          jmp   mwarm        Monitor warm start.
01:000C00CC 4EF9000C03C6    	   111:          jmp   dummy        Spare slot.
01:000C00D2 4EF9000C03C6    	   112:          jmp   dummy        Spare slot.
01:000C00D8 4EF9000C03C6    	   113:          jmp   dummy        Spare slot.
01:000C00DE 4EF9000C03C6    	   114:          jmp   dummy        Spare slot.
01:000C00E4 4EF9000C03C6    	   115:          jmp   dummy        Spare slot.
01:000C00EA 4EF9000C03C6    	   116:          jmp   dummy        Spare slot.
                            	   117: * class 2 routines.
01:000C00F0 4EF9000C0C44    	   118:          jmp   status       Test for recieved character.
01:000C00F6 4EF9000C0C74    	   119:          jmp   inch1        Input character, no echo.
01:000C00FC 4EF9000C0C9C    	   120:          jmp   inch         Input character with echo.
01:000C0102 4EF9000C0C9E    	   121:          jmp   outch        Output character.
01:000C0108 4EF9000C03C6    	   122:          jmp   dummy        Spare slot.
01:000C010E 4EF9000C03C6    	   123:          jmp   dummy        Spare slot.
01:000C0114 4EF9000C03C6    	   124:          jmp   dummy        Spare slot.
01:000C011A 4EF9000C03C6    	   125:          jmp   dummy        Spare slot.
                            	   126: * Class 3 routines.
01:000C0120 4EF9000C03D8    	   127:          jmp   pdata1       Print a string.
01:000C0126 4EF9000C03CC    	   128:          jmp   pcrlf        Print a new line.
01:000C012C 4EF9000C03E8    	   129:          jmp   pstring      Print crlf + string.
01:000C0132 4EF9000C048E    	   130:          jmp   outs         Print a space.
01:000C0138 4EF9000C049A    	   131:          jmp   outns        Print multiple spaces.
01:000C013E 4EF9000C044E    	   132:          jmp   locase       Convert character to lower ca.
01:000C0144 4EF9000C03C6    	   133:          jmp   dummy        Spare slot.
01:000C014A 4EF9000C03C6    	   134:          jmp   dummy        Spare slot.
                            	   135: * Class 4 routines.
01:000C0150 4EF9000C0408    	   136:          jmp   inhex        Input multi digit hex number.
01:000C0156 4EF9000C03EC    	   137:          jmp   prompt       Print a string plus input hex
01:000C015C 4EF9000C0472    	   138:          jmp   outh           "    " one     "    "    "
01:000C0162 4EF9000C046C    	   139:          jmp   out2h          "    " two     "    "    "
01:000C0168 4EF9000C0466    	   140:          jmp   out4h          "    " four    "    "    "
01:000C016E 4EF9000C0460    	   141:          jmp   out8h        Print an eight digit hex numb.
01:000C0174 4EF9000C03C6    	   142:          jmp   dummy        Spare slot.
01:000C017A 4EF9000C03C6    	   143:          jmp   dummy        Spare slot.
                            	   144: * Class 5 routines.
01:000C0180 4EF9000C03F2    	   145:          jmp   delay        Delay routine.
01:000C0186 4EF9000C05D8    	   146:          jmp   beep         Beep buzzer.
01:000C018C 4EF9000C04A6    	   147:          jmp   random       Random number generator.
01:000C0192 4EF9000C0568    	   148:          jmp   getrtc       Get data from real time clock
01:000C0198 4EF9000C04F8    	   149:          jmp   putrtc       Put data to real time clock.
01:000C019E 4EF9000C05F4    	   150:          jmp   in           Write data to security ram.
01:000C01A4 4EF9000C0620    	   151:          jmp   out          Read data from b/b ram.
01:000C01AA 4EF9000C03C6    	   152:          jmp   dummy        Spare slot.
                            	   153: * Class 6 routines.
01:000C01B0 4EF9000C09FC    	   154:          jmp   select       Select drive.
01:000C01B6 4EF9000C0A4E    	   155: j_disk   jmp   restore      Recalibrate drive.
01:000C01BC 4EF9000C0A54    	   156:          jmp   seek         Seek to cylinder.
01:000C01C2 4EF9000C0A5A    	   157:          jmp   read         Read sector.
01:000C01C8 4EF9000C0A60    	   158:          jmp   write        Write sector.
01:000C01CE 4EF9000C03C6    	   159:          jmp   dummy        Spare slot.
01:000C01D4 4EF9000C03C6    	   160:          jmp   dummy        Spare slot.
01:000C01DA 4EF9000C03C6    	   161:          jmp   dummy        Spare slot.
                            	   162: * Class 7 routines.
01:000C01E0 4EF9000C0752    	   163:          jmp   dvs          Define virtual screen.
01:000C01E6 4EF9000C073E    	   164:          jmp   sync         Wait for vertical blanking.
01:000C01EC 4EF9000C074C    	   165:          jmp   load_lut     Load look up tables.
01:000C01F2 4EF9000C0758    	   166:          jmp   text         Display text screen.
01:000C01F8 4EF9000C0760    	   167:          jmp   hi_graph     Display 650 x 500 mono.
01:000C01FE 4EF9000C03C6    	   168:          jmp   dummy        Display 650 x 500 4 colour.
01:000C0204 4EF9000C075C    	   169:          jmp   lo_graph     Display 320 x 250 16 colour.
01:000C020A 4EF9000C0764    	   170:          jmp   clearg       Clear graphics space.
01:000C0210 4EF9000C0792    	   171:          jmp   border       Define boarder colour.
01:000C0216 4EF9000C0794    	   172:          jmp   setpen       Define `pen' style.
01:000C021C 4EF9000C076A    	   173:          jmp   move         Move drawing point.
01:000C0222 4EF9000C0796    	   174:          jmp   query        Return pel value.
01:000C0228 4EF9000C077E    	   175:          jmp   point        Plot point.
01:000C022E 4EF9000C0778    	   176:          jmp   line         Plot line.
01:000C0234 4EF9000C0784    	   177:          jmp   rect         Plot rectangle.
01:000C023A 4EF9000C0798    	   178:          jmp   circle       Plot circle.
01:000C0240 4EF9000C079A    	   179:          jmp   patdef       Define fill pattern.
01:000C0246 4EF9000C079C    	   180:          jmp   fill         Plot filled rectangle.
01:000C024C 4EF9000C079E    	   181:          jmp   flood        Arbituary area fill.
01:000C0252 4EF9000C07A0    	   182:          jmp   scroll       Scroll through virtual screen.
01:000C0258 4EF9000C07A2    	   183:          jmp   pan          Pan across virtual screen.
01:000C025E 4EF9000C07A4    	   184:          jmp   locate       Centre displayed area on cursor.
01:000C0264 4EF9000C07A6    	   185:          jmp   mouse        Return mouse status.
01:000C026A 4EF9000C07A8    	   186:          jmp   wordblt      Move block (word bounds) with logical mods.
01:000C0270 4EF9000C07AA    	   187:          jmp   bitblt       Move block (bit bounds) with logical mods.
01:000C0276 4EF9000C03C6    	   188:          jmp   dummy        Spare slot.
01:000C027C 4EF9000C03C6    	   189:          jmp   dummy        Spare slot.
01:000C0282 4EF9000C03C6    	   190:          jmp   dummy        Spare slot.
01:000C0288 4EF9000C03C6    	   191:          jmp   dummy        Spare slot.
01:000C028E 4EF9000C03C6    	   192:          jmp   dummy        Spare slot.
01:000C0294 4EF9000C03C6    	   193:          jmp   dummy        Spare slot.
01:000C029A 4EF9000C03C6    	   194:          jmp   dummy        Spare slot.
                            	   195: *
01:000C02A0 76352E3120632031	   196: copyrght dc.b    'v5.1 c 1986-2023'
01:000C02A8 3938362D32303233
01:000C02B0 442E52756D62616C	   197:          dc.b    'D.Rumball AVED'
01:000C02B8 6C2041564544
01:000C02BE 51              	   198:          dc.b    $51          Monk version number.
01:000C02BF 03              	   199:          dc.b    3            OP/SYS code (SK*DOS)
                            	   200: *
                            	   201: **************************************
                            	   202: * Start of monitor. Entered on reset *
                            	   203: **************************************
                            	   204: *
01:000C02C0 0C              	   205: hdr      dc.b    $0c,'** MONK 68000 monitor  Ver 5.1   D.A.Rumball 2023 **',0
01:000C02C1 2A2A204D4F4E4B20
01:000C02C9 3638303030206D6F
01:000C02D1 6E69746F72202056
01:000C02D9 657220352E312020
01:000C02E1 20442E412E52756D
01:000C02E9 62616C6C20323032
01:000C02F1 33202A2A
01:000C02F5 00
01:000C02F6 3D3D3E          	   206: prmpt    dc.b    '==>',0
01:000C02F9 00
                            	   207: *
                            	   208: * monitor cold start
01:000C02FA 46FC2700        	   209: mcold    move.w  #$2700,sr    Disable interrupts, supervisor.
                            	   210: *
01:000C02FE 207C00000000    	   211:          move.l  #$0,a0        Move exception vectors to low ram (48 vectors)
01:000C0304 227C000C0000    	   212:          move.l  #prom,a1
01:000C030A 303C002F        	   213:          move.w  #47,d0
01:000C030E 20D9            	   214: cloop    move.l  (a1)+,(a0)+
01:000C0310 51C8FFFC        	   215:          dbf     d0,cloop
                            	   216: *
01:000C0314 207C0007FE00    	   217:          move.l  #j_table,a0   Move jump table to ram.
01:000C031A 227C000C00C0    	   218:          move.l  #jmp_tab,a1
01:000C0320 303C007F        	   219:          move.w  #127,d0       
01:000C0324 20D9            	   220: jloop    move.l  (a1)+,(a0)+
01:000C0326 51C8FFFC        	   221:          dbf   d0,jloop
                            	   222: *
01:000C032A 0C3900AA0007FC7F	   223:          cmp.b   #$aa,p_down  Check scratch and clear if not valid.
01:000C0332 6718            	   224:          beq.s   ram_ok
01:000C0334 207C0007FC00    	   225:          move.l  #ram,a0
01:000C033A 4298            	   226: cloop1   clr.l   (a0)+        Clear out scratch storage space.
01:000C033C B1FC0007FE00    	   227:          cmp.l   #ram+512,a0
01:000C0342 66F6            	   228:          bne.s   cloop1
01:000C0344 13FC00AA0007FC7F	   229:          move.b  #$aa,p_down
                            	   230: *
01:000C034C 23FC0007FDFE0007	   231: ram_ok   move.l  #u_stack,usptr Set up user stack pointer.
01:000C0354 FC54
                            	   232: *
01:000C0356 610002F4        	   233:          bsr     minit      System dependent init code.
                            	   234: *
01:000C035A 41FAFF64        	   235:          lea     hdr(pc),a0 print  initial header
01:000C035E 61000088        	   236:          bsr     pstring
                            	   237: *
                            	   238: * monitor warm start
01:000C0362 41FAFF92        	   239: mwarm    lea     prmpt(pc),a0     
01:000C0366 61000080        	   240:          bsr     pstring
                            	   241: *
01:000C036A 61000930        	   242:          bsr     inch
01:000C036E 610000DE        	   243:          bsr     locase
01:000C0372 E180            	   244:          asl.l   #8,d0
01:000C0374 2200            	   245:          move.l  d0,d1
01:000C0376 61000924        	   246:          bsr     inch
01:000C037A 610000D2        	   247:          bsr     locase
01:000C037E D200            	   248:          add.b   d0,d1
                            	   249: *
01:000C0380 41FA0D50        	   250: parse    lea     comtab(pc),a0
01:000C0384 0C50FFFF        	   251: comloop  cmp.w   #$ffff,(a0)
01:000C0388 6732            	   252:          beq.s   notthere
01:000C038A B258            	   253:          cmp.w   (a0)+,d1
01:000C038C 6708            	   254:          beq.s   found
01:000C038E D1FC00000004    	   255:          add.l    #4,a0
01:000C0394 60EE            	   256:          bra.s   comloop
01:000C0396 2250            	   257: found    move.l  (a0),a1
01:000C0398 4ED1            	   258:          jmp     (a1)
                            	   259: *
01:000C039A 0D              	   260: nts      dc.b    $d,'Unknown command!, (?? for help)',7,0
01:000C039B 556E6B6E6F776E20
01:000C03A3 636F6D6D616E6421
01:000C03AB 2C20283F3F20666F
01:000C03B3 722068656C7029
01:000C03BA 07
01:000C03BB 00
01:000C03BC 41FAFFDC        	   261: notthere lea     nts(pc),a0
01:000C03C0 61000016        	   262:          bsr     pdata1
01:000C03C4 609C            	   263:          bra.s   mwarm
                            	   264: *
                            	   265: *
                            	   266: * Dummy routine.
01:000C03C6 4E75            	   267: dummy    rts     Dummy routine to do nothing.
                            	   268: *
                            	   269:  include subs.txt

Source: "subs.txt"
                            	     1: *******************************
                            	     2: * Common monitor subroutines. *
                            	     3: *******************************
                            	     4: *
                            	     5: * Print a CR & LF .
                            	     6: * Entry:- No parameters.
                            	     7: * Exit:-   No registers altered.
01:000C03C8 0D              	     8: crlfs    dc.b    $0d,$0a,0,0
01:000C03C9 0A
01:000C03CA 00
01:000C03CB 00
01:000C03CC 2F08            	     9: pcrlf    move.l  a0,-(sp)
01:000C03CE 41FAFFF8        	    10:          lea     crlfs(pc),a0
01:000C03D2 6104            	    11:          bsr.s   pdata1
01:000C03D4 205F            	    12:          move.l  (sp)+,a0
01:000C03D6 4E75            	    13:          rts
                            	    14: *
                            	    15: * Print character string, terminate with zero byte.
                            	    16: * Entry:- a0 points to string.
                            	    17: * Exit:-  a0 points to 1st byte past string.
01:000C03D8 2F00            	    18: pdata1   move.l  d0,-(sp)
01:000C03DA 1018            	    19: pdloop   move.b  (a0)+,d0
01:000C03DC 6706            	    20:          beq.s   pdend
01:000C03DE 610008BE        	    21:          bsr     outch
01:000C03E2 60F6            	    22:          bra.s   pdloop
01:000C03E4 201F            	    23: pdend    move.l  (sp)+,d0
01:000C03E6 4E75            	    24:          rts
                            	    25: *
                            	    26: * Print character string preceded by a CR-LF.
                            	    27: * Entry:- a0 points to string.
                            	    28: * Exit:- a0 points to 1st byte past string.
01:000C03E8 61E2            	    29: pstring  bsr.s   pcrlf
01:000C03EA 60EC            	    30:          bra.s   pdata1
                            	    31: *
                            	    32: * Prompt routine, print string followed by hex input.
                            	    33: * Entry:- a0 points to string.
                            	    34: * Exit:-  d1 contains hex input.
01:000C03EC 61EA            	    35: prompt   bsr.s   pdata1
01:000C03EE 6118            	    36:          bsr.s   inhex
01:000C03F0 4E75            	    37:          rts
                            	    38: *
                            	    39: * Delay routine.
                            	    40: * Entry:- d1 = delay in milli secs.
                            	    41: * Exit:-   No registers altered.
01:000C03F2 48E7C000        	    42: delay    movem.l d0-d1,-(sp)
01:000C03F6 303C0190        	    43: dloop1   move.w  #400,d0
01:000C03FA 51C8FFFE        	    44: dloop2   dbf     d0,dloop2
01:000C03FE 51C9FFF6        	    45:          dbf     d1,dloop1
01:000C0402 4CDF0003        	    46:          movem.l (sp)+,d0-d1
01:000C0406 4E75            	    47:          rts
                            	    48: *
                            	    49: * Input n-digit hex number, terminate on a space.
                            	    50: * Entry:- No parameters.
                            	    51: * Exit:- d1 = number.
01:000C0408 2F00            	    52: inhex    move.l  d0,-(sp)
01:000C040A 4281            	    53:          clr.l   d1
01:000C040C 6100088E        	    54: inhex1   bsr     inch
01:000C0410 B03C0020        	    55:          cmp.b   #' ',d0
01:000C0414 6604            	    56:          bne.s   inhex2
01:000C0416 201F            	    57:          move.l  (sp)+,d0
01:000C0418 4E75            	    58:          rts
01:000C041A 6132            	    59: inhex2   bsr.s   locase
01:000C041C 903C0030        	    60:          sub.b   #'0',d0
01:000C0420 6B1C            	    61:          bmi.s   nothex
01:000C0422 B03C0009        	    62:          cmp.b   #9,d0
01:000C0426 6F10            	    63:          ble.s   inhex3
01:000C0428 B03C0031        	    64:          cmp.b   #$31,d0
01:000C042C 6B10            	    65:          bmi.s   nothex
01:000C042E B03C0036        	    66:          cmp.b   #$36,d0
01:000C0432 6E0A            	    67:          bgt.s   nothex
01:000C0434 903C0027        	    68:          sub.b   #39,d0
01:000C0438 E981            	    69: inhex3   asl.l #4,d1
01:000C043A D280            	    70:          add.l   d0,d1
01:000C043C 60CE            	    71:          bra.s   inhex1
01:000C043E 7008            	    72: nothex   moveq #8,d0
01:000C0440 6100085C        	    73:          bsr     outch
01:000C0444 6148            	    74:          bsr.s   outs
01:000C0446 61000856        	    75:          bsr     outch
01:000C044A 6000FFC0        	    76:          bra     inhex1
                            	    77: *
                            	    78: * Convert character from upper to lower case.
                            	    79: * Entry:- d0 = character
                            	    80: * Exit:-  d0 = converted character.
01:000C044E B03C0041        	    81: locase   cmp.b   #'A',d0
01:000C0452 650A            	    82:          bcs.s   loc1
01:000C0454 B03C005A        	    83:          cmp.b   #'Z',d0
01:000C0458 6204            	    84:          bhi.s   loc1
01:000C045A 06000020        	    85:          addi.b  #'a'-'A',d0
01:000C045E 4E75            	    86: loc1     rts
                            	    87: *
                            	    88: * Hex print routines.
                            	    89: * Entry:- d0 = number to print.
                            	    90: * Exit:-  No registers altered.
01:000C0460 4840            	    91: out8h    swap    d0
01:000C0462 6102            	    92:          bsr.s   out4h
01:000C0464 4840            	    93:          swap    d0
01:000C0466 E058            	    94: out4h    ror.w   #8,d0
01:000C0468 6102            	    95:          bsr.s   out2h
01:000C046A E158            	    96:          rol.w   #8,d0
01:000C046C E818            	    97: out2h    ror.b   #4,d0
01:000C046E 6102            	    98:          bsr.s   outh
01:000C0470 E918            	    99:          rol.b   #4,d0
01:000C0472 2F00            	   100: outh     move.l  d0,-(sp)
01:000C0474 C03C000F        	   101:          and.b   #$0f,d0
01:000C0478 D03C0030        	   102:          add.b   #'0',d0
01:000C047C B03C0039        	   103:          cmp.b   #'9',d0
01:000C0480 6304            	   104:          bls.s   out1
01:000C0482 D03C0007        	   105:          add.b   #'A'-'9'-1,d0
01:000C0486 61000816        	   106: out1     bsr     outch
01:000C048A 201F            	   107:          move.l  (sp)+,d0
01:000C048C 4E75            	   108:          rts
                            	   109: *
                            	   110: * Print a space.
                            	   111: * Entry:- No parameters.
                            	   112: * Exit:-   No registers altered.
01:000C048E 2F00            	   113: outs     move.l  d0,-(sp)
01:000C0490 7020            	   114:          moveq   #' ',d0
01:000C0492 6100080A        	   115:          bsr     outch
01:000C0496 201F            	   116:          move.l  (sp)+,d0
01:000C0498 4E75            	   117:          rts
                            	   118: *
                            	   119: * print n spaces.
                            	   120: * Entry:- d2 = number of spaces.
                            	   121: * Exit:-   No registers altered.
01:000C049A 2F02            	   122: outns    move.l  d2,-(sp)
01:000C049C 61F0            	   123: outns1   bsr.s   outs
01:000C049E 51CAFFFC        	   124:          dbf     d2,outns1
01:000C04A2 241F            	   125:          move.l  (sp)+,d2
01:000C04A4 4E75            	   126:          rts
                            	   127: *
                            	   128: * Random number generator.
                            	   129: * Entry :- if       (d0)  = 0   then   0 <= random number <= 255
                            	   130: *          if  1 <= (d0) <= 255 then   0 <= random number <= (d0)
                            	   131: *          if       (d0)  > 255 then (d0) = new seed
                            	   132: * Exit  :- (d0) = 8 bit random number.
01:000C04A6 48E76000        	   133: random   movem.l d1-d2,-(sp)
01:000C04AA B0BC000000FF    	   134:          cmp.l   #255,d0      >255?
01:000C04B0 6F08            	   135:          ble.s   r1
01:000C04B2 23C00007FC80    	   136:          move.l  d0,rand      New seed.
01:000C04B8 4280            	   137:          clr.l   d0
01:000C04BA 4A80            	   138: r1       tst.l   d0           =0?
01:000C04BC 6606            	   139:          bne.s   r2
01:000C04BE 203C000000FF    	   140:          move.l  #255,d0
01:000C04C4 2400            	   141: r2       move.l  d0,d2
01:000C04C6 610A            	   142: r3       bsr.s   r4
01:000C04C8 B002            	   143:          cmp.b   d2,d0
01:000C04CA 62FA            	   144:          bhi.s   r3
01:000C04CC 4CDF0006        	   145:          movem.l (sp)+,d1-d2
01:000C04D0 4E75            	   146:          rts
                            	   147: *
01:000C04D2 7207            	   148: r4       moveq   #7,d1
01:000C04D4 20390007FC80    	   149:          move.l  rand,d0
01:000C04DA E398            	   150: randloop rol.l   #1,d0
01:000C04DC 0800001D        	   151:          btst.l  #29,d0
01:000C04E0 6704            	   152:          beq.s   r5
01:000C04E2 08400000        	   153:          bchg.l  #0,d0
01:000C04E6 51C9FFF2        	   154: r5       dbf     d1,randloop
01:000C04EA 23C00007FC80    	   155:          move.l  d0,rand
01:000C04F0 C0BC000000FF    	   156:          and.l   #255,d0
01:000C04F6 4E75            	   157:          rts
                            	   158: *
                            	   159: *
                            	   160:  PAGE
                            	   161: *
                            	   162: * Send the time string to the real time clock.
                            	   163: * Entry :- a0 points to eight byte time string.
                            	   164: * Exit :- No registers altered.
01:000C04F8 48E7C080        	   165: putrtc   movem.l d0-d1/a0,-(sp)
                            	   166: *
01:000C04FC 13FC0004000F0003	   167:          move.b #4,$F0003 hours
01:000C0504 13D8000F0001    	   168:          move.b (a0)+,$F0001
01:000C050A 13FC0002000F0003	   169:          move.b #2,$F0003 mins
01:000C0512 13D8000F0001    	   170:          move.b (a0)+,$F0001
01:000C0518 13FC0000000F0003	   171:          move.b #0,$F0003 secs
01:000C0520 13D8000F0001    	   172:          move.b (a0)+,$F0001
01:000C0526 10FC0000        	   173:          move.b #0,(a0)+ decimal secs
                            	   174: *
01:000C052A 13FC0009000F0003	   175:          move.b #9,$F0003 year
01:000C0532 13D8000F0001    	   176:          move.b (a0)+,$F0001
01:000C0538 13FC0008000F0003	   177:          move.b #8,$F0003 month
01:000C0540 13D8000F0001    	   178:          move.b (a0)+,$F0001
01:000C0546 13FC0007000F0003	   179:          move.b #7,$F0003 date
01:000C054E 13D8000F0001    	   180:          move.b (a0)+,$F0001
01:000C0554 13FC0006000F0003	   181:          move.b #6,$F0003 day
01:000C055C 13D8000F0001    	   182:          move.b (a0)+,$F0001
                            	   183: *
01:000C0562 4CDF0103        	   184:          movem.l (sp)+,d0-d1/a0
01:000C0566 4E75            	   185:          rts
                            	   186: *
                            	   187: * Get a time string from the real time clock.
                            	   188: * Entry :- (a0) pointer to eight byte time space.
                            	   189: * Exit :- no registers altered.
01:000C0568 48E78080        	   190: getrtc   movem.l d0/a0,-(sp)
                            	   191: *
01:000C056C 13FC0004000F0003	   192:          move.b #4,$F0003 hours
01:000C0574 10F9000F0001    	   193:          move.b $F0001,(a0)+
01:000C057A 13FC0002000F0003	   194:          move.b #2,$F0003 mins
01:000C0582 10F9000F0001    	   195:          move.b $F0001,(a0)+
01:000C0588 13FC0000000F0003	   196:          move.b #0,$F0003 secs
01:000C0590 10F9000F0001    	   197:          move.b $F0001,(a0)+
01:000C0596 10FC0000        	   198:          move.b #0,(a0)+ decimal secs
                            	   199: *
01:000C059A 13FC0009000F0003	   200:          move.b #9,$F0003 year
01:000C05A2 10F9000F0001    	   201:          move.b $F0001,(a0)+
01:000C05A8 13FC0008000F0003	   202:          move.b #8,$F0003 month
01:000C05B0 10F9000F0001    	   203:          move.b $F0001,(a0)+
01:000C05B6 13FC0007000F0003	   204:          move.b #7,$F0003 date
01:000C05BE 10F9000F0001    	   205:          move.b $F0001,(a0)+
01:000C05C4 13FC0006000F0003	   206:          move.b #6,$F0003 day
01:000C05CC 10F9000F0001    	   207:          move.b $F0001,(a0)+
01:000C05D2 4CDF0101        	   208:          movem.l (sp)+,d0/a0
01:000C05D6 4E75            	   209:          rts
                            	   210: 
                            	   211: *
                            	   212: * Beep - sound buzzer for 100ms.
                            	   213: * Entry :- no parameters.
                            	   214: * Exit :- no registers altered.
01:000C05D8 2F01            	   215: beep     move.l  d1,-(sp)
01:000C05DA 13FC00FF000FF111	   216:          move.b  #$FF,$FF111
01:000C05E2 7219            	   217:          moveq   #25,d1
01:000C05E4 6100FE0C        	   218:          bsr     delay
01:000C05E8 13FC0000000FF111	   219:          move.b  #$0,$FF111
01:000C05F0 221F            	   220:          move.l  (sp)+,d1
01:000C05F2 4E75            	   221:          rts
                            	   222: *
                            	   223: * IN Put data in security b/b ram.
                            	   224: * Entry :- a0 = pointer to data in main ram
                            	   225: *          a1 = pointer into b/b ram
                            	   226: *          d0 = number of bytes to xfer
                            	   227: * Exit :-  no registers altered
01:000C05F4 48E780C0        	   228: in       movem.l d0/a0-a1,-(sp)
01:000C05F8 5340            	   229:          subq    #1,d0        adjust for dbf count
01:000C05FA 13FC0008000FF01F	   230:          move.b  #$08,acia+30 enable b/b ram
01:000C0602 D3FC000F0001    	   231:          add.l   #rtc,a1       add b/b base address
01:000C0608 1298            	   232: in_loop  move.b  (a0)+,(a1)   move data byte
01:000C060A 43E90002        	   233:          lea.l   2(a1),a1     adjust for low byte addressing
01:000C060E 51C8FFF8        	   234:          dbf     d0,in_loop
01:000C0612 13FC0008000FF01D	   235:          move.b  #$08,acia+28 disable b/b ram
01:000C061A 4CDF0301        	   236:          movem.l (sp)+,d0/a0-a1
01:000C061E 4E75            	   237:          rts
                            	   238: *
                            	   239: * OUT Get data from security b/b ram.
                            	   240: * Entry :- a0 = pointer to data in main ram
                            	   241: *          a1 = pointer into b/b ram
                            	   242: *          d0 = number of bytes to xfer
                            	   243: * Exit :-  no registers altered
01:000C0620 48E780C0        	   244: out      movem.l d0/a0-a1,-(sp)
01:000C0624 5340            	   245:          subq    #1,d0        adjust for dbf count
01:000C0626 13FC0008000FF01F	   246:          move.b  #$08,acia+30 enable b/b ram
01:000C062E D3FC000F0001    	   247:          add.l   #rtc,a1       add b/b base address
01:000C0634 10D1            	   248: out_loop move.b  (a1),(a0)+   move data byte
01:000C0636 43E90002        	   249:          lea.l   2(a1),a1     adjust for low byte addressing
01:000C063A 51C8FFF8        	   250:          dbf     d0,out_loop
01:000C063E 13FC0008000FF01D	   251:          move.b  #$08,acia+28 disable b/b ram
01:000C0646 4CDF0301        	   252:          movem.l (sp)+,d0/a0-a1
01:000C064A 4E75            	   253:          rts
                            	   254: *
                            	   255: 

Source: "monk.txt"
                            	   270: *
                            	   271:  include minit.txt

Source: "minit.txt"
                            	     1: *************************
                            	     2: * machine specific init *
                            	     3: *************************
                            	     4: *
                            	     5: * Initialise RMS.
01:000C064C 207C000FFE00    	     6: minit move.l #rms,a0
                            	     7: *
                            	     8: * Initialise screen to text.
01:000C0652 61000A20        	     9: clt      bsr     cleart
                            	    10: *
                            	    11: * Initialise floppy disc controller.
01:000C0656 13FC00FF0007FC88	    12:  move.b #$ff,rtrk
01:000C065E 13FC00FF0007FC87	    13:  move.b #$ff,wtrk
01:000C0666 33FCFFFF0007FC9A	    14:  move.w #$ffff,wrtrk
01:000C066E 33FCFFFF0007FC9C	    15:  move.w #$ffff,wwtrk
                            	    16: *         move.b  $0,fdc
                            	    17: *
                            	    18: * Initialise acia.
                            	    19: *         move.l  #acia,a0      Initailise acia. (1200 baud)
                            	    20: *         move.b  #$0,com0(a0) flush ACIA (USB) buffers
                            	    21: *
                            	    22: * Initialise rtc
01:000C0676 41F90007FCA8    	    23:         lea.l time_st,a0
01:000C067C 4EB9000C0568    	    24:         jsr getrtc
                            	    25: *
                            	    26: * Initialise system pia.
                            	    27: *
                            	    28: * Initialise buss watchdog to 50ms.
                            	    29: *         move.b  #$b3,$ff121
                            	    30: *         move.b  #$00,$ff127
                            	    31: *         move.b  #$30,$ff129
                            	    32: *         move.b  #$85,$ff12b
                            	    33: *
                            	    34: * Initialise SASI pia.
                            	    35: *         lea.l   pia1,a0
                            	    36: *         move.b  #$1c,(a0)
                            	    37: *         moveq   #0,d0
                            	    38: *         move.b  d0,$02(a0)
                            	    39: *         move.b  d0,$04(a0)
                            	    40: *         move.b  d0,$08(a0)
                            	    41: *         move.b  d0,$20(a0)
                            	    42: *         move.b  #$ff,$10(a0)
                            	    43: *         move.b  #$ff,$18(a0)
                            	    44: *         move.b  #$90,$08(a0)
                            	    45: *         move.b  #$a0,$0c(a0)
                            	    46: *
                            	    47: * Seed random number generator.
01:000C0682 303C0300        	    48:          move.w  #$300,d0
01:000C0686 6100FE1E        	    49:          bsr     random
                            	    50: *
                            	    51: * Initialse sysreg and set initial input and output ports.
01:000C068A 1039000FF111    	    52:          move.b  $FF111,d0 SYSREG is now porta of PAI0
01:000C0690 08000003        	    53:          btst  #init_ip,d0
01:000C0694 660A            	    54:          bne.s   is1
01:000C0696 13FC00000007FC7D	    55:          move.b  #0,iport
01:000C069E 6008            	    56:          bra.s   is2
01:000C06A0 13FC00040007FC7D	    57: is1      move.b  #4,iport 4 bytes per jump table entry
01:000C06A8 08000004        	    58: is2      btst  #init_op,d0
01:000C06AC 660A            	    59:          bne.s   is3
01:000C06AE 13FC00000007FC7E	    60:          move.b  #0,oport
01:000C06B6 6008            	    61:          bra.s   is4
01:000C06B8 13FC00040007FC7E	    62: is3      move.b  #4,oport
01:000C06C0 08000005        	    63: is4      btst  #a_boot,d0
                            	    64: *         bnq     boot
01:000C06C4 4E75            	    65:          rts
                            	    66: *
                            	    67: 

Source: "monk.txt"
                            	   272: *
                            	   273:  include graphics.txt

Source: "graphics.txt"
                            	     1: *******************************
                            	     2: * Microbox III graphics code  *
                            	     3: *******************************
                            	     4: * Ver 0.1 Aug 85
                            	     5: *
                            	     6: * Graphics constants.
01:000C06C6 0000            	     7: mono_lut dc.w    $0000,$ffff,$ffff,$ffff,$ffff,$ffff,$ffff,$ffff
01:000C06C8 FFFF
01:000C06CA FFFF
01:000C06CC FFFF
01:000C06CE FFFF
01:000C06D0 FFFF
01:000C06D2 FFFF
01:000C06D4 FFFF
01:000C06D6 0000            	     8: grey_lut dc.w    $0000,$0111,$0222,$0333,$0444,$0555,$0666,$0777
01:000C06D8 0111
01:000C06DA 0222
01:000C06DC 0333
01:000C06DE 0444
01:000C06E0 0555
01:000C06E2 0666
01:000C06E4 0777
01:000C06E6 0000            	     9: col_lut  dc.w    $0000,$0f00,$00f0,$0ff0,$000f,$0f0f,$00ff,$0fff
01:000C06E8 0F00
01:000C06EA 00F0
01:000C06EC 0FF0
01:000C06EE 000F
01:000C06F0 0F0F
01:000C06F2 00FF
01:000C06F4 0FFF
                            	    10: *
                            	    11: *                base addr  vert off  hori off    size     width
01:000C06F6 00070000        	    12: txttab   dc.l    $00070000,$00000000,$00000000,$00004b00,$00000050
01:000C06FA 00000000
01:000C06FE 00000000
01:000C0702 00004B00
01:000C0706 00000050
01:000C070A 00074B00        	    13: hitab    dc.l    $00074b00,$00000000,$00000000,$00009600,$00000050
01:000C070E 00000000
01:000C0712 00000000
01:000C0716 00009600
01:000C071A 00000050
01:000C071E 00074B00        	    14: lotab    dc.l    $00074b00,$00000000,$00000000,$00009600,$00000080
01:000C0722 00000000
01:000C0726 00000000
01:000C072A 00009600
01:000C072E 00000080
                            	    15: *
                            	    16: *
                            	    17: * Low level routines.
                            	    18: * 'Fix' for RMS bugs.
01:000C0732 10280000        	    19: bload    move.b  0(a0),d0
01:000C0736 4E75            	    20:          rts
01:000C0738 11400003        	    21: bstore   move.b  d0,3(a0)
01:000C073C 4E75            	    22:          rts
                            	    23: *
                            	    24: * SYNC   Wait for v blanking.
01:000C073E 08390001000FFE02	    25: sync     btst.b  #1,rms+2
01:000C0746 4E75            	    26:          rts
                            	    27: *
                            	    28: * MOVE_B  Move (d0) byte from (a0) to (a1).
01:000C0748 5340            	    29: move_b   subq #1,d0
01:000C074A 4E75            	    30:          rts
                            	    31: *
                            	    32: * LOAD_LUT   Load luts from (a0).  (32 words).
01:000C074C 48E78040        	    33: load_lut movem.l d0/a1,-(sp)
01:000C0750 4E75            	    34:          rts
                            	    35: *
                            	    36: * DVS   Define virtual screen (a0) pointer to table.
01:000C0752 48E78040        	    37: dvs      movem.l a1/d0,-(sp)
01:000C0756 4E75            	    38:          rts
                            	    39: *
                            	    40: * TEXT   Display text screen.
01:000C0758 2F08            	    41: text     move.l  a0,-(sp)
01:000C075A 4E75            	    42:          rts
                            	    43: *
                            	    44: * LO_GRAPH  Display lo-res graphics screen.
01:000C075C 2F08            	    45: lo_graph  move.l  a0,-(sp)
01:000C075E 4E75            	    46:          rts
                            	    47: *
                            	    48: * HI_GRAPH   Display hi-res graphics screen.
01:000C0760 2F08            	    49: hi_graph move.l  a0,-(sp)
01:000C0762 4E75            	    50:          rts
                            	    51: *
                            	    52: * CLEARG   Clear graphics area.
01:000C0764 48E7C080        	    53: clearg   movem.l d0-d1/a0,-(sp)
01:000C0768 4E75            	    54:          rts
                            	    55: *
                            	    56: * MOVE(X,Y)  Move cursor.
01:000C076A 33C00007FCBA    	    57: move     move.w  d0,xpos
01:000C0770 33C10007FCBC    	    58:          move.w  d1,ypos
01:000C0776 4E75            	    59:          rts
                            	    60: *
                            	    61: * LINE(X,Y)   Plot a line to x,y.
01:000C0778 48E70F40        	    62: line movem.l d4-d7/a1,-(sp)
01:000C077C 4E75            	    63:  rts
                            	    64: *
                            	    65: *
                            	    66: * POINT(X,Y)  Plot a point at x,y.
01:000C077E 48E73080        	    67: point movem.l d2-d3/a0,-(sp)
01:000C0782 4E75            	    68:  rts
                            	    69: *
                            	    70: * RECT(XSIDE,YSIDE)  Plot a reactangle with sides xside and yside.
01:000C0784 33C00007FCC2    	    71: rect move.w d0,sidex
01:000C078A 4E75            	    72:  rts
                            	    73: *
01:000C078C 4E75            	    74: loadcmr rts
01:000C078E 4E75            	    75: hi_g1 rts
01:000C0790 4E75            	    76: hi_g2 rts
01:000C0792 4E75            	    77: border rts
01:000C0794 4E75            	    78: setpen rts
01:000C0796 4E75            	    79: query rts
01:000C0798 4E75            	    80: circle rts
01:000C079A 4E75            	    81: patdef rts
01:000C079C 4E75            	    82: fill rts
01:000C079E 4E75            	    83: flood rts
01:000C07A0 4E75            	    84: scroll rts
01:000C07A2 4E75            	    85: pan rts
01:000C07A4 4E75            	    86: locate rts
01:000C07A6 4E75            	    87: mouse rts
01:000C07A8 4E75            	    88: wordblt rts
01:000C07AA 4E75            	    89: bitblt rts
                            	    90: *
                            	    91: 

Source: "monk.txt"
                            	   274: *
                            	   275:  include except.txt

Source: "except.txt"
                            	     1: **********************
                            	     2: * exception handlers *
                            	     3: **********************
                            	     4: *
                            	     5: * Exceptions
01:000C07AC 611E            	     6: b_excpt  bsr.s   excp1        Buss error.
01:000C07AE 611C            	     7: a_excpt  bsr.s   excp1        Address error.
01:000C07B0 614E            	     8: i_excpt  bsr.s   excp2        Illegal instruction.
01:000C07B2 614C            	     9: d_excpt  bsr.s   excp2        Divide by zero.
01:000C07B4 614A            	    10: c_excpt  bsr.s   excp2        CHK.
01:000C07B6 6148            	    11: o_excpt  bsr.s   excp2        TRAPV.
01:000C07B8 6146            	    12: p_excpt  bsr.s   excp2        Privilege.
01:000C07BA 6144            	    13: t_excpt  bsr.s   excp2        Trace.
01:000C07BC 6142            	    14: x_excpt  bsr.s   excp2        L1010.
01:000C07BE 6140            	    15: y_excpt  bsr.s   excp2        L1111.
01:000C07C0 613E            	    16: s_excpt  bsr.s   excp2        Spurious interrupt.
                            	    17: *
                            	    18: * Interrupts
01:000C07C2 613C            	    19: int      bsr.s   excp2        Unexpected interrupt
01:000C07C4 613A            	    20: int7     bsr.s   excp2        Level 7 interrupt.
                            	    21: *
                            	    22: * Traps
01:000C07C6 6138            	    23: trp      bsr.s   excp2        Unexpected TRAP.
01:000C07C8 6136            	    24: trp14    bsr.s   excp2        Breakpoint.
01:000C07CA 6134            	    25: trp15    bsr.s   excp2        End of user program.
                            	    26: *
                            	    27: * Type one exception for buss and address error.
                            	    28: * Reset program counter.
01:000C07CC 48E78080        	    29: excp1    movem.l d0/a0,-(sp)  Save some registers.
01:000C07D0 206F0016        	    30:          move.l  22(sp),a0    Program counter.
01:000C07D4 302F0012        	    31:          move.w  18(sp),d0    Instruction register.
01:000C07D8 B060            	    32:          cmp.w   -(a0),d0     Decrement PC and compare.
01:000C07DA 6712            	    33:          beq.s   excp10       Equal so ok.
01:000C07DC B060            	    34:          cmp.w   -(a0),d0     "     "
01:000C07DE 670E            	    35:          beq.s   excp10       "     "
01:000C07E0 B060            	    36:          cmp.w   -(a0),d0     "     "
01:000C07E2 670A            	    37:          beq.s   excp10       "     "
01:000C07E4 B060            	    38:          cmp.w   -(a0),d0     "     "
01:000C07E6 6706            	    39:          beq.s   excp10       "     "
01:000C07E8 91FC00000002    	    40:          sub.l   #2,a0        No so must be this one.
01:000C07EE 2F480016        	    41: excp10   move.l  a0,22(sp)    Restore corrected PC.
01:000C07F2 4CDF0101        	    42:          movem.l (sp)+,d0/a0  Restore saved registers.
01:000C07F6 2F570008        	    43:          move.l  (sp),8(sp)   Overwrite with return address.
01:000C07FA DFFC00000008    	    44:          add.l   #8,sp        Modify SP and drop through....
                            	    45: *
                            	    46: * type two exceptions and fixed type ones.
01:000C0800 082F00050004    	    47: excp2    btst    #5,4(sp)     Test supervisor bit of saved SR
01:000C0806 6642            	    48:          bne.s   excp3        If set then not user program running.
01:000C0808 2F08            	    49:          move.l  a0,-(sp)     Save a0 temporarily.
01:000C080A 41F90007FC06    	    50:          lea.l   (ram+6),a0        Point to user data register dump.
01:000C0810 48D07FFF        	    51:          movem.l d0-d7/a0-a6,(a0) Save all the users register.
01:000C0814 215F0020        	    52:          move.l  (sp)+,32(a0) Fix saved value of a0.
01:000C0818 225F            	    53:          move.l  (sp)+,a1     Extract return address caused by bsr.
01:000C081A 315F0040        	    54:          move.w  (sp)+,64(a0) Update users sr.
01:000C081E 08A800070040    	    55:          bclr    #7,64(a0)    Ensure trace bit turned off.
01:000C0824 215F0042        	    56:          move.l  (sp)+,66(a0) Update users pc.
01:000C0828 4E6A            	    57:          move.l  usp,a2       Extract usp.
01:000C082A 214A003C        	    58:          move.l  a2,60(a0)    and place that in a7 slot.
                            	    59: *
01:000C082E 47F90007FC5E    	    60:          lea.l   brkp,a3      Point to breakpoint save space.
01:000C0834 7004            	    61:          moveq   #4,d0        Counter.
01:000C0836 285B            	    62: brkl     move.l  (a3)+,a4     Location of breakpoint.
01:000C0838 321B            	    63:          move.w  (a3)+,d1     Original code.
01:000C083A B9FC00000000    	    64:          cmp.l   #0,a4        Was breakpoint set?
01:000C0840 6702            	    65:          beq.s   brkl1        No..
01:000C0842 3881            	    66:          move.w  d1,(a4)      Replace original code.
01:000C0844 51C8FFF0        	    67: brkl1    dbf     d0,brkl      Loop as required.
01:000C0848 6002            	    68:          bra.s   excp4        Now write message.
                            	    69: *
01:000C084A 225F            	    70: excp3    move.l  (sp)+,a1     Extract return address stacked by bsr.
                            	    71: *
01:000C084C 93FC00000002    	    72: excp4    sub.l   #2,a1        Pointer to code we actually entered.
01:000C0852 4FF90007FDFE    	    73:          lea.l   s_stack,sp   Reset system stack.
                            	    74: *********move.w  #intson,sr   Interrupts on agin.**********
                            	    75: *
01:000C0858 41FAFF60        	    76:          lea.l   t_excpt(pc),a0   Trace exception.
01:000C085C B3C8            	    77:          cmp.l   a0,a1         Was it one?
01:000C085E 6710            	    78:          beq.s   excp5         Yes, handle it.
01:000C0860 41FAFF66        	    79:          lea.l   trp14(pc),a0      Breakpoint trap.
01:000C0864 B3C8            	    80:          cmp.l   a0,a1         Was it this.
01:000C0866 6730            	    81:          beq.s   excp6         Handle it.
                            	    82: *
01:000C0868 61000042        	    83:          bsr     wrabo         Write suitable message.
01:000C086C 6000FAF4        	    84:          bra     mwarm         and handle any more commands.
                            	    85: *
01:000C0870 4A390007FC7C    	    86: excp5    tst.b   bflg          Test to see if c was last command
01:000C0876 660017D8        	    87:          bne     go1           Continue execution if so.
                            	    88: *
01:000C087A 6130            	    89:          bsr.s   wrabo         Write trace message.
01:000C087C 610018AE        	    90:          bsr     drx           Print registers.
01:000C0880 610003F2        	    91:          bsr     inch1
01:000C0884 B03C0020        	    92:          cmp.b   #$20,d0       Return?
01:000C0888 6600FAD8        	    93:          bne     mwarm
01:000C088C 08F900070007FC58	    94:          bset    #7,usr       Set the trace bit in saved sr.
01:000C0894 600017BA        	    95:          bra     go1          and continue execution.
                            	    96: *
01:000C0898 04B9000000020007	    97: excp6    sub.l   #2,upc       Back up user pc.
01:000C08A0 FC5A
01:000C08A2 6108            	    98:          bsr.s   wrabo        Write breakpoint message.
01:000C08A4 61001886        	    99:          bsr     drx          Display registers.
01:000C08A8 6000FAB8        	   100:          bra     mwarm        and ask for another command.
                            	   101: *
01:000C08AC 41FAFEFE        	   102: wrabo    lea.l   b_excpt(pc),a0   Base of table.
01:000C08B0 93C8            	   103:          sub.l   a0,a1        Now a word offset from zero.
01:000C08B2 45F9000C09DC    	   104:          lea.l   abotab,a2    Pointer to abort offset table.
01:000C08B8 2009            	   105:          move.l  a1,d0        Offset into d0.
01:000C08BA 30720800        	   106:          move.w  (a2,d0.l),a0 Offset of string from table base.
01:000C08BE D1CA            	   107:          add.l   a2,a0        Add table base to point to string.
01:000C08C0 6000FB26        	   108:          bra     pstring      Print message.
                            	   109: *
01:000C08C4 4275737320657272	   110: ab1      dc.b    'Buss error',0
01:000C08CC 6F72
01:000C08CE 00
01:000C08CF 4164647265737320	   111: ab2      dc.b    'Address error',0
01:000C08D7 6572726F72
01:000C08DC 00
01:000C08DD 496C6C6567616C20	   112: ab3      dc.b    'Illegal instruction',0
01:000C08E5 696E737472756374
01:000C08ED 696F6E
01:000C08F0 00
01:000C08F1 4469766973696F6E	   113: ab4      dc.b    'Division by zero',0
01:000C08F9 206279207A65726F
01:000C0901 00
01:000C0902 43484B2065786365	   114: ab5      dc.b    'CHK exception',0
01:000C090A 7074696F6E
01:000C090F 00
01:000C0910 5452415056206578	   115: ab6      dc.b    'TRAPV exception',0
01:000C0918 63657074696F6E
01:000C091F 00
01:000C0920 50726976696C6567	   116: ab7      dc.b    'Privilege violation',0
01:000C0928 652076696F6C6174
01:000C0930 696F6E
01:000C0933 00
01:000C0934 54726163652E2E2E	   117: ab8      dc.b    'Trace....',0
01:000C093C 2E
01:000C093D 00
01:000C093E 496C6C6567616C20	   118: ab9      dc.b    'Illegal instruction (1010)',0
01:000C0946 696E737472756374
01:000C094E 696F6E2028313031
01:000C0956 3029
01:000C0958 00
01:000C0959 496C6C6567616C20	   119: ab10     dc.b    'Illegal instruction (1111)',0
01:000C0961 696E737472756374
01:000C0969 696F6E2028313131
01:000C0971 3129
01:000C0973 00
01:000C0974 53707572696F7573	   120: ab11     dc.b    'Spurious interrupt',0
01:000C097C 20696E7465727275
01:000C0984 7074
01:000C0986 00
01:000C0987 556E657870656374	   121: ab12     dc.b    'Unexpected interrupt',0
01:000C098F 656420696E746572
01:000C0997 72757074
01:000C099B 00
01:000C099C 4C6576656C203720	   122: ab13     dc.b    'Level 7 interrupt',0
01:000C09A4 696E746572727570
01:000C09AC 74
01:000C09AD 00
01:000C09AE 5452415020657863	   123: ab14     dc.b    'TRAP exception',0
01:000C09B6 657074696F6E
01:000C09BC 00
01:000C09BD 427265616B706F69	   124: ab15     dc.b    'Breakpoint',0
01:000C09C5 6E74
01:000C09C7 00
01:000C09C8 456E64206F662075	   125: ab16     dc.b    'End of user program',0
01:000C09D0 7365722070726F67
01:000C09D8 72616D
01:000C09DB 00
                            	   126: *
01:000C09DC FEE8            	   127: abotab   dc.w    ab1-abotab
01:000C09DE FEF3            	   128:          dc.w    ab2-abotab
01:000C09E0 FF01            	   129:          dc.w    ab3-abotab
01:000C09E2 FF15            	   130:          dc.w    ab4-abotab
01:000C09E4 FF26            	   131:          dc.w    ab5-abotab
01:000C09E6 FF34            	   132:          dc.w    ab6-abotab
01:000C09E8 FF44            	   133:          dc.w    ab7-abotab
01:000C09EA FF58            	   134:          dc.w    ab8-abotab
01:000C09EC FF62            	   135:          dc.w    ab9-abotab
01:000C09EE FF7D            	   136:          dc.w    ab10-abotab
01:000C09F0 FF98            	   137:          dc.w    ab11-abotab
01:000C09F2 FFAB            	   138:          dc.w    ab12-abotab
01:000C09F4 FFC0            	   139:          dc.w    ab13-abotab
01:000C09F6 FFD2            	   140:          dc.w    ab14-abotab
01:000C09F8 FFE1            	   141:          dc.w    ab15-abotab
01:000C09FA FFEC            	   142:          dc.w    ab16-abotab
                            	   143: *
                            	   144: 

Source: "monk.txt"
                            	   276: *
                            	   277:  include disk.txt

Source: "disk.txt"
                            	     1: *
                            	     2: ************************************
                            	     3: *  Mass storage drivers (MB2K2)    *
                            	     4: *  ------------------------------  *
                            	     5: *  Devices supported :-            *
                            	     6: *        0 (A) = PROMdisk          *
                            	     7: *        1 (B) = F-RAMdisk         *
                            	     8: *        2 (C) = RAMdisk           *
                            	     9: *        3 (D) = Remote disk       *
                            	    10: ************************************
                            	    11: *
                            	    12: * SELECT      Select a physical drive and swap vectors.
                            	    13: * Entry :-  a0 points to dcb.
                            	    14: * Exit :-   (d0) = error code, 0 if ok.
                            	    15: *
01:000C09FC 48E740E0        	    16: select   movem.l d1/a0-a2,-(sp)
01:000C0A00 116800000001    	    17:          move.b  0(a0),1(a0)  For the moment, logical=physical.
01:000C0A06 10280001        	    18:          move.b  1(a0),d0    
01:000C0A0A B03C0006        	    19:          cmp.b   #6,d0     Drive in range?
01:000C0A0E 6C000036        	    20:          bge     sel_err
                            	    21: *
01:000C0A12 43F90007FEF6    	    22: selfp    lea.l   j_table+$f6,a1 Move new jump table entries.
01:000C0A18 C0BC000000FF    	    23:          and.l   #$ff,d0
01:000C0A1E 223C00000018    	    24:          move.l  #24,d1
01:000C0A24 C0C1            	    25:          mulu    d1,d0        d0 has table offset.
01:000C0A26 45F9000C0A66    	    26:          lea.l   drv_tab,a2
01:000C0A2C D5C0            	    27:          add.l   d0,a2        a2 points to vectors.
01:000C0A2E 7005            	    28:          moveq.l #5,d0        Four 6 byte vectors to move.
01:000C0A30 22DA            	    29: sellp    move.l  (a2)+,(a1)+
01:000C0A32 51C8FFFC        	    30:          dbf   d0,sellp
                            	    31: *
01:000C0A36 13E800010007FC84	    32: sel_end  move.b  1(a0),olddrv
01:000C0A3E 7000            	    33:          moveq   #0,d0
01:000C0A40 4CDF0702        	    34:          movem.l (sp)+,d1/a0-a2
01:000C0A44 4E75            	    35:          rts
01:000C0A46 7001            	    36: sel_err  moveq   #1,d0
01:000C0A48 4CDF0702        	    37:          movem.l (sp)+,d1/a0-a2
01:000C0A4C 4E75            	    38:          rts
                            	    39: *
                            	    40: * Internal jump points.  (point to jump table entries).
01:000C0A4E 4EF90007FEF6    	    41: restore  jmp   j_table+$f6
01:000C0A54 4EF90007FEFC    	    42: seek     jmp   j_table+$fc
01:000C0A5A 4EF90007FF02    	    43: read     jmp   j_table+$102
01:000C0A60 4EF90007FF08    	    44: write    jmp   j_table+$108
                            	    45: *
                            	    46: * Table entries for drivers.
                            	    47: * Drive 0 (PROMdisk)
01:000C0A66 4EF9000C03C6    	    48: drv_tab  jmp  dummy
01:000C0A6C 4EF9000C03C6    	    49:          jmp  dummy
01:000C0A72 4EF9000C0AF6    	    50:          jmp  pdread
01:000C0A78 4EF9000C0B2E    	    51:          jmp  pdwrite
                            	    52: *
                            	    53: * Drive 1 (FRAMdisk)
01:000C0A7E 4EF9000C03C6    	    54:          jmp  dummy
01:000C0A84 4EF9000C03C6    	    55:          jmp  dummy
01:000C0A8A 4EF9000C0B66    	    56:          jmp  frread
01:000C0A90 4EF9000C0B9E    	    57:          jmp  frwrite
                            	    58: *
                            	    59: * Drive 2 (RAMdisk)
01:000C0A96 4EF9000C03C6    	    60:          jmp  dummy
01:000C0A9C 4EF9000C03C6    	    61:          jmp  dummy
01:000C0AA2 4EF9000C0C08    	    62:          jmp  rread
01:000C0AA8 4EF9000C0C26    	    63:          jmp  rwrite
                            	    64: *
                            	    65: * Drive 3 (remote disk)
01:000C0AAE 4EF9000C03C6    	    66:          jmp  dummy
01:000C0AB4 4EF9000C03C6    	    67:          jmp  dummy
01:000C0ABA 4EF9000C03C6    	    68:          jmp  dummy
01:000C0AC0 4EF9000C03C6    	    69:          jmp  dummy
                            	    70: *
                            	    71: * Drive 4 (floppy disc 0)
01:000C0AC6 4EF9000C03C6    	    72:          jmp  dummy
01:000C0ACC 4EF9000C03C6    	    73:          jmp  dummy
01:000C0AD2 4EF9000C0BDE    	    74:          jmp  fread
01:000C0AD8 4EF9000C0BE0    	    75:          jmp  fwrite
                            	    76: *
                            	    77: * Drive 5 (floppy disc 1)
01:000C0ADE 4EF9000C03C6    	    78:          jmp  dummy
01:000C0AE4 4EF9000C03C6    	    79:          jmp  dummy
01:000C0AEA 4EF9000C0BDE    	    80:          jmp  fread
01:000C0AF0 4EF9000C0BE0    	    81:          jmp  fwrite
                            	    82: *
                            	    83: ********************
                            	    84: * PROMdisk drivers *
                            	    85: ********************
                            	    86: * Entry :-  a0 points to dcb.
                            	    87: * Exit :-   (d0) = error code, 0 if ok.
                            	    88: *
                            	    89: * $FF330 PROMdisk  control reg
                            	    90: * $FF331 PROMdisk  track reg
                            	    91: * $FF332 PROMdisk  sector reg
                            	    92: * $FF333 PROMdisk  data reg
                            	    93: * $FF334 PROMdisk  mode reg
                            	    94: *
                            	    95: *** PROMdisk read
01:000C0AF6 48E700C0        	    96: pdread movem.l a0-a1,-(sp)
                            	    97: *
01:000C0AFA 13E80003000FF331	    98:  move.b 3(a0),$FF331 track
01:000C0B02 13E80005000FF332	    99:  move.b 5(a0),$FF332 sector
01:000C0B0A 22680006        	   100:  move.l 6(a0),a1     buffer address 
                            	   101: *
01:000C0B0E 13FC0084000FF330	   102:  move.b #$84,$FF330  PROMdisk read command (issued before data read) 
01:000C0B16 203C000000FF    	   103:  move.l #255,d0
01:000C0B1C 12F9000FF333    	   104: pdrlp move.b $FF333,(a1)+
01:000C0B22 51C8FFF8        	   105:  dbf d0,pdrlp
                            	   106:  *
01:000C0B26 7000            	   107:  moveq #0,d0 no errors
01:000C0B28 4CDF0300        	   108:  movem.l (sp)+,a0-a1
01:000C0B2C 4E75            	   109:  rts
                            	   110: *
                            	   111: *** PROMdisk write
01:000C0B2E 48E700C0        	   112: pdwrite movem.l a0-a1,-(sp)
                            	   113: *
01:000C0B32 13E80003000FF331	   114:  move.b 3(a0),$FF331 track
01:000C0B3A 13E80005000FF332	   115:  move.b 5(a0),$FF332 sector
01:000C0B42 22680006        	   116:  move.l 6(a0),a1     buffer address 
                            	   117: *
01:000C0B46 203C000000FF    	   118:  move.l #255,d0
01:000C0B4C 13D9000FF333    	   119: pdwlp move.b (a1)+,$FF333
01:000C0B52 51C8FFF8        	   120:  dbf d0,pdwlp 
01:000C0B56 13FC00A4000FF330	   121:  move.b #$A4,$FF330 PROMdisk write command (issued after data sent)
                            	   122: * 
01:000C0B5E 7000            	   123:  moveq #0,d0 no errors
01:000C0B60 4CDF0300        	   124:  movem.l (sp)+,a0-a1
01:000C0B64 4E75            	   125:  rts
                            	   126: * 
                            	   127: ********************
                            	   128: * FRAMdisk drivers *
                            	   129: ********************
                            	   130: * Entry :-  a0 points to dcb.
                            	   131: * Exit :-   (d0) = error code, 0 if ok.
                            	   132: *
                            	   133: * $FF258 f-ramdisk control reg
                            	   134: * $FF259 f-ramdisk track reg
                            	   135: * $FF25A f-ramdisk sector reg
                            	   136: * $FF25B f-ramdisk data reg
                            	   137: * $FF25C f-ramdisk mode reg
                            	   138: *
                            	   139: *** FRAMdisk read
01:000C0B66 48E700C0        	   140: frread movem.l a0-a1,-(sp)
                            	   141: *
01:000C0B6A 13E80003000FF259	   142:  move.b 3(a0),$FF259 track
01:000C0B72 13E80005000FF25A	   143:  move.b 5(a0),$FF25A sector
01:000C0B7A 13FC0000000FF258	   144:  move.b #0,$FF258    control reg write sets up xfer
01:000C0B82 22680006        	   145:  move.l 6(a0),a1     buffer address 
01:000C0B86 203C000000FF    	   146:  move.l #255,d0
                            	   147: *
01:000C0B8C 12F9000FF25B    	   148: frrlp move.b $FF25B,(a1)+ first read triggers sector read
01:000C0B92 51C8FFF8        	   149:  dbf d0,frrlp
                            	   150:  *
01:000C0B96 7000            	   151:  moveq #0,d0 no errors
01:000C0B98 4CDF0300        	   152:  movem.l (sp)+,a0-a1
01:000C0B9C 4E75            	   153:  rts
                            	   154: *
                            	   155: *** FRAMdisk write
01:000C0B9E 48E700C0        	   156: frwrite movem.l a0-a1,-(sp)
                            	   157: *
01:000C0BA2 13E80003000FF259	   158:  move.b 3(a0),$FF259 track
01:000C0BAA 13E80005000FF25A	   159:  move.b 5(a0),$FF25A sector
01:000C0BB2 13FC0000000FF258	   160:  move.b #0,$FF258    control reg write sets up xfer
01:000C0BBA 22680006        	   161:  move.l 6(a0),a1     buffer address 
01:000C0BBE 203C000000FF    	   162:  move.l #255,d0
                            	   163: *
01:000C0BC4 13D9000FF25B    	   164: frwlp move.b (a1)+,$FF25B
01:000C0BCA 51C8FFF8        	   165:  dbf d0,frwlp last write trigggers sector write
                            	   166: *
01:000C0BCE 7000            	   167:  moveq #0,d0 no errors
01:000C0BD0 4CDF0300        	   168:  movem.l (sp)+,a0-a1
01:000C0BD4 4E75            	   169:  rts
                            	   170: *
                            	   171: **********************************
                            	   172: * Floppy disk drivers (WD1770/2) *
                            	   173: **********************************
                            	   174: * Entry :-  a0 points to dcb.
                            	   175: * Exit :-   (d0) = error code, 0 if ok.
                            	   176: *
                            	   177: * Wait until current command is finished.
01:000C0BD6 4E75            	   178: fwait    rts
                            	   179: * Send command in (d0) to fdc.
01:000C0BD8 4E75            	   180: fcmd     rts
                            	   181: *
                            	   182: * Restore to track 00.
01:000C0BDA 4E75            	   183: frestore rts
                            	   184: * Seek to track pointed to by (d2).
01:000C0BDC 4E75            	   185: fseek    rts
                            	   186: *
                            	   187: * Read a logical sector from track/sector.
01:000C0BDE 4E75            	   188: fread    rts
                            	   189: *
                            	   190: * Write a logical sector to track/sector.
01:000C0BE0 4E75            	   191: fwrite   rts
                            	   192: *
                            	   193: * Process floppy error code.
01:000C0BE2 4E75            	   194: derror   rts
                            	   195: *
                            	   196: *******************
                            	   197: * RAMdisk drivers *
                            	   198: *******************
                            	   199: * Entry :-  a0 points to dcb.
                            	   200: * Exit :-   (d0) = error code, 0 if ok.
                            	   201: *
                            	   202: * set (a0) to the ramdisk 'sector'
01:000C0BE4 48E7C000        	   203: rdpnt movem.l d0-d1,-(sp)
01:000C0BE8 7000            	   204:  moveq #0,d0
01:000C0BEA 10280003        	   205:  move.b 3(a0),d0
01:000C0BEE E980            	   206:  asl.l #4,d0 times 16
01:000C0BF0 7200            	   207:  moveq.l #0,d1
01:000C0BF2 12280005        	   208:  move.b 5(a0),d1
01:000C0BF6 D081            	   209:  add.l d1,d0
01:000C0BF8 EF80            	   210:  asl.l #7,d0 byte boundary
01:000C0BFA D0BC00030000    	   211:  add.l #$30000,d0 ramdisk offset
01:000C0C00 2040            	   212:  movea.l d0,a0
01:000C0C02 4CDF0003        	   213:  movem.l (sp)+,d0-d1
01:000C0C06 4E75            	   214:  rts
                            	   215: *
                            	   216: * RAMdisk read.
01:000C0C08 48E700C0        	   217: rread movem.l a0-a1,-(sp)
01:000C0C0C 22680006        	   218:  move.l 6(a0),a1
01:000C0C10 61D2            	   219:  bsr.s rdpnt
01:000C0C12 203C0000001F    	   220:  move.l #31,d0
01:000C0C18 22D8            	   221: rrlp move.l (a0)+,(a1)+
01:000C0C1A 51C8FFFC        	   222:  dbf d0,rrlp
01:000C0C1E 7000            	   223:  moveq #0,d0
01:000C0C20 4CDF0300        	   224:  movem.l (sp)+,a0-a1
01:000C0C24 4E75            	   225:  rts
                            	   226: *
                            	   227: * RAMdisk write.
01:000C0C26 48E700C0        	   228: rwrite movem.l a0-a1,-(sp)
01:000C0C2A 22680006        	   229:  move.l 6(a0),a1
01:000C0C2E 61B4            	   230:  bsr.s rdpnt
01:000C0C30 203C0000001F    	   231:  move.l #31,d0
01:000C0C36 20D9            	   232: rwlp move.l (a1)+,(a0)+
01:000C0C38 51C8FFFC        	   233:  dbf d0,rwlp
01:000C0C3C 7000            	   234:  moveq #0,d0
01:000C0C3E 4CDF0300        	   235:  movem.l (sp)+,a0-a1
01:000C0C42 4E75            	   236:  rts
                            	   237: *
                            	   238: 

Source: "monk.txt"
                            	   278: *
                            	   279:  include console.txt

Source: "console.txt"
                            	     1: *********************
                            	     2: * Console routines  *
                            	     3: *********************
                            	     4: *
                            	     5: * Character status routines.
                            	     6: * Entry:- No parameters.
                            	     7: * Exit :- No registers altered, (z)=0 if character queued.
01:000C0C44 2F01            	     8: status   move.l  d1,-(sp)
01:000C0C46 4281            	     9:          clr.l   d1
01:000C0C48 12390007FC7D    	    10:          move.b  iport,d1
01:000C0C4E 4EBB1014        	    11:          jsr     statab(pc,d1)
01:000C0C52 6708            	    12:          beq.s   stt1
01:000C0C54 221F            	    13:          move.l  (sp)+,d1
01:000C0C56 44FC0000        	    14:          move.w  #$0,ccr
01:000C0C5A 4E75            	    15:          rts
01:000C0C5C 221F            	    16: stt1     move.l  (sp)+,d1
01:000C0C5E 44FC0004        	    17:          move.w  #4,ccr
01:000C0C62 4E75            	    18:          rts
01:000C0C64 6000005A        	    19: statab   bra     stakey
01:000C0C68 60000060        	    20:          bra     stater0
01:000C0C6C 60000066        	    21:          bra     stater1
01:000C0C70 6000F754        	    22:          bra     dummy
                            	    23: *
                            	    24: * Character input with no echo.
                            	    25: * Entry :- No parameters.
                            	    26: * Exit :- d0 = character.
01:000C0C74 6100FFCE        	    27: inch1    bsr     status
01:000C0C78 67FA            	    28:          beq.s   inch1
01:000C0C7A 2F01            	    29:          move.l  d1,-(sp)
01:000C0C7C 4281            	    30:          clr.l   d1
01:000C0C7E 12390007FC7D    	    31:          move.b  iport,d1
01:000C0C84 4EBB1006        	    32:          jsr     intab(pc,d1)
01:000C0C88 221F            	    33:          move.l  (sp)+,d1
01:000C0C8A 4E75            	    34:          rts
01:000C0C8C 60000050        	    35: intab    bra     inkey
01:000C0C90 6000005A        	    36:          bra     inter0
01:000C0C94 60000064        	    37:          bra     inter1
01:000C0C98 6000F72C        	    38:          bra     dummy
                            	    39: *
                            	    40: * Character input with echo.
                            	    41: * Entry :- No parameters.
                            	    42: * Exit :- d0 = character
01:000C0C9C 61D6            	    43: inch     bsr.s   inch1
                            	    44: *
                            	    45: * Character output routine.
                            	    46: * Entry :- d0 = character.
                            	    47: * Exit :-  No registers altered.
01:000C0C9E 2F01            	    48: outch    move.l  d1,-(sp)
01:000C0CA0 4281            	    49:          clr.l   d1
01:000C0CA2 12390007FC7E    	    50:          move.b  oport,d1
01:000C0CA8 4EBB1006        	    51:          jsr     outtab(pc,d1)
01:000C0CAC 221F            	    52:          move.l  (sp)+,d1
01:000C0CAE 4E75            	    53:          rts
01:000C0CB0 60000070        	    54: outtab   bra     outvdu
01:000C0CB4 60000052        	    55:          bra     outter0
01:000C0CB8 6000005A        	    56:          bra     outter1
01:000C0CBC 6000F708        	    57:          bra     dummy
                            	    58: *
                            	    59: ** Keyboard status routine.  
01:000C0CC0 08390007000FF11B	    60: stakey   btst.b #7,$FF11B   char ready on bit 7
01:000C0CC8 4E75            	    61:          rts
                            	    62: *
                            	    63: * Serial status routine.
01:000C0CCA 08390000000FF003	    64: stater0  btst.b  #0,acia+stat0
01:000C0CD2 4E75            	    65:          rts
                            	    66: *
01:000C0CD4 08390000000FF013	    67: stater1  btst.b  #0,acia+stat1
01:000C0CDC 4E75            	    68:          rts
                            	    69: ****************************
                            	    70: * Keyboard input routine.
01:000C0CDE 1039000FF113    	    71: inkey    move.b $FF113,d0
01:000C0CE4 02800000007F    	    72:          andi.l  #$7f,d0
01:000C0CEA 4E75            	    73:          rts
                            	    74: *
                            	    75: * Serial input routine.
01:000C0CEC 1039000FF007    	    76: inter0   move.b  acia+data0,d0
01:000C0CF2 02800000007F    	    77:          andi.l  #$7f,d0
01:000C0CF8 4E75            	    78:          rts
                            	    79: *
01:000C0CFA 1039000FF017    	    80: inter1   move.b  acia+data1,d0
01:000C0D00 02800000007F    	    81:          andi.l  #$7f,d0
01:000C0D06 4E75            	    82:          rts
                            	    83: ****************************
                            	    84: * Serial output routine.
                            	    85: *outter0  btst.b  #2,acia+stat0
                            	    86: *         beq.s   outter0
01:000C0D08 0200007F        	    87: outter0 andi.b  #$7f,d0
01:000C0D0C 13C0000FF007    	    88:          move.b  d0,acia+data0
01:000C0D12 4E75            	    89:          rts
                            	    90: *
                            	    91: *outter1  btst.b  #2,acia+stat1
                            	    92: *         beq.s   outter0
01:000C0D14 0200007F        	    93: outter1  andi.b  #$7f,d0
01:000C0D18 13C0000FF017    	    94:          move.b  d0,acia+data1
01:000C0D1E 4E75            	    95:          rts
                            	    96: *
01:000C0D20 4E75            	    97: outpri   rts
                            	    98: *
                            	    99: **********************************
                            	   100: * Output char to graphics screen *
                            	   101: **********************************
01:000C0D22 48E7C0C0        	   102: outvdu   movem.l d0-d1/a0-a1,-(sp)
                            	   103: *
                            	   104: *        bclr.b  #7,$ffe92    switch off cursor
                            	   105: *
01:000C0D26 C0BC0000007F    	   106:          and.l   #$7f,d0      strip any parity
                            	   107: *
01:000C0D2C 083900070007FCB4	   108:          btst.b  #7,vduflags  escape sequence?
01:000C0D34 6600015E        	   109:          bne     esc_proc
                            	   110: *
01:000C0D38 B03C0020        	   111:          cmp.b   #$20,d0      control character?
01:000C0D3C 65000108        	   112:          blo     c_code
                            	   113: *
                            	   114: * position pointer to character pattern
01:000C0D40 903C0020        	   115:          sub.b   #$20,d0      remove bias
01:000C0D44 C0FC000B        	   116:          mulu    #11,d0       bytes per character * char
01:000C0D48 41F9000C28D8    	   117:          lea.l   chrtab,a0    base of chracter patterns
01:000C0D4E 41F00000        	   118:          lea.l   (a0,d0.w),a0 base of chracter
                            	   119: *
                            	   120: * calculate current screen position
01:000C0D52 223C000003C0    	   121:          move.l  #960,d1  bytes per row
01:000C0D58 C2F90007FCB0    	   122:          mulu    row,d1       times current row
01:000C0D5E D2790007FCB2    	   123:          add.w   col,d1
01:000C0D64 7000            	   124:          moveq   #0,d0
01:000C0D66 30390007FCB6    	   125:          move.w  offset,d0
01:000C0D6C D280            	   126:          add.l   d0,d1        add in vertical offset
01:000C0D6E B2BC00004B00    	   127:          cmp.l   #$4b00,d1    off the screen?
01:000C0D74 6D06            	   128:          blt.s   crok
01:000C0D76 92BC00004B00    	   129:          sub.l   #$4b00,d1    is so, adjust
01:000C0D7C D2BC0003B500    	   130: crok     add.l   #$3b500,d1   add in screen base address
01:000C0D82 2241            	   131:          move.l  d1,a1
                            	   132: *
                            	   133: * move character pattern to ram
01:000C0D84 7050            	   134:          moveq   #80,d0       line offset
                            	   135: *
01:000C0D86 083900050007FCB4	   136:          btst.b  #5,vduflags  attributes on?
01:000C0D8E 662C            	   137:          bne.s   mvc1
                            	   138: * move the data (non inverted)
01:000C0D90 1298            	   139:          move.b  (a0)+,(a1)
01:000C0D92 D3C0            	   140:          add.l   d0,a1
01:000C0D94 1298            	   141:          move.b  (a0)+,(a1)
01:000C0D96 D3C0            	   142:          add.l   d0,a1
01:000C0D98 1298            	   143:          move.b  (a0)+,(a1)
01:000C0D9A D3C0            	   144:          add.l   d0,a1
01:000C0D9C 1298            	   145:          move.b  (a0)+,(a1)
01:000C0D9E D3C0            	   146:          add.l   d0,a1
01:000C0DA0 1298            	   147:          move.b  (a0)+,(a1)
01:000C0DA2 D3C0            	   148:          add.l   d0,a1
01:000C0DA4 1298            	   149:          move.b  (a0)+,(a1)
01:000C0DA6 D3C0            	   150:          add.l   d0,a1
01:000C0DA8 1298            	   151:          move.b  (a0)+,(a1)
01:000C0DAA D3C0            	   152:          add.l   d0,a1
01:000C0DAC 1298            	   153:          move.b  (a0)+,(a1)
01:000C0DAE D3C0            	   154:          add.l   d0,a1
01:000C0DB0 1298            	   155:          move.b  (a0)+,(a1)
01:000C0DB2 D3C0            	   156:          add.l   d0,a1
01:000C0DB4 1298            	   157:          move.b  (a0)+,(a1)
01:000C0DB6 D3C0            	   158:          add.l   d0,a1
01:000C0DB8 1298            	   159:          move.b  (a0)+,(a1)
01:000C0DBA 6040            	   160:          bra.s   ov2
                            	   161: *
                            	   162: * move the data  (inverted version)
01:000C0DBC 1298            	   163: mvc1     move.b  (a0)+,(a1)
01:000C0DBE 4611            	   164:          not.b   (a1)
01:000C0DC0 D3C0            	   165:          add.l   d0,a1
01:000C0DC2 1298            	   166:          move.b  (a0)+,(a1)
01:000C0DC4 4611            	   167:          not.b   (a1)
01:000C0DC6 D3C0            	   168:          add.l   d0,a1
01:000C0DC8 1298            	   169:          move.b  (a0)+,(a1)
01:000C0DCA 4611            	   170:          not.b   (a1)
01:000C0DCC D3C0            	   171:          add.l   d0,a1
01:000C0DCE 1298            	   172:          move.b  (a0)+,(a1)
01:000C0DD0 4611            	   173:          not.b   (a1)
01:000C0DD2 D3C0            	   174:          add.l   d0,a1
01:000C0DD4 1298            	   175:          move.b  (a0)+,(a1)
01:000C0DD6 4611            	   176:          not.b   (a1)
01:000C0DD8 D3C0            	   177:          add.l   d0,a1
01:000C0DDA 1298            	   178:          move.b  (a0)+,(a1)
01:000C0DDC 4611            	   179:          not.b   (a1)
01:000C0DDE D3C0            	   180:          add.l   d0,a1
01:000C0DE0 1298            	   181:          move.b  (a0)+,(a1)
01:000C0DE2 4611            	   182:          not.b   (a1)
01:000C0DE4 D3C0            	   183:          add.l   d0,a1
01:000C0DE6 1298            	   184:          move.b  (a0)+,(a1)
01:000C0DE8 4611            	   185:          not.b   (a1)
01:000C0DEA D3C0            	   186:          add.l   d0,a1
01:000C0DEC 1298            	   187:          move.b  (a0)+,(a1)
01:000C0DEE 4611            	   188:          not.b   (a1)
01:000C0DF0 D3C0            	   189:          add.l   d0,a1
01:000C0DF2 1298            	   190:          move.b  (a0)+,(a1)
01:000C0DF4 4611            	   191:          not.b   (a1)
01:000C0DF6 D3C0            	   192:          add.l   d0,a1
01:000C0DF8 1298            	   193:          move.b  (a0)+,(a1)
01:000C0DFA 4611            	   194:          not.b   (a1)
                            	   195: * increment col
01:000C0DFC 0C79004F0007FCB2	   196: ov2      cmp.w   #79,col
01:000C0E04 6706            	   197:          beq.s   ov1
01:000C0E06 52790007FCB2    	   198:          addq.w  #1,col
                            	   199: *
01:000C0E0C 4CDF0303        	   200: ov1      movem.l (sp)+,d0-d1/a0-a1
01:000C0E10 4E75            	   201:          rts
                            	   202: * copy of row/col to cursor routine
01:000C0E12 223C000003C0    	   203: rctocr   move.l  #960,d1  bytes per row
01:000C0E18 C2F90007FCB0    	   204:          mulu    row,d1       times current row
01:000C0E1E D2790007FCB2    	   205:          add.w   col,d1
01:000C0E24 7000            	   206:          moveq   #0,d0
01:000C0E26 30390007FCB6    	   207:          move.w  offset,d0
01:000C0E2C D280            	   208:          add.l   d0,d1        add in vertical offset
01:000C0E2E B2BC00004B00    	   209:          cmp.l   #$4b00,d1    off the screen?
01:000C0E34 6D06            	   210:          blt.s   ccrok
01:000C0E36 92BC00004B00    	   211:          sub.l   #$4b00,d1    is so, adjust
01:000C0E3C D2BC0003B500    	   212: ccrok    add.l   #$3b500,d1   add in screen base address
01:000C0E42 2241            	   213:          move.l  d1,a1
01:000C0E44 4E75            	   214:          rts
                            	   215: *
                            	   216: ****************************
                            	   217: * control codes jump table *
                            	   218: ****************************
01:000C0E46 E380            	   219: c_code   asl.l   #1,d0        two byte offsets
01:000C0E48 303B000A        	   220:          move.w  table(pc,d0.w),d0 point to correct routine
01:000C0E4C 4EBB0006        	   221:          jsr     table(pc,d0)      jump to it!
01:000C0E50 6000FFBA        	   222:          bra     ov1
                            	   223: *
01:000C0E54 0074            	   224: table    dc.w    nu-table,nu-table,nu-table,nu-table
01:000C0E56 0074
01:000C0E58 0074
01:000C0E5A 0074
01:000C0E5C 0074            	   225:          dc.w    nu-table,nu-table,nu-table,bl-table
01:000C0E5E 0074
01:000C0E60 0074
01:000C0E62 0076
01:000C0E64 007A            	   226:          dc.w    bs-table,ht-table,lf-table,vt-table
01:000C0E66 008C
01:000C0E68 009E
01:000C0E6A 00B2
01:000C0E6C 00C6            	   227:          dc.w    ff-table,cr-table,mv-table,ho-table
01:000C0E6E 00D0
01:000C0E70 00D8
01:000C0E72 00CA
01:000C0E74 00E2            	   228:          dc.w    il-table,dl-table,el-table,ep-table
01:000C0E76 00E4
01:000C0E78 00E6
01:000C0E7A 0118
01:000C0E7C 016A            	   229:          dc.w    at-table,ao-table,nu-table,nu-table
01:000C0E7E 0174
01:000C0E80 0074
01:000C0E82 0074
01:000C0E84 0074            	   230:          dc.w    nu-table,nu-table,nu-table,es-table
01:000C0E86 0074
01:000C0E88 0074
01:000C0E8A 0168
01:000C0E8C 0074            	   231:          dc.w    nu-table,nu-table,nu-table,nu-table
01:000C0E8E 0074
01:000C0E90 0074
01:000C0E92 0074
                            	   232: *
                            	   233: * 'escape' sequence processing
01:000C0E94 903C0020        	   234: esc_proc sub.b   #$20,d0      remove ascii bias
01:000C0E98 083900060007FCB4	   235:          btst.b  #6,vduflags  1st coord?
01:000C0EA0 67000014        	   236:          beq     esc1
01:000C0EA4 33C00007FCB0    	   237:          move.w  d0,row
01:000C0EAA 08B900060007FCB4	   238:          bclr.b  #6,vduflags
01:000C0EB2 6000FF58        	   239:          bra     ov1
                            	   240: *
01:000C0EB6 33C00007FCB2    	   241: esc1     move.w  d0,col       2nd coord
01:000C0EBC 08B900070007FCB4	   242:          bclr.b  #7,vduflags  clear escape flag
01:000C0EC4 6000FF46        	   243:          bra     ov1
                            	   244: *
01:000C0EC8 4E75            	   245: nu       rts                  null
                            	   246: *
01:000C0ECA 6000F70C        	   247: bl       bra     beep         bell
                            	   248: *
01:000C0ECE 0C7900000007FCB2	   249: bs       cmp.w   #0,col       back space
01:000C0ED6 6706            	   250:          beq.s   bse
01:000C0ED8 53790007FCB2    	   251:          subq.w  #1,col
01:000C0EDE 4E75            	   252: bse      rts
                            	   253: *
01:000C0EE0 0C79004F0007FCB2	   254: ht       cmp.w   #79,col      horizontal tab
01:000C0EE8 6706            	   255:          beq.s   hte
01:000C0EEA 52790007FCB2    	   256:          addq.w  #1,col
01:000C0EF0 4E75            	   257: hte      rts
                            	   258: *
01:000C0EF2 0C7900130007FCB0	   259: lf       cmp.w   #19,row      line feed
01:000C0EFA 670000D6        	   260:          beq     scr_up       if on bottom row, scroll
01:000C0EFE 52790007FCB0    	   261:          addq.w  #1,row
01:000C0F04 4E75            	   262:          rts
                            	   263: *
01:000C0F06 0C7900000007FCB0	   264: vt       cmp.w   #0,row       vertical tab
01:000C0F0E 6700010A        	   265:          beq     scr_dwn      if on top row, scroll
01:000C0F12 53790007FCB0    	   266:          subq.w  #1,row
01:000C0F18 4E75            	   267: vte      rts
                            	   268: *
01:000C0F1A 60000158        	   269: ff       bra     cleart       form feed
                            	   270: *
01:000C0F1E 42790007FCB0    	   271: ho       clr.w   row          home
                            	   272: *
01:000C0F24 42790007FCB2    	   273: cr       clr.w   col          cr return
01:000C0F2A 4E75            	   274:          rts
                            	   275: *
01:000C0F2C 003900C00007FCB4	   276: mv       or.b    #$c0,vduflags set escape flags for cursor move
01:000C0F34 4E75            	   277:          rts
                            	   278: *
01:000C0F36 4E75            	   279: il       rts                  no insert line
                            	   280: *
01:000C0F38 4E75            	   281: dl       rts                  no delete line
                            	   282: *
01:000C0F3A 48E73000        	   283: el movem.l d2-d3,-(sp)
01:000C0F3E 6100FED2        	   284:  bsr rctocr starting point
01:000C0F42 7050            	   285:  moveq #80,d0 deol
01:000C0F44 90790007FCB2    	   286:  sub.w col,d0
01:000C0F4A 5340            	   287:  subq #1,d0
01:000C0F4C 2049            	   288:  move.l a1,a0
01:000C0F4E 7400            	   289:  moveq #0,d2 clear value
01:000C0F50 2600            	   290:  move.l d0,d3 length
01:000C0F52 720B            	   291:  moveq #11,d1 lines to clear
01:000C0F54 2003            	   292: deol1 move.l d3,d0
01:000C0F56 2248            	   293:  move.l a0,a1
01:000C0F58 41E80050        	   294:  lea.l 80(a0),a0
01:000C0F5C 12C2            	   295: deol2 move.b d2,(a1)+
01:000C0F5E 51C8FFFC        	   296:  dbf d0,deol2
01:000C0F62 51C9FFF0        	   297:  dbf d1,deol1
01:000C0F66 4CDF000C        	   298:  movem.l (sp)+,d2-d3
01:000C0F6A 4E75            	   299:  rts
                            	   300: *
01:000C0F6C 3F390007FCB0    	   301: ep move.w row,-(sp)
01:000C0F72 3F390007FCB2    	   302:  move.w col,-(sp)
01:000C0F78 6100FFC0        	   303:  bsr el
01:000C0F7C 0C7900130007FCB0	   304:  cmp.w #19,row last line?
01:000C0F84 6728            	   305:  beq.s deope
01:000C0F86 52790007FCB0    	   306:  addq.w #1,row start from next row
01:000C0F8C 42790007FCB2    	   307:  clr.w col clear col
01:000C0F92 7014            	   308:  moveq #20,d0
01:000C0F94 90790007FCB0    	   309:  sub.w row,d0
01:000C0F9A 5340            	   310:  subq #1,d0 rows to clr
01:000C0F9C 2F00            	   311: deop_1 move.l d0,-(sp)
01:000C0F9E 6100FF9A        	   312:  bsr el
01:000C0FA2 201F            	   313:  move.l (sp)+,d0
01:000C0FA4 52790007FCB0    	   314:  addq.w #1,row
01:000C0FAA 51C8FFF0        	   315:  dbf d0,deop_1
01:000C0FAE 33DF0007FCB2    	   316: deope move.w (sp)+,col
01:000C0FB4 33DF0007FCB0    	   317:  move.w (sp)+,row
01:000C0FBA 4E75            	   318:  rts
                            	   319: *
01:000C0FBC 4E75            	   320: es       rts
                            	   321: *
01:000C0FBE 08F900050007FCB4	   322: at bset #5,vduflags
01:000C0FC6 4E75            	   323:  rts
                            	   324: *
01:000C0FC8 08B900050007FCB4	   325: ao bclr #5,vduflags
01:000C0FD0 4E75            	   326:  rts
                            	   327: *
01:000C0FD2 067903C00007FCB6	   328: scr_up add.w #960,offset
01:000C0FDA 0C794B000007FCB6	   329:  cmp.w #$4b00,offset
01:000C0FE2 6D08            	   330:  blt.s scrok
01:000C0FE4 33FC00000007FCB6	   331:  move.w #0,offset
                            	   332: *
01:000C0FEC 207C000FFE2C    	   333: scrok move.l #$ffe2c,a0
01:000C0FF2 30390007FCB6    	   334:  move.w offset,d0
01:000C0FF8 11400003        	   335:  move.b d0,3(a0)
01:000C0FFC E048            	   336:  lsr.w #8,d0
01:000C0FFE 11400002        	   337:  move.b d0,2(a0)
                            	   338: *
01:000C1002 42790007FCB2    	   339: scr1 clr.w col
01:000C1008 6100FE08        	   340:  bsr rctocr
01:000C100C 303C00EF        	   341:  move.w #239,d0
01:000C1010 4281            	   342:  clr.l d1
                            	   343: *
01:000C1012 22C1            	   344: scrloop move.l d1,(a1)+
01:000C1014 51C8FFFC        	   345:  dbf d0,scrloop
01:000C1018 4E75            	   346:  rts
                            	   347: *
                            	   348: *
01:000C101A 0C7900000007FCB6	   349: scr_dwn cmp.w #0,offset
01:000C1022 6608            	   350:  bne.s scrdzz1
01:000C1024 33FC4B000007FCB6	   351:  move.w #$4b00,offset
                            	   352: *
01:000C102C 047903C00007FCB6	   353: scrdzz1 sub.w #960,offset
01:000C1034 0C7900000007FCB6	   354:  cmp.w #0,offset
01:000C103C 6C08            	   355:  bge.s dscrok
01:000C103E 33FC4B000007FCB6	   356:  move.w #$4b00,offset
                            	   357: *
01:000C1046 207C000FFE2C    	   358: dscrok move.l #$ffe2c,a0
01:000C104C 30390007FCB6    	   359:  move.w offset,d0
01:000C1052 11400003        	   360:  move.b d0,3(a0)
01:000C1056 E048            	   361:  lsr.w #8,d0
01:000C1058 11400002        	   362:  move.b d0,2(a0)
                            	   363: *
01:000C105C 42790007FCB2    	   364: dscr1 clr.w col
01:000C1062 6100FDAE        	   365:  bsr rctocr
01:000C1066 303C00EF        	   366:  move.w #239,d0
01:000C106A 4281            	   367:  clr.l d1
                            	   368: *
01:000C106C 22C1            	   369: dscrloop move.l d1,(a1)+
01:000C106E 51C8FFFC        	   370:  dbf d0,dscrloop
01:000C1072 4E75            	   371:  rts
                            	   372: *
                            	   373: ************************************
                            	   374: *    Clear screen and init vars    *
                            	   375: ************************************
01:000C1074 7000            	   376: cleart    moveq  #0,d0        fill screen with $0
01:000C1076 41F90003B500    	   377:           lea.l  $3b500,a0
01:000C107C 223C000012BF    	   378:           move.l #4799,d1
01:000C1082 20C0            	   379: ctl1      move.l d0,(a0)+
01:000C1084 51C9FFFC        	   380:           dbf    d1,ctl1
                            	   381: *
01:000C1088 33C00007FCB0    	   382:           move.w d0,row       home cursor
01:000C108E 33C00007FCB2    	   383:           move.w d0,col
                            	   384: *
01:000C1094 13C00007FCB4    	   385:           move.b d0,vduflags  clear flags
                            	   386: *
01:000C109A 207C000FFE2C    	   387:           move.l #$ffe2c,a0   clear vert offset
01:000C10A0 11400003        	   388:           move.b d0,3(a0)
01:000C10A4 11400002        	   389:           move.b d0,2(a0)
01:000C10A8 33C00007FCB6    	   390:           move.w  d0,offset
                            	   391: *
                            	   392: * disable all t/o's.
01:000C10AE 7000            	   393:  moveq #0,d0
                            	   394: * move.b d0,$ffe92
                            	   395: * move.b d0,$ffe9a
                            	   396: * move.b d0,$ffe9e
                            	   397: * move.b d0,$ffe96
                            	   398: * move.b d0,$ffea6
                            	   399: * move.b d0,$ffeaa
                            	   400: * move.b d0,$ffeae
                            	   401: * set up true object 4 as cursor.
                            	   402: *          move.b #$07,$ffe0c  set object table address
                            	   403: *          move.b #$fc,$ffe0d
                            	   404: *          move.b #$00,$ffeb4  name t.o. four.
                            	   405: *
                            	   406: *          moveq  #5,d0        move cursor pattern to video ram
                            	   407: *          lea.l  cursor,a0
                            	   408: *          lea.l  $7fc00,a1
                            	   409: *cltlpp    move.l (a0)+,(a1)+
                            	   410: *          dbf    d0,cltlpp
                            	   411: *
01:000C10B0 33FC00010007FCB8	   412:           move.w #$1,flash    init flash counter
                            	   413: *
01:000C10B8 4E75            	   414:           rts
                            	   415: *
01:000C10BA F00C0000        	   416: cursor    dc.l   %11110000000011000000000000000000
01:000C10BE F03F0000        	   417:           dc.l   %11110000001111110000000000000000
01:000C10C2 F0FFC000        	   418:           dc.l   %11110000111111111100000000000000
01:000C10C6 F3FFF000        	   419:           dc.l   %11110011111111111111000000000000
01:000C10CA FFFFFC00        	   420:           dc.l   %11111111111111111111110000000000
01:000C10CE 00000000        	   421:           dc.l   %00000000000000000000000000000000
                            	   422: *
                            	   423: *
                            	   424: 

Source: "monk.txt"
                            	   280: *
                            	   281:  include commands.txt

Source: "commands.txt"
                            	     1: ********************
                            	     2: * monitor commands *
                            	     3: ********************
                            	     4: *
                            	     5: ***************************
                            	     6: * Jump table for commands *
                            	     7: ***************************
                            	     8: *
                            	     9: * Group I commands - Memory.
01:000C10D2 6475            	    10: comtab   dc.w    'du'         Hex and ASCII dump of memory.
01:000C10D4 000C1CBE        	    11:          dc.l    hd
01:000C10D8 6164            	    12:          dc.w    'ad'         ASCII dump of memory.
01:000C10DA 000C1DAC        	    13:          dc.l    ad
01:000C10DE 6D65            	    14:          dc.w    'me'         Memory examine and alter.
01:000C10E0 000C175E        	    15:          dc.l    me
01:000C10E4 706D            	    16:          dc.w    'pm'         Poke memory.
01:000C10E6 000C1E1C        	    17:          dc.l    pm
01:000C10EA 746D            	    18:          dc.w    'tm'         Test memory.
01:000C10EC 000C186A        	    19:          dc.l    tm
01:000C10F0 666D            	    20:          dc.w    'fm'         Fill memory.
01:000C10F2 000C1E64        	    21:          dc.l    fm
01:000C10F6 736D            	    22:          dc.w    'sm'         Shift memory.
01:000C10F8 000C1EA8        	    23:          dc.l    sm
01:000C10FC 6C6B            	    24:          dc.w    'lk'         Load memory from keyboard.
01:000C10FE 000C1F0C        	    25:          dc.l    lk
01:000C1102 6669            	    26:          dc.w    'fi'         Find byte string.
01:000C1104 000C1F80        	    27:          dc.l    fi
                            	    28: *
                            	    29: * Group II commands - program.
01:000C1108 7270            	    30:          dc.w    'rp'         Run program.
01:000C110A 000C2042        	    31:          dc.l    rp
01:000C110E 6A75            	    32:          dc.w    'ju'         Jump to program.
01:000C1110 000C20C2        	    33:          dc.l    ju
01:000C1114 6A73            	    34:          dc.w    'js'         Jump to SK*DOS 68K warm start.
01:000C1116 000C20F4        	    35:          dc.l    js
01:000C111A 6472            	    36:          dc.w    'dr'         Display registers.
01:000C111C 000C211E        	    37:          dc.l    dr
01:000C1120 7361            	    38:          dc.w    'sa'         Set address register.
01:000C1122 000C21CC        	    39:          dc.l    sa
01:000C1126 7364            	    40:          dc.w    'sd'         Set data register.
01:000C1128 000C220E        	    41:          dc.l    sd
01:000C112C 7373            	    42:          dc.w    'ss'         Set status register.
01:000C112E 000C224E        	    43:          dc.l    ss
01:000C1132 7370            	    44:          dc.w    'sp'         Set program counter.
01:000C1134 000C227C        	    45:          dc.l    sp
01:000C1138 7472            	    46:          dc.w    'tr'         Trace program.
01:000C113A 000C22A6        	    47:          dc.l    tr
01:000C113E 6370            	    48:          dc.w    'cp'         Continue after breakpoint.
01:000C1140 000C22DC        	    49:          dc.l     cp
01:000C1144 6272            	    50:          dc.w    'br'         List current breakpoints.
01:000C1146 000C2336        	    51:          dc.l    br
01:000C114A 6462            	    52:          dc.w    'db'         Define breakpoints.
01:000C114C 000C23A2        	    53:          dc.l    db
                            	    54: *
                            	    55: * Group III commands - disk.
                            	    56: *         dc.w    'td'         Test drive.
                            	    57: *         dc.l    td
                            	    58: *         dc.w    'ts'         Test floppy stepping.
                            	    59: *         dc.l    ts
                            	    60: *         dc.w    'df'         Disc format.
                            	    61: *         dc.l    df
01:000C1150 626F            	    62:          dc.w    'bo'         Boot SK*DOS 68K.
01:000C1152 000C28B8        	    63:          dc.l    bo
01:000C1156 6F62            	    64:          dc.w    'ob'         Boot OS9
01:000C1158 000C28CC        	    65:          dc.l    ob
01:000C115C 7273            	    66:          dc.w    'rs'         Read sector.
01:000C115E 000C2600        	    67:          dc.l    rs
01:000C1162 7773            	    68:          dc.w    'ws'         Write sector.
01:000C1164 000C2662        	    69:          dc.l    ws
01:000C1168 6964            	    70:          dc.w    'id'         Inspect Disk.
01:000C116A 000C26FC        	    71:          dc.l    id
                            	    72: *
                            	    73: * Group IV commands - misc.
01:000C116E 7369            	    74:          dc.w    'si'         Set input port.
01:000C1170 000C23F0        	    75:          dc.l    si
01:000C1174 736F            	    76:          dc.w    'so'         Set output port.
01:000C1176 000C241A        	    77:          dc.l    so
01:000C117A 6463            	    78:          dc.w    'dc'         Display real time clock contents.
01:000C117C 000C1A52        	    79:          dc.l    dc
01:000C1180 6D63            	    80:          dc.w    'mc'         Modify rtc contents.
01:000C1182 000C1B00        	    81:          dc.l    mc
01:000C1186 6373            	    82:          dc.w    'cs'         Checksum.
01:000C1188 000C16EA        	    83:          dc.l    cs
01:000C118C 3F3F            	    84:          dc.w    '??'         Help screen.
01:000C118E 000C16AE        	    85:          dc.l    he
01:000C1192 6865            	    86:          dc.w    'he'          "     "
01:000C1194 000C16AE        	    87:          dc.l    he
01:000C1198 7372            	    88:          dc.w    'sr'         S-record loader.
01:000C119A 000C1956        	    89:          dc.l    sr
01:000C119E 6470            	    90:          dc.w    'dp'         Display i/o data (ever other byte)
01:000C11A0 000C1BDA        	    91:          dc.l    dp
01:000C11A4 636F            	    92:          dc.w    'co'         Dumb comms terminal.
01:000C11A6 000C1C2A        	    93:          dc.l    co
                            	    94: * End of table.
01:000C11AA FFFF            	    95:          dc.w    $ffff
                            	    96: *
                            	    97: *****************
                            	    98: * Help screen   *
                            	    99: *****************
01:000C11AC 0D              	   100: hes dc.b $d,$a,'  MONK_68K v5.1 Help screen.'
01:000C11AD 0A
01:000C11AE 20204D4F4E4B5F36
01:000C11B6 384B2076352E3120
01:000C11BE 48656C7020736372
01:000C11C6 65656E2E
01:000C11CA 0D              	   101:     dc.b $d,$a
01:000C11CB 0A
01:000C11CC 0D              	   102:     dc.b $d,$a,' HEX numbers are input in free format, end with a space.'
01:000C11CD 0A
01:000C11CE 20484558206E756D
01:000C11D6 6265727320617265
01:000C11DE 20696E7075742069
01:000C11E6 6E20667265652066
01:000C11EE 6F726D61742C2065
01:000C11F6 6E64207769746820
01:000C11FE 612073706163652E
01:000C1206 0D              	   103:     dc.b $d,$a,'  SI....Set input port           '
01:000C1207 0A
01:000C1208 202053492E2E2E2E
01:000C1210 53657420696E7075
01:000C1218 7420706F72742020
01:000C1220 2020202020202020
01:000C1228 20
01:000C1229 534F2E2E2E2E5365	   104:     dc.b       'SO....Set output port            '
01:000C1231 74206F7574707574
01:000C1239 20706F7274202020
01:000C1241 2020202020202020
01:000C1249 20
                            	   105: 
01:000C124A 0D              	   106:     dc.b $d,$a,'  AD....Ascii memory dump        '
01:000C124B 0A
01:000C124C 202041442E2E2E2E
01:000C1254 4173636969206D65
01:000C125C 6D6F72792064756D
01:000C1264 7020202020202020
01:000C126C 20
01:000C126D 42522E2E2E2E5368	   107:     dc.b       'BR....Show breakpoints           '
01:000C1275 6F7720627265616B
01:000C127D 706F696E74732020
01:000C1285 2020202020202020
01:000C128D 20
                            	   108: 
01:000C128E 0D              	   109:     dc.b $d,$a,'  LK....load ascii text to ram   '
01:000C128F 0A
01:000C1290 20204C4B2E2E2E2E
01:000C1298 6C6F616420617363
01:000C12A0 6969207465787420
01:000C12A8 746F2072616D2020
01:000C12B0 20
01:000C12B1 44502E2E2E2E6469	   110:     dc.b       'DP....display peripheral data    '
01:000C12B9 73706C6179207065
01:000C12C1 726970686572616C
01:000C12C9 2064617461202020
01:000C12D1 20
                            	   111: 
01:000C12D2 0D              	   112:     dc.b $d,$a,'  CP....Continue program         '
01:000C12D3 0A
01:000C12D4 202043502E2E2E2E
01:000C12DC 436F6E74696E7565
01:000C12E4 2070726F6772616D
01:000C12EC 2020202020202020
01:000C12F4 20
01:000C12F5 43532E2E2E2E4765	   113:     dc.b       'CS....Generate memory checksum   '
01:000C12FD 6E6572617465206D
01:000C1305 656D6F7279206368
01:000C130D 65636B73756D2020
01:000C1315 20
                            	   114: 
01:000C1316 0D              	   115:     dc.b $d,$a,'  DB....Define breakpoints       '
01:000C1317 0A
01:000C1318 202044422E2E2E2E
01:000C1320 446566696E652062
01:000C1328 7265616B706F696E
01:000C1330 7473202020202020
01:000C1338 20
01:000C1339 44432E2E2E2E4469	   116:     dc.b       'DC....Display time and date      '
01:000C1341 73706C6179207469
01:000C1349 6D6520616E642064
01:000C1351 6174652020202020
01:000C1359 20
                            	   117: 
01:000C135A 0D              	   118:     dc.b $d,$a,'  DR....Display 68000 registers  '
01:000C135B 0A
01:000C135C 202044522E2E2E2E
01:000C1364 446973706C617920
01:000C136C 3638303030207265
01:000C1374 6769737465727320
01:000C137C 20
01:000C137D 54532E2E2E2E7465	   119:     dc.b       'TS....test drive stepping        '
01:000C1385 7374206472697665
01:000C138D 207374657070696E
01:000C1395 6720202020202020
01:000C139D 20
                            	   120: 
01:000C139E 0D              	   121:     dc.b $d,$a,'  TD....ramdom read drive test   '
01:000C139F 0A
01:000C13A0 202054442E2E2E2E
01:000C13A8 72616D646F6D2072
01:000C13B0 6561642064726976
01:000C13B8 6520746573742020
01:000C13C0 20
01:000C13C1 424F2E2E2E2E626F	   122:     dc.b       'BO....boot SK*DOS 68K            '
01:000C13C9 6F7420534B2A444F
01:000C13D1 532036384B202020
01:000C13D9 2020202020202020
01:000C13E1 20
                            	   123: 
01:000C13E2 0D              	   124:     dc.b $d,$a,'  FI....Find byte string         '
01:000C13E3 0A
01:000C13E4 202046492E2E2E2E
01:000C13EC 46696E6420627974
01:000C13F4 6520737472696E67
01:000C13FC 2020202020202020
01:000C1404 20
01:000C1405 464D2E2E2E2E4669	   125:     dc.b       'FM....Fill memory with constant  '
01:000C140D 6C6C206D656D6F72
01:000C1415 7920776974682063
01:000C141D 6F6E7374616E7420
01:000C1425 20
                            	   126: 
01:000C1426 0D              	   127:     dc.b $d,$a,'  DU....Hex+ASCII dump of memory '
01:000C1427 0A
01:000C1428 202044552E2E2E2E
01:000C1430 4865782B41534349
01:000C1438 492064756D70206F
01:000C1440 66206D656D6F7279
01:000C1448 20
01:000C1449 48452E2E2E2E4469	   128:     dc.b       'HE....Display this screen        '
01:000C1451 73706C6179207468
01:000C1459 6973207363726565
01:000C1461 6E20202020202020
01:000C1469 20
                            	   129: 
01:000C146A 0D              	   130:     dc.b $d,$a,'  JS....jump to SK*DOS warm start'
01:000C146B 0A
01:000C146C 20204A532E2E2E2E
01:000C1474 6A756D7020746F20
01:000C147C 534B2A444F532077
01:000C1484 61726D2073746172
01:000C148C 74
01:000C148D 434F2E2E2E2E4475	   131:     dc.b       'CO....Dumb console               '
01:000C1495 6D6220636F6E736F
01:000C149D 6C65202020202020
01:000C14A5 2020202020202020
01:000C14AD 20
                            	   132: 
01:000C14AE 0D              	   133:     dc.b $d,$a,'  JU....Jump to program          '
01:000C14AF 0A
01:000C14B0 20204A552E2E2E2E
01:000C14B8 4A756D7020746F20
01:000C14C0 70726F6772616D20
01:000C14C8 2020202020202020
01:000C14D0 20
01:000C14D1 4D432E2E2E2E4578	   134:     dc.b       'MC....Examine and alter clock    '
01:000C14D9 616D696E6520616E
01:000C14E1 6420616C74657220
01:000C14E9 636C6F636B202020
01:000C14F1 20
                            	   135: 
01:000C14F2 0D              	   136:     dc.b $d,$a,'  ME....Examine and alter memory '
01:000C14F3 0A
01:000C14F4 20204D452E2E2E2E
01:000C14FC 4578616D696E6520
01:000C1504 616E6420616C7465
01:000C150C 72206D656D6F7279
01:000C1514 20
01:000C1515 504D2E2E2E2E506F	   137:     dc.b       'PM....Poke memory                '
01:000C151D 6B65206D656D6F72
01:000C1525 7920202020202020
01:000C152D 2020202020202020
01:000C1535 20
                            	   138: 
01:000C1536 0D              	   139:     dc.b $d,$a,'  RP....Run program (use regs)   '
01:000C1537 0A
01:000C1538 202052502E2E2E2E
01:000C1540 52756E2070726F67
01:000C1548 72616D2028757365
01:000C1550 2072656773292020
01:000C1558 20
01:000C1559 53412E2E2E2E5365	   140:     dc.b       'SA....Set 68000 address regs     '
01:000C1561 7420363830303020
01:000C1569 6164647265737320
01:000C1571 7265677320202020
01:000C1579 20
                            	   141: 
01:000C157A 0D              	   142:     dc.b $d,$a,'  ID....Inspect disk sectors     '
01:000C157B 0A
01:000C157C 202049442E2E2E2E
01:000C1584 496E737065637420
01:000C158C 6469736B20736563
01:000C1594 746F727320202020
01:000C159C 20
01:000C159D 53442E2E2E2E5365	   143:     dc.b       'SD....Set 68000 data regs        '
01:000C15A5 7420363830303020
01:000C15AD 6461746120726567
01:000C15B5 7320202020202020
01:000C15BD 20
                            	   144: 
01:000C15BE 0D              	   145:     dc.b $d,$a,'  SM....Shift block of memory    '
01:000C15BF 0A
01:000C15C0 2020534D2E2E2E2E
01:000C15C8 536869667420626C
01:000C15D0 6F636B206F66206D
01:000C15D8 656D6F7279202020
01:000C15E0 20
01:000C15E1 53522E2E2E2E532D	   146:     dc.b       'SR....S-record loader            '
01:000C15E9 7265636F7264206C
01:000C15F1 6F61646572202020
01:000C15F9 2020202020202020
01:000C1601 20
                            	   147: 
01:000C1602 0D              	   148:     dc.b $d,$a,'  SS....Set 68000 status reg     '
01:000C1603 0A
01:000C1604 202053532E2E2E2E
01:000C160C 5365742036383030
01:000C1614 3020737461747573
01:000C161C 2072656720202020
01:000C1624 20
01:000C1625 52532E2E2E2E7265	   149:     dc.b       'RS....read disk sector           '
01:000C162D 6164206469736B20
01:000C1635 736563746F722020
01:000C163D 2020202020202020
01:000C1645 20
                            	   150: 
01:000C1646 0D              	   151:     dc.b $d,$a,'  TM....Test memory              '
01:000C1647 0A
01:000C1648 2020544D2E2E2E2E
01:000C1650 54657374206D656D
01:000C1658 6F72792020202020
01:000C1660 2020202020202020
01:000C1668 20
01:000C1669 54522E2E2E2E5472	   152:     dc.b       'TR....Trace single instruction   '
01:000C1671 6163652073696E67
01:000C1679 6C6520696E737472
01:000C1681 756374696F6E2020
01:000C1689 20
                            	   153: 
01:000C168A 0D              	   154:     dc.b $d,$a,'  WS....write disk sector       ',0,0
01:000C168B 0A
01:000C168C 202057532E2E2E2E
01:000C1694 7772697465206469
01:000C169C 736B20736563746F
01:000C16A4 7220202020202020
01:000C16AC 00
01:000C16AD 00
01:000C16AE 41FAFAFC        	   155: he lea.l hes(pc),a0
01:000C16B2 6100ED34        	   156:  bsr pstring
01:000C16B6 6000ECAA        	   157:  bra mwarm
                            	   158: **********************
                            	   159: * Calculate checksum *
                            	   160: **********************
01:000C16BA 0D              	   161: css dc.b $d,'Calculate checksum from ',0,0
01:000C16BB 43616C63756C6174
01:000C16C3 6520636865636B73
01:000C16CB 756D2066726F6D20
01:000C16D3 00
01:000C16D4 00
01:000C16D5 20746F20        	   162: cts dc.b ' to ',0,0
01:000C16D9 00
01:000C16DA 00
01:000C16DB 202020436865636B	   163: cas dc.b '   Checksum = ',0
01:000C16E3 73756D203D20
01:000C16E9 00
01:000C16EA 41FAFFCE        	   164: cs lea.l css(pc),a0
01:000C16EE 6100ECFC        	   165:  bsr prompt
01:000C16F2 2841            	   166:  move.l d1,a4
01:000C16F4 41FAFFDF        	   167:  lea.l cts(pc),a0
01:000C16F8 6100ECF2        	   168:  bsr prompt
01:000C16FC 5281            	   169:  addq.l #1,d1
01:000C16FE 2A41            	   170:  move.l d1,a5
01:000C1700 41FAFFD9        	   171:  lea.l cas(pc),a0
01:000C1704 6100ECD2        	   172:  bsr pdata1
01:000C1708 283C00000000    	   173:  move.l #0,d4
01:000C170E 101C            	   174: c0 move.b (a4)+,d0
01:000C1710 2A3C00000007    	   175:  move.l #7,d5
01:000C1716 E24C            	   176: c1 lsr.w #1,d4
01:000C1718 E210            	   177:  roxr.b #1,d0
01:000C171A 40C1            	   178:  move.w sr,d1
01:000C171C C23C0018        	   179:  and.b #$18,d1
01:000C1720 670A            	   180:  beq.s c2
01:000C1722 B23C0018        	   181:  cmp.b #$18,d1
01:000C1726 6704            	   182:  beq.s c2
01:000C1728 0A448408        	   183:  eor.w #$8408,d4
01:000C172C 51CDFFE8        	   184: c2 dbf d5,c1
01:000C1730 B9CD            	   185:  cmp.l a5,a4
01:000C1732 66DA            	   186:  bne.s c0
01:000C1734 2004            	   187:  move.l d4,d0
01:000C1736 6100ED2E        	   188:  bsr out4h
01:000C173A 6000EC26        	   189:  bra mwarm
                            	   190: *
                            	   191: *******************************
                            	   192: *  Memory examine and alter.  *
                            	   193: *******************************
                            	   194: *
01:000C173E 0D              	   195: mes      dc.b     $d,'Memory examine and alter from ',0
01:000C173F 4D656D6F72792065
01:000C1747 78616D696E652061
01:000C174F 6E6420616C746572
01:000C1757 2066726F6D20
01:000C175D 00
01:000C175E 41FAFFDE        	   196: me       lea.l   mes(pc),a0
01:000C1762 6100EC88        	   197:          bsr     prompt
01:000C1766 2041            	   198:          move.l  d1,a0
01:000C1768 7601            	   199:          moveq.l   #1,d3
                            	   200: *
01:000C176A 6100EC60        	   201: meloop   bsr     pcrlf
01:000C176E 2008            	   202:          move.l  a0,d0
01:000C1770 6100ECEE        	   203:          bsr     out8h
01:000C1774 6100ED18        	   204:          bsr     outs
01:000C1778 6100ED14        	   205:          bsr     outs
01:000C177C 3403            	   206:          move.w  d3,d2
01:000C177E 5382            	   207:          subq.l    #1,d2
                            	   208: *
01:000C1780 1018            	   209: meloop1  move.b  (a0)+,d0
01:000C1782 6100ECE8        	   210:          bsr     out2h
01:000C1786 51CAFFF8        	   211:          dbf     d2,meloop1
01:000C178A 6100F510        	   212:          bsr     inch
01:000C178E 6100ECBE        	   213:          bsr     locase
                            	   214: *
01:000C1792 B03C000D        	   215:          cmp.b   #$0d,d0
01:000C1796 6602            	   216:          bne.s   me1
01:000C1798 60D0            	   217:          bra.s   meloop
                            	   218: *
01:000C179A B03C002D        	   219: me1      cmp.b   #'-',d0
01:000C179E 6606            	   220:          bne.s   me2
01:000C17A0 91C3            	   221:          sub.l   d3,a0
01:000C17A2 91C3            	   222:          sub.l   d3,a0
01:000C17A4 60C4            	   223:          bra.s   meloop
                            	   224: *
01:000C17A6 B03C0008        	   225: me2      cmp.b   #$08,d0
01:000C17AA 6604            	   226:          bne.s   me3
01:000C17AC 91C3            	   227:          sub.l   d3,a0
01:000C17AE 60BA            	   228:          bra.s   meloop
                            	   229: *
01:000C17B0 B03C0062        	   230: me3      cmp.b   #'b',d0
01:000C17B4 6606            	   231:          bne.s   me4
01:000C17B6 91C3            	   232:          sub.l   d3,a0
01:000C17B8 7601            	   233:          moveq.l   #1,d3
01:000C17BA 60AE            	   234:          bra.s   meloop
                            	   235: *
01:000C17BC B03C0077        	   236: me4      cmp.b   #'w',d0
01:000C17C0 6606            	   237:          bne.s   me5
01:000C17C2 91C3            	   238:          sub.l   d3,a0
01:000C17C4 7602            	   239:          moveq.l   #2,d3
01:000C17C6 60A2            	   240:          bra.s   meloop
                            	   241: *
01:000C17C8 B03C006C        	   242: me5      cmp.b   #'l',d0
01:000C17CC 6606            	   243:          bne.s   me6
01:000C17CE 91C3            	   244:          sub.l   d3,a0
01:000C17D0 7604            	   245:          moveq.l   #4,d3
01:000C17D2 6096            	   246:          bra.s   meloop
                            	   247: *
01:000C17D4 B03C0020        	   248: me6      cmp.b   #' ',d0
01:000C17D8 6600EB88        	   249:          bne     mwarm
01:000C17DC 6100EC2A        	   250:          bsr     inhex
                            	   251: *
01:000C17E0 0C430002        	   252:          cmpi    #2,d3
01:000C17E4 6D16            	   253:          blt.s   me7
01:000C17E6 6E28            	   254:          bgt.s   me8
01:000C17E8 3141FFFE        	   255:          move.w  d1,-2(a0)
01:000C17EC B268FFFE        	   256:          cmp.w   -2(a0),d1
01:000C17F0 6700FF78        	   257:          beq     meloop
01:000C17F4 41E8FFFE        	   258:          lea.l   -2(a0),a0
01:000C17F8 60000026        	   259:          bra     meerr
01:000C17FC 1141FFFF        	   260: me7      move.b  d1,-1(a0)
01:000C1800 B228FFFF        	   261:          cmp.b   -1(a0),d1
01:000C1804 6700FF64        	   262:          beq     meloop
01:000C1808 41E8FFFF        	   263:          lea.l   -1(a0),a0
01:000C180C 60000012        	   264:          bra     meerr
01:000C1810 2141FFFC        	   265: me8      move.l  d1,-4(a0)
01:000C1814 B2A8FFFC        	   266:          cmp.l   -4(a0),d1
01:000C1818 6700FF50        	   267:          beq     meloop
01:000C181C 41E8FFFC        	   268:          lea.l   -4(a0),a0
01:000C1820 103C003F        	   269: meerr    move.b  #$3f,d0
01:000C1824 6100F478        	   270:          bsr     outch
01:000C1828 6000FF40        	   271:          bra     meloop
                            	   272: *
                            	   273: *******************************
                            	   274: *     Quick memory test.      *
                            	   275: *******************************
                            	   276: *
01:000C182C 0D              	   277: tms      dc.b    $d,'Convergence ram test from ',0
01:000C182D 436F6E7665726765
01:000C1835 6E63652072616D20
01:000C183D 746573742066726F
01:000C1845 6D20
01:000C1847 00
01:000C1848 4572726F72206174	   278: tms2     dc.b    'Error at location ',7,0
01:000C1850 206C6F636174696F
01:000C1858 6E20
01:000C185A 07
01:000C185B 00
01:000C185C 206368616E676564	   279: tms3     dc.b    ' changed to ',0,0
01:000C1864 20746F20
01:000C1868 00
01:000C1869 00
01:000C186A 41FAFFC0        	   280: tm       lea.l   tms(pc),a0
01:000C186E 6100EB7C        	   281:          bsr     prompt
01:000C1872 2841            	   282:          move.l  d1,a4
01:000C1874 41FAFE5F        	   283:          lea.l   cts(pc),a0
01:000C1878 6100EB72        	   284:          bsr     prompt
01:000C187C 5281            	   285:  addq.l #1,d1
01:000C187E 2A41            	   286:          move.l  d1,a5
                            	   287: *
01:000C1880 4EB9000C03CC    	   288:          jsr     pcrlf
01:000C1886 7800            	   289:          moveq.l   #0,d4
01:000C1888 2A04            	   290:          move.l  d4,d5
                            	   291: *
                            	   292: * set up ram with test pattern.
01:000C188A 2C4C            	   293: tmfill   move.l  a4,a6
01:000C188C 1004            	   294: tm2      move.b  d4,d0
01:000C188E 220E            	   295:          move.l  a6,d1
01:000C1890 D001            	   296:          add.b   d1,d0
01:000C1892 E089            	   297:          lsr.l   #8,d1
01:000C1894 D001            	   298:          add.b   d1,d0
01:000C1896 1CC0            	   299:          move.b  d0,(a6)+
01:000C1898 BBCE            	   300:          cmpa.l  a6,a5
01:000C189A 66F0            	   301:          bne.s   tm2
                            	   302: * check ram pattern.
01:000C189C 2C4C            	   303: tmchk    move.l  a4,a6
01:000C189E 1004            	   304: tm9      move.b  d4,d0
01:000C18A0 220E            	   305:          move.l  a6,d1
01:000C18A2 D001            	   306:          add.b   d1,d0
01:000C18A4 E089            	   307:          lsr.l   #8,d1
01:000C18A6 D001            	   308:          add.b   d1,d0
01:000C18A8 B01E            	   309:          cmp.b   (a6)+,d0
01:000C18AA 6734            	   310:          beq.s   tm4
                            	   311: *
01:000C18AC 41FAFF9A        	   312: tmerr    lea.l   tms2(pc),a0
01:000C18B0 1200            	   313:          move.b  d0,d1
01:000C18B2 6100EB34        	   314:          bsr     PSTRING
01:000C18B6 9CFC0001        	   315:          sub   #1,a6
01:000C18BA 200E            	   316:          move.l  a6,d0
01:000C18BC 6100EBA2        	   317:          bsr     OUT8H
01:000C18C0 7403            	   318:          moveq.l   #3,d2
01:000C18C2 6100EBD6        	   319:          bsr     outns
01:000C18C6 1001            	   320:          move.b  d1,d0
01:000C18C8 6100EBA2        	   321:          bsr     OUT2H
01:000C18CC 41FAFF8E        	   322:          lea.l   tms3(pc),a0
01:000C18D0 6100EB06        	   323:          bsr     PDATA1
01:000C18D4 1016            	   324:          move.b  (a6),d0
01:000C18D6 6100EB94        	   325:          bsr     OUT2H
01:000C18DA 528E            	   326:          addq.l    #1,a6
01:000C18DC 6000FFBE        	   327:  bra tmchk
                            	   328: *
01:000C18E0 BDCD            	   329: tm4      cmpa.l  a5,a6
01:000C18E2 6600FFBA        	   330:          bne     tm9
                            	   331: *
01:000C18E6 4EB9000C0C44    	   332: tmkey    jsr     status
01:000C18EC 6718            	   333:          beq.s   tmpass
01:000C18EE 6100F384        	   334:          bsr     inch1
01:000C18F2 B03C001B        	   335:          cmp.b   #$1b,d0
01:000C18F6 66E8            	   336:          bne.s   tm4
01:000C18F8 6100F37A        	   337:          bsr     inch1
01:000C18FC B03C000D        	   338:          cmp.b   #$0d,d0
01:000C1900 6604            	   339:          bne.s   tmpass
01:000C1902 6000EA5E        	   340:          bra     mwarm
                            	   341: *
01:000C1906 1004            	   342: tmpass   move.b  d4,d0
01:000C1908 C0BC00000001    	   343:          and.l   #1,d0
01:000C190E D03C002A        	   344:          add.b   #$2a,d0
01:000C1912 6100F38A        	   345:          bsr     outch
01:000C1916 5284            	   346:          addq.l    #1,d4
01:000C1918 5285            	   347:          addq.l    #1,d5
01:000C191A BA3C0050        	   348:          cmp.b   #80,d5
01:000C191E 6600FF6A        	   349:          bne     tmfill
01:000C1922 7A00            	   350:          moveq.l   #0,d5
01:000C1924 6100EAA6        	   351:          bsr     pcrlf
01:000C1928 6600FF60        	   352:          bne     tmfill
                            	   353: *
                            	   354: *
                            	   355: *******************************
                            	   356: *       S-Rec loader          *
                            	   357: *******************************
01:000C192C 0D              	   358: srs dc.b $d,'S-record loader     ',0
01:000C192D 532D7265636F7264
01:000C1935 206C6F6164657220
01:000C193D 20202020
01:000C1941 00
01:000C1942 07              	   359: cse dc.b 7,7,7,'Checksum error! ',0
01:000C1943 07
01:000C1944 07
01:000C1945 436865636B73756D
01:000C194D 206572726F722120
01:000C1955 00
01:000C1956 41FAFFD4        	   360: sr lea.l srs(pc),a0
01:000C195A 6100EA7C        	   361:  bsr pdata1
01:000C195E 610000CA        	   362: srloop bsr srint
01:000C1962 B03C0053        	   363:  cmp.b #'S',d0
01:000C1966 66F6            	   364:  bne.s srloop
01:000C1968 610000C0        	   365:  bsr srint
01:000C196C B03C0031        	   366:  cmp.b #'1',d0
01:000C1970 6730            	   367:  beq.s get_rec
01:000C1972 B03C0032        	   368:  cmp.b #'2',d0
01:000C1976 672A            	   369:  beq.s get_rec
01:000C1978 B03C0033        	   370:  cmp.b #'3',d0
01:000C197C 6724            	   371:  beq.s get_rec
01:000C197E B03C0037        	   372:  cmp.b #'7',d0
01:000C1982 6700E9DE        	   373:  beq mwarm
01:000C1986 B03C0038        	   374:  cmp.b #'8',d0
01:000C198A 6700E9D6        	   375:  beq mwarm
01:000C198E B03C0039        	   376:  cmp.b #'9',d0
01:000C1992 6700E9CE        	   377:  beq mwarm
01:000C1996 41FAFFAA        	   378: srerr lea.l cse(pc),a0
01:000C199A 6100EA3C        	   379:  bsr pdata1
01:000C199E 6000E9C2        	   380:  bra mwarm
                            	   381: *
01:000C19A2 C0BC00000003    	   382: get_rec and.l #3,d0
01:000C19A8 2800            	   383:  move.l d0,d4 d4=address count
                            	   384: *
01:000C19AA 7A00            	   385:  moveq.l  #0,d5
01:000C19AC 61000038        	   386:  bsr srbyte
01:000C19B0 2E00            	   387:  move.l d0,d7 d7=byte count
                            	   388: *
01:000C19B2 7C00            	   389:  moveq.l #0,d6  d6=temp
                            	   390: *
01:000C19B4 9E84            	   391:  sub.l d4,d7 subtract address count from byte count
01:000C19B6 9EBC00000003    	   392:  sub.l #3,d7 adjust byte count for dbf and c-sum
01:000C19BC 99CC            	   393:  sub.l a4,a4 clear a4
                            	   394: *
01:000C19BE 61000026        	   395: addlp bsr srbyte
01:000C19C2 E186            	   396:  asl.l #8,d6
01:000C19C4 1C00            	   397:  move.b d0,d6
01:000C19C6 51CCFFF6        	   398:  dbf d4,addlp
01:000C19CA 2846            	   399:  move.l d6,a4 a4=pointer
                            	   400: *
01:000C19CC 61000018        	   401: datlp bsr srbyte
01:000C19D0 18C0            	   402:  move.b d0,(a4)+
01:000C19D2 51CFFFF8        	   403:  dbf d7,datlp
                            	   404: *
01:000C19D6 61000014        	   405:  bsr srbyte1
01:000C19DA 4600            	   406:  not.b d0
01:000C19DC BA00            	   407:  cmp.b d0,d5
01:000C19DE 6600FFB6        	   408:  bne srerr
01:000C19E2 6000FF7A        	   409:  bra srloop
                            	   410: *
01:000C19E6 6104            	   411: srbyte bsr.s srbyte1
01:000C19E8 DA00            	   412:  add.b d0,d5
01:000C19EA 4E75            	   413:  rts
01:000C19EC 4281            	   414: srbyte1   clr.l   d1
01:000C19EE 6100003A        	   415:          bsr     srint
01:000C19F2 6100EA5A        	   416:  bsr locase
01:000C19F6 903C0030        	   417:          sub.b   #'0',d0
01:000C19FA B03C0009        	   418:          cmp.b   #9,d0
01:000C19FE 6F04            	   419:          ble.s   sr3
01:000C1A00 903C0027        	   420:          sub.b   #39,d0
01:000C1A04 D280            	   421: sr3      add.l   d0,d1
01:000C1A06 E901            	   422:          asl.b   #4,d1
01:000C1A08 61000020        	   423:          bsr     srint
01:000C1A0C 6100EA40        	   424:  bsr locase
01:000C1A10 903C0030        	   425:          sub.b   #'0',d0
01:000C1A14 B03C0009        	   426:          cmp.b   #9,d0
01:000C1A18 6F04            	   427:          ble.s   sr4
01:000C1A1A 903C0027        	   428:          sub.b   #39,d0
01:000C1A1E D280            	   429: sr4      add.l   d0,d1
01:000C1A20 C2BC000000FF    	   430:          and.l   #$ff,d1
01:000C1A26 2001            	   431:          move.l d1,d0
01:000C1A28 4E75            	   432:  rts
                            	   433: *
01:000C1A2A 6100F218        	   434: srint bsr status
01:000C1A2E 6700000A        	   435:  beq srint1
01:000C1A32 6100F240        	   436:  bsr inch1
01:000C1A36 6000E92A        	   437:  bra mwarm
01:000C1A3A 6100F298        	   438: srint1 bsr stater1
01:000C1A3E 67EA            	   439:  beq.s srint
01:000C1A40 6000F2B8        	   440:  bra inter1
                            	   441: *
                            	   442: *******************************
                            	   443: *   Display rtc contents.     *
                            	   444: *******************************
                            	   445: *
01:000C1A44 0D              	   446: dcs dc.b $d,'Rtc time is ',0
01:000C1A45 5274632074696D65
01:000C1A4D 20697320
01:000C1A51 00
01:000C1A52 41FAFFF0        	   447: dc lea dcs(pc),a0
01:000C1A56 6100E980        	   448:  bsr pdata1
                            	   449: *
01:000C1A5A 41F90007FCA8    	   450:  lea.l time_st,a0   download time string.
01:000C1A60 4EB9000C0568    	   451:  jsr getrtc
                            	   452: *
01:000C1A66 10390007FCA8    	   453:  move.b hours,d0
01:000C1A6C C03C003F        	   454:  and.b #$3f,d0
01:000C1A70 6100E9FA        	   455:  bsr out2h
01:000C1A74 103C003A        	   456:  move.b #':',d0
01:000C1A78 6100F224        	   457:  bsr outch
                            	   458: *
01:000C1A7C 10390007FCA9    	   459:  move.b mins,d0
01:000C1A82 6100E9E8        	   460:  bsr out2h
01:000C1A86 103C003A        	   461:  move.b #':',d0
01:000C1A8A 6100F212        	   462:  bsr outch
                            	   463: *
01:000C1A8E 10390007FCAA    	   464:  move.b secs,d0
01:000C1A94 6100E9D6        	   465:  bsr out2h
01:000C1A98 6100E9F4        	   466:  bsr outs
01:000C1A9C 6100E9F0        	   467:  bsr outs
                            	   468: *
01:000C1AA0 10390007FCAE    	   469:  move.b date,d0
01:000C1AA6 6100E9C4        	   470:  bsr out2h
01:000C1AAA 103C002F        	   471:  move.b #'/',d0
01:000C1AAE 6100F1EE        	   472:  bsr outch
                            	   473: *
01:000C1AB2 10390007FCAD    	   474:  move.b month,d0
01:000C1AB8 6100E9B2        	   475:  bsr out2h
01:000C1ABC 103C002F        	   476:  move.b #'/',d0
01:000C1AC0 6100F1DC        	   477:  bsr outch
                            	   478: *
01:000C1AC4 103C0032        	   479:  move.b #$32,d0
01:000C1AC8 6100F1D4        	   480:  bsr outch
01:000C1ACC 103C0030        	   481:  move.b #$30,d0
01:000C1AD0 6100F1CC        	   482:  bsr outch
01:000C1AD4 10390007FCAC    	   483:  move.b year,d0
01:000C1ADA 6100E990        	   484:  bsr out2h
                            	   485: *
01:000C1ADE 6000E882        	   486:  bra mwarm
                            	   487: *
                            	   488: *
                            	   489: *******************************
                            	   490: *     Modify rtc contents.    *
                            	   491: *******************************
                            	   492: *
01:000C1AE2 0D              	   493: mcs      dc.b     $d,'rtc examine and alter from ',0,0
01:000C1AE3 727463206578616D
01:000C1AEB 696E6520616E6420
01:000C1AF3 616C746572206672
01:000C1AFB 6F6D20
01:000C1AFE 00
01:000C1AFF 00
01:000C1B00 41FAFFE0        	   494: mc       lea.l   mcs(pc),a0
01:000C1B04 6100E8E6        	   495:          bsr     prompt
                            	   496: *
01:000C1B08 6100E8C2        	   497: mcloop   bsr     pcrlf
01:000C1B0C C2BC00000007    	   498:  and.l #$07,d1
01:000C1B12 1001            	   499:          move.b  d1,d0
01:000C1B14 6100E956        	   500:          bsr     out2h
01:000C1B18 6100E974        	   501:          bsr     outs
01:000C1B1C 6100E970        	   502:          bsr     outs
                            	   503: *
01:000C1B20 41F90007FCA8    	   504: mcloop1  lea.l time_st,a0
01:000C1B26 4EB9000C0568    	   505:  jsr getrtc
01:000C1B2C 10301000        	   506:  move.b 0(a0,d1.w),d0
01:000C1B30 6100E93A        	   507:          bsr     out2h
01:000C1B34 6100F166        	   508:          bsr     inch
01:000C1B38 6100E914        	   509:          bsr     locase
                            	   510: *
01:000C1B3C B03C000D        	   511:          cmp.b   #$0d,d0
01:000C1B40 6604            	   512:          bne.s   mc1
01:000C1B42 5281            	   513:          addq.l #1,d1
01:000C1B44 60C2            	   514:          bra.s   mcloop
                            	   515: *
01:000C1B46 B03C002D        	   516: mc1      cmp.b   #'-',d0
01:000C1B4A 6604            	   517:          bne.s   mc2
01:000C1B4C 5381            	   518:          subq.l #1,d1
01:000C1B4E 60B8            	   519:          bra.s   mcloop
                            	   520: *
01:000C1B50 B03C0020        	   521: mc2      cmp.b   #' ',d0
01:000C1B54 6600E80C        	   522:          bne     mwarm
01:000C1B58 1E01            	   523:          move.b  d1,d7
01:000C1B5A 6100E8AC        	   524:          bsr     inhex
01:000C1B5E 1001            	   525:          move.b  d1,d0
01:000C1B60 1207            	   526:          move.b d7,d1
01:000C1B62 41F90007FCA8    	   527:  lea.l time_st,a0
01:000C1B68 4EB9000C0568    	   528:  jsr getrtc
01:000C1B6E 11801000        	   529:  move.b d0,0(a0,d1.w)
01:000C1B72 4EB9000C04F8    	   530:  jsr putrtc
01:000C1B78 5281            	   531:          addq.l    #1,d1
01:000C1B7A 6000FF8C        	   532:          bra     mcloop
                            	   533: *
                            	   534: *******************************
                            	   535: *   Display peripheral data   *
                            	   536: *******************************
                            	   537: *
01:000C1B7E 0D              	   538: dps      dc.b    $d,'Display peripheral data from ',0,0
01:000C1B7F 446973706C617920
01:000C1B87 7065726970686572
01:000C1B8F 616C206461746120
01:000C1B97 66726F6D20
01:000C1B9C 00
01:000C1B9D 00
01:000C1B9E 2020202020202020	   539: dps1 dc.b '           0  2  4  6  8  A  C  E'
01:000C1BA6 2020203020203220
01:000C1BAE 2034202036202038
01:000C1BB6 2020412020432020
01:000C1BBE 45
01:000C1BBF 2020203130203132	   540:      dc.b '   10 12 14 16 18 1A 1C 1E',0
01:000C1BC7 2031342031362031
01:000C1BCF 3820314120314320
01:000C1BD7 3145
01:000C1BD9 00
01:000C1BDA 41FAFFA2        	   541: dp       lea.l   dps(pc),a0
01:000C1BDE 6100E80C        	   542:          bsr     prompt
01:000C1BE2 2241            	   543:          move.l  d1,a1
01:000C1BE4 6100E7E6        	   544: dp2      bsr     pcrlf
01:000C1BE8 41FAFFB4        	   545:          lea     dps1(pc),a0
01:000C1BEC 6100E7FA        	   546:          bsr     pstring
01:000C1BF0 7601            	   547:          moveq   #1,d3
01:000C1BF2 6108            	   548: dploop   bsr.s   lp
01:000C1BF4 51CBFFFC        	   549:          dbf     d3,dploop
01:000C1BF8 6000E768        	   550:          bra     mwarm
                            	   551: *
01:000C1BFC 780F            	   552: lp       moveq   #15,d4
01:000C1BFE 6100E7CC        	   553:          bsr     pcrlf
01:000C1C02 2009            	   554:          move.l  a1,d0
01:000C1C04 6100E85A        	   555:          bsr     out8h
01:000C1C08 7402            	   556:          moveq   #2,d2
01:000C1C0A 6100E88E        	   557:          bsr     outns
                            	   558: *
01:000C1C0E 1019            	   559: lp1      move.b  (a1)+,d0
01:000C1C10 5249            	   560:          addq    #1,a1
01:000C1C12 6100E858        	   561:          bsr     out2h
01:000C1C16 6100E876        	   562:          bsr     outs
01:000C1C1A 0C440008        	   563:          cmpi    #8,d4
01:000C1C1E 6604            	   564:          bne.s   dp1
01:000C1C20 6100E86C        	   565:          bsr     outs
01:000C1C24 51CCFFE8        	   566: dp1      dbf     d4,lp1
01:000C1C28 4E75            	   567:          rts
                            	   568: *
                            	   569: ***************************
                            	   570: *   Dumb comms terminal   *
                            	   571: ***************************
01:000C1C2A 700C            	   572: co moveq #$0c,d0
01:000C1C2C 4EB9000C0C9E    	   573:  jsr outch
01:000C1C32 4EB9000C0C44    	   574: colp jsr status
01:000C1C38 6712            	   575:  beq.s colp1
01:000C1C3A 4EB9000C0C74    	   576:  jsr inch1
01:000C1C40 C0BC0000007F    	   577:  and.l #$7f,d0
01:000C1C46 4EB9000C0D08    	   578:  jsr outter0
01:000C1C4C 4EB9000C0CCA    	   579: colp1 jsr stater0
01:000C1C52 67DE            	   580:  beq.s colp
01:000C1C54 4EB9000C0CEC    	   581:  jsr inter0
01:000C1C5A C0BC0000007F    	   582:  and.l #$7f,d0
01:000C1C60 4EB9000C0C9E    	   583:  jsr outch
01:000C1C66 60CA            	   584:  bra.s colp
                            	   585: *
                            	   586: *******************************
                            	   587: *      Hex memory dump        *
                            	   588: *******************************
                            	   589: *
01:000C1C68 0D              	   590: hds dc.b $d,'Hex dump of memory  from ',0
01:000C1C69 4865782064756D70
01:000C1C71 206F66206D656D6F
01:000C1C79 7279202066726F6D
01:000C1C81 20
01:000C1C82 00
01:000C1C83 2020202020202020	   591: hds1 dc.b '           0  1  2  3  4  5  6  7'
01:000C1C8B 2020203020203120
01:000C1C93 2032202033202034
01:000C1C9B 2020352020362020
01:000C1CA3 37
01:000C1CA4 2020203820203920	   592:      dc.b '   8  9  A  B  C  D  E  F',0
01:000C1CAC 2041202042202043
01:000C1CB4 2020442020452020
01:000C1CBC 46
01:000C1CBD 00
01:000C1CBE 41FAFFA8        	   593: hd lea hds(pc),a0
01:000C1CC2 6100E728        	   594:  bsr prompt
                            	   595: 
01:000C1CC6 2241            	   596:  move.l d1,a1
01:000C1CC8 6100E702        	   597: hd2 bsr PCRLF
01:000C1CCC 41FAFFB5        	   598:  lea hds1(pc),a0
01:000C1CD0 6100E716        	   599:  bsr PSTRING
01:000C1CD4 760F            	   600:  moveq #15,d3
01:000C1CD6 611C            	   601: hloop bsr.s loop
01:000C1CD8 51CBFFFC        	   602:  dbf d3,hloop
                            	   603: *
01:000C1CDC 6100EF96        	   604:  bsr INCH1
01:000C1CE0 0C40000D        	   605:  cmpi #$d,d0
01:000C1CE4 67E2            	   606:  beq.s hd2
01:000C1CE6 0C40002D        	   607:  cmpi #'-',d0
01:000C1CEA 6600E676        	   608:  bne MWARM
01:000C1CEE 43E9FE00        	   609:  lea.l -512(a1),a1
01:000C1CF2 60D4            	   610:  bra.s hd2
                            	   611: *
01:000C1CF4 780F            	   612: loop moveq #15,d4
01:000C1CF6 6100E6D4        	   613:  bsr PCRLF
01:000C1CFA 2009            	   614:  move.l a1,d0
01:000C1CFC 6100E762        	   615:  bsr OUT8H
01:000C1D00 7402            	   616:  moveq #2,d2
01:000C1D02 6100E796        	   617:  bsr OUTNS
                            	   618: *
01:000C1D06 1019            	   619: loop1 move.b (a1)+,d0
01:000C1D08 6100E762        	   620:  bsr OUT2H
01:000C1D0C 6100E780        	   621:  bsr OUTS
01:000C1D10 0C440008        	   622:  cmpi #8,d4
01:000C1D14 6604            	   623:  bne.s hd1
01:000C1D16 6100E776        	   624:  bsr OUTS
01:000C1D1A 51CCFFEA        	   625: hd1 dbf d4,loop1
                            	   626: *
01:000C1D1E 7403            	   627:  moveq #3,d2
01:000C1D20 6100E778        	   628:  bsr OUTNS
01:000C1D24 43E9FFF0        	   629:  lea  -16(a1),a1
01:000C1D28 780F            	   630:  moveq #15,d4
01:000C1D2A 1019            	   631: loop2 move.b (a1)+,d0
01:000C1D2C 0C000020        	   632:  cmpi.b #$20,d0
01:000C1D30 6506            	   633:  blo.s hdx
01:000C1D32 0C00007F        	   634:  cmpi.b #$7f,d0
01:000C1D36 6502            	   635:  blo.s hdy
01:000C1D38 702E            	   636: hdx moveq #'.',d0
01:000C1D3A 6100EF62        	   637: hdy bsr OUTCH
01:000C1D3E 51CCFFEA        	   638:  dbf d4,loop2
01:000C1D42 4E75            	   639:  rts
                            	   640: *******************************
                            	   641: *     Ascii memory dump.      *
                            	   642: *******************************
                            	   643: *
01:000C1D44 0D              	   644: ads dc.b $d,'Ascii dump of memory from ',0
01:000C1D45 4173636969206475
01:000C1D4D 6D70206F66206D65
01:000C1D55 6D6F72792066726F
01:000C1D5D 6D20
01:000C1D5F 00
01:000C1D60 2020202020202020	   645: ads1 dc.b '           0   4   8   C   0   4   8   C   '
01:000C1D68 2020203020202034
01:000C1D70 2020203820202043
01:000C1D78 2020203020202034
01:000C1D80 2020203820202043
01:000C1D88 202020
01:000C1D8B 3020202034202020	   646:      dc.b '0   4   8   C   0   4   8   C  F',0
01:000C1D93 3820202043202020
01:000C1D9B 3020202034202020
01:000C1DA3 3820202043202046
01:000C1DAB 00
01:000C1DAC 41FAFF96        	   647: ad lea ads(pc),a0
01:000C1DB0 6100E63A        	   648:  bsr prompt
01:000C1DB4 2241            	   649:  move.l d1,a1
01:000C1DB6 6100E614        	   650: ad2 bsr PCRLF
01:000C1DBA 41FAFFA4        	   651:  lea ads1(pc),a0
01:000C1DBE 6100E628        	   652:  bsr PSTRING
01:000C1DC2 760F            	   653:  moveq #15,d3
01:000C1DC4 783F            	   654: adloop moveq #63,d4
01:000C1DC6 6100E604        	   655:  bsr PCRLF
01:000C1DCA 2009            	   656:  move.l a1,d0
01:000C1DCC 6100E692        	   657:  bsr OUT8H
01:000C1DD0 7402            	   658:  moveq #2,d2
01:000C1DD2 6100E6C6        	   659:  bsr OUTNS
01:000C1DD6 1019            	   660: adloop1 move.b (a1)+,d0
01:000C1DD8 0C000020        	   661:  cmpi.b #$20,d0
01:000C1DDC 6506            	   662:  blo.s adx
01:000C1DDE 0C00007F        	   663:  cmpi.b #$7f,d0
01:000C1DE2 6502            	   664:  blo.s ady
01:000C1DE4 702E            	   665: adx moveq #'.',d0
01:000C1DE6 6100EEB6        	   666: ady bsr OUTCH
01:000C1DEA 51CCFFEA        	   667:  dbf d4,adloop1
01:000C1DEE 51CBFFD4        	   668:  dbf d3,adloop
01:000C1DF2 6100EE80        	   669:  bsr INCH1
01:000C1DF6 0C00000D        	   670:  cmpi.b #$d,d0
01:000C1DFA 67BA            	   671:  beq.s ad2
01:000C1DFC 0C00002D        	   672:  cmpi.b #'-',d0
01:000C1E00 6600E560        	   673:  bne MWARM
01:000C1E04 43E9F800        	   674:  lea -2048(a1),a1
01:000C1E08 60AC            	   675:  bra.s ad2
                            	   676: *
                            	   677: *******************************
                            	   678: *  Poke memory with constant. *
                            	   679: *******************************
                            	   680: *
01:000C1E0A 0D              	   681: pms      dc.b    $d,'Poke memory  at ',0
01:000C1E0B 506F6B65206D656D
01:000C1E13 6F72792020617420
01:000C1E1B 00
01:000C1E1C 41FAFFEC        	   682: pm       lea.l   pms(pc),a0
01:000C1E20 6100E5CA        	   683:          bsr     prompt
01:000C1E24 2241            	   684:          move.l  d1,a1
01:000C1E26 41FA0035        	   685:          lea.l   values(pc),a0
01:000C1E2A 6100E5AC        	   686:          bsr     pdata1
01:000C1E2E 6100E5D8        	   687:          bsr     inhex
01:000C1E32 1281            	   688:          move.b  d1,(a1)
01:000C1E34 6000E52C        	   689:          bra     mwarm
                            	   690: *
                            	   691: *******************************
                            	   692: *  Fill memory with constant. *
                            	   693: *******************************
                            	   694: *
01:000C1E38 0D              	   695: fms dc.b $d,'Fill memory with constant from ',0
01:000C1E39 46696C6C206D656D
01:000C1E41 6F72792077697468
01:000C1E49 20636F6E7374616E
01:000C1E51 742066726F6D20
01:000C1E58 00
01:000C1E59 746F20          	   696: tos dc.b 'to ',0
01:000C1E5C 00
01:000C1E5D 76616C756520    	   697: values dc.b 'value ',0
01:000C1E63 00
01:000C1E64 41FAFFD2        	   698: fm lea fms(pc),a0
01:000C1E68 6100E582        	   699:  bsr prompt
01:000C1E6C 2241            	   700:  move.l d1,a1
01:000C1E6E 41FAFFE9        	   701:  lea tos(pc),a0
01:000C1E72 6100E578        	   702:  bsr prompt
01:000C1E76 2441            	   703:  move.l d1,a2
01:000C1E78 41FAFFE3        	   704:  lea values(pc),a0
01:000C1E7C 6100E56E        	   705:  bsr prompt
01:000C1E80 12C1            	   706: fmloop move.b d1,(a1)+
01:000C1E82 B5C9            	   707:  cmp.l a1,a2
01:000C1E84 66FA            	   708:  bne.s fmloop
01:000C1E86 6000E4DA        	   709:  bra MWARM
                            	   710: *
                            	   711: *******************************
                            	   712: *     Shift memory block.     *
                            	   713: *******************************
                            	   714: *
01:000C1E8A 0D              	   715: sms      dc.b    $d,'Shift memory from ',0
01:000C1E8B 5368696674206D65
01:000C1E93 6D6F72792066726F
01:000C1E9B 6D20
01:000C1E9D 00
01:000C1E9E 206C656E67746820	   716: lengths  dc.b    ' length ',0,0
01:000C1EA6 00
01:000C1EA7 00
01:000C1EA8 41FAFFE0        	   717: sm       lea.l   sms(pc),a0
01:000C1EAC 6100E53E        	   718:          bsr     prompt
01:000C1EB0 2241            	   719:          move.l  d1,a1
01:000C1EB2 41FAFFA5        	   720:          lea.l   tos(pc),a0
01:000C1EB6 6100E534        	   721:          bsr     prompt
01:000C1EBA 2441            	   722:          move.l  d1,a2
01:000C1EBC 41FAFFE0        	   723:          lea.l   lengths(pc),a0
01:000C1EC0 6100E52A        	   724:          bsr     prompt
01:000C1EC4 5341            	   725:          subq    #1,d1
01:000C1EC6 14D9            	   726: smloop   move.b  (a1)+,(a2)+
01:000C1EC8 51C9FFFC        	   727:          dbf     d1,smloop
01:000C1ECC 6000E494        	   728:          bra     mwarm
                            	   729: *
                            	   730: *******************************
                            	   731: *   Load text from keyboard.  *
                            	   732: *******************************
                            	   733: *
01:000C1ED0 0D              	   734: lks      dc.b    $d,'Load text from keyboard to memory at ',0
01:000C1ED1 4C6F616420746578
01:000C1ED9 742066726F6D206B
01:000C1EE1 6579626F61726420
01:000C1EE9 746F206D656D6F72
01:000C1EF1 7920617420
01:000C1EF6 00
01:000C1EF7 20746578742E2E28	   735: lks1     dc.b    ' text..(end with ^D)',0
01:000C1EFF 656E642077697468
01:000C1F07 205E4429
01:000C1F0B 00
01:000C1F0C 41FAFFC2        	   736: lk       lea.l   lks(pc),a0
01:000C1F10 6100E4DA        	   737:          bsr     prompt
01:000C1F14 2241            	   738:          move.l  d1,a1
01:000C1F16 41FAFFDF        	   739:          lea.l   lks1(pc),a0
01:000C1F1A 6100E4BC        	   740:          bsr     pdata1
01:000C1F1E 6100ED7C        	   741: lkloop   bsr     inch
01:000C1F22 12C0            	   742:          move.b  d0,(a1)+
01:000C1F24 B03C0004        	   743:          cmp.b   #4,d0
01:000C1F28 66F4            	   744:          bne.s   lkloop
01:000C1F2A 4229FFFF        	   745:          clr.b   -1(a1)
01:000C1F2E 6000E432        	   746:          bra     mwarm
                            	   747: *
                            	   748: *******************************
                            	   749: *      Find byte string.      *
                            	   750: *******************************
                            	   751: *
01:000C1F32 0D              	   752: fis      dc.b    $d,'Find byte string from ',0
01:000C1F33 46696E6420627974
01:000C1F3B 6520737472696E67
01:000C1F43 2066726F6D20
01:000C1F49 00
01:000C1F4A 2020206E756D6265	   753: nbs      dc.b    '   number of bytes in string ',0
01:000C1F52 72206F6620627974
01:000C1F5A 657320696E207374
01:000C1F62 72696E6720
01:000C1F67 00
01:000C1F68 2020456E74657220	   754: ebs      dc.b    '  Enter byte string... ',0
01:000C1F70 6279746520737472
01:000C1F78 696E672E2E2E20
01:000C1F7F 00
01:000C1F80 41FAFFB0        	   755: fi       lea.l   fis(pc),a0
01:000C1F84 6100E466        	   756:          bsr     prompt
01:000C1F88 2441            	   757:          move.l  d1,a2
01:000C1F8A 41FAFECD        	   758:          lea.l   tos(pc),a0
01:000C1F8E 6100E45C        	   759:          bsr     prompt
01:000C1F92 2641            	   760:          move.l  d1,a3
01:000C1F94 41FAFFB4        	   761:          lea.l   nbs(pc),a0
01:000C1F98 6100E452        	   762:          bsr     prompt
01:000C1F9C 2E01            	   763:          move.l  d1,d7
01:000C1F9E 5347            	   764:          subq    #1,d7
01:000C1FA0 41FAFFC6        	   765:          lea.l   ebs(pc),a0
01:000C1FA4 6100E442        	   766:          bsr     pstring
01:000C1FA8 41F900028000    	   767:          lea.l   rbuff,a0
01:000C1FAE 6100E458        	   768: inloop   bsr     inhex
01:000C1FB2 10C1            	   769:          move.b  d1,(a0)+
01:000C1FB4 51CFFFF8        	   770:          dbf     d7,inloop
01:000C1FB8 2248            	   771:          move.l  a0,a1
01:000C1FBA 41F900028000    	   772:          lea.l   rbuff,a0
01:000C1FC0 B508            	   773: fchk1    cmp.b   (a0)+,(a2)+
01:000C1FC2 6606            	   774:          bne.s   fnope
01:000C1FC4 B1C9            	   775:          cmp.l   a1,a0
01:000C1FC6 66F8            	   776:          bne.s   fchk1
01:000C1FC8 6110            	   777:          bsr.s   ffound
01:000C1FCA 41F900028000    	   778: fnope    lea.l   rbuff,a0
01:000C1FD0 284A            	   779:          move.l  a2,a4
01:000C1FD2 B5CB            	   780:          cmp.l   a3,a2
01:000C1FD4 6C00E38C        	   781:          bge     mwarm
01:000C1FD8 60E6            	   782:          bra.s   fchk1
                            	   783: *
01:000C1FDA 780F            	   784: ffound moveq #15,d4
01:000C1FDC 6100E3EE        	   785:  bsr PCRLF
01:000C1FE0 534C            	   786:  subq #1,a4
01:000C1FE2 200C            	   787:  move.l a4,d0
01:000C1FE4 6100E47A        	   788:  bsr OUT8H
01:000C1FE8 7402            	   789:  moveq #2,d2
01:000C1FEA 6100E4AE        	   790:  bsr OUTNS
                            	   791: *
01:000C1FEE 514C            	   792:  subq #8,a4
01:000C1FF0 101C            	   793: floop1 move.b (a4)+,d0
01:000C1FF2 6100E478        	   794:  bsr OUT2H
01:000C1FF6 6100E496        	   795:  bsr OUTS
01:000C1FFA 0C440008        	   796:  cmpi #8,d4
01:000C1FFE 6604            	   797:  bne.s fhd1
01:000C2000 6100E48C        	   798:  bsr OUTS
01:000C2004 51CCFFEA        	   799: fhd1 dbf d4,floop1
                            	   800: *
01:000C2008 7404            	   801:  moveq #4,d2
01:000C200A 6100E48E        	   802:  bsr OUTNS
01:000C200E 49ECFFF0        	   803:  lea  -16(a4),a4
01:000C2012 780F            	   804:  moveq #15,d4
01:000C2014 101C            	   805: floop2 move.b (a4)+,d0
01:000C2016 0C000020        	   806:  cmpi.b #$20,d0
01:000C201A 6506            	   807:  blo.s fhdx
01:000C201C 0C00007F        	   808:  cmpi.b #$7f,d0
01:000C2020 6502            	   809:  blo.s fhdy
01:000C2022 702E            	   810: fhdx moveq #'.',d0
01:000C2024 6100EC78        	   811: fhdy bsr OUTCH
01:000C2028 51CCFFEA        	   812:  dbf d4,floop2
01:000C202C 4E75            	   813:  rts
                            	   814: *
                            	   815: *******************************
                            	   816: *      Run user program.      *
                            	   817: *******************************
                            	   818: *
01:000C202E 0D              	   819: rps     dc.b    $d,'Run program from ',0,0
01:000C202F 52756E2070726F67
01:000C2037 72616D2066726F6D
01:000C203F 20
01:000C2040 00
01:000C2041 00
01:000C2042 41FAFFEA        	   820: rp      lea.l   rps(pc),a0
01:000C2046 6100E3A4        	   821:         bsr     prompt
01:000C204A 23C10007FC5A    	   822:         move.l  d1,upc
                            	   823: *
01:000C2050 083900050007FC58	   824: go1     btst    #5,usr       Check supervisor bit not set.
01:000C2058 660002BA        	   825:         bne     goerr        Error if so.
01:000C205C 42390007FC7C    	   826:         clr.b   bflg         Clear breakpoint flag.
                            	   827: *
01:000C2062 28790007FC5A    	   828: cgo     move.l  upc,a4       Extract user pc.
01:000C2068 43F90007FC5E    	   829:         lea.l   brkp,a1      Point to breakpoint space.
01:000C206E 7004            	   830:         moveq   #4,d0        Counter.
01:000C2070 95CA            	   831:         sub.l   a2,a2        Zero a2.
01:000C2072 2219            	   832: go2     move.l  (a1)+,d1     Breakpoint address.
01:000C2074 670E            	   833:         beq.s   go3          Zero address so no breakpoint.
01:000C2076 32B21800        	   834:         move.w  0(a2,d1.l),(a1) Save orgional instruction.
01:000C207A B9C1            	   835:         cmp.l   d1,a4        Check if breakpoint at user pc.
01:000C207C 6706            	   836:         beq.s   go3          Do not insert breakpoint if so.
01:000C207E 35BC4E4E1800    	   837:         move.w  #$4e4e,0(a2,d1.l) Replace with breakpoint trap.
01:000C2084 D3FC00000002    	   838: go3     add.l   #2,a1        Increment a1.
01:000C208A 51C8FFE6        	   839:         dbf     d0,go2       Try next breakpoint.
                            	   840: *
01:000C208E 20790007FC54    	   841:         move.l  usptr,a0     Extract user stack pointer.
01:000C2094 4E60            	   842:         move.l  a0,usp       And set it up.
01:000C2096 2F390007FC5A    	   843:         move.l  upc,-(sp)    Stack user pc.
01:000C209C 3F390007FC58    	   844:         move.w  usr,-(sp)    Stack user sr.
01:000C20A2 4CF97FFF0007FC18	   845:         movem.l ud,d0-d7/a0-a6 Set up user's registers.
01:000C20AA 4E73            	   846:         rte                  Geronimo!
                            	   847: *
                            	   848: *******************************
                            	   849: *    Jump tp user program.    *
                            	   850: *******************************
                            	   851: *
01:000C20AC 0D              	   852: jps      dc.b    $d,'Jump to program at  ',0
01:000C20AD 4A756D7020746F20
01:000C20B5 70726F6772616D20
01:000C20BD 61742020
01:000C20C1 00
01:000C20C2 41FAFFE8        	   853: ju       lea.l   jps(pc),a0
01:000C20C6 6100E310        	   854:          bsr     pdata1
01:000C20CA 6100E33C        	   855:          bsr     inhex
01:000C20CE 2041            	   856:          move.l  d1,a0
01:000C20D0 4ED0            	   857:          jmp     (a0)
                            	   858: *
                            	   859: **********************************
                            	   860: *  Jump to SK*DOS 68K warm start *
                            	   861: **********************************
                            	   862: *
01:000C20D2 0D              	   863: jvs      dc.b    $d,'Jump to SK*DOS 68K warm start..',0,0
01:000C20D3 4A756D7020746F20
01:000C20DB 534B2A444F532036
01:000C20E3 384B207761726D20
01:000C20EB 73746172742E2E
01:000C20F2 00
01:000C20F3 00
01:000C20F4 41FAFFDC        	   864: js       lea.l   jvs(pc),a0
01:000C20F8 6100E2DE        	   865:          bsr     pdata1
01:000C20FC 4EF9000C0362    	   866:          jmp     mwarm
                            	   867: *
                            	   868: *******************************
                            	   869: *   Display user registers.   *
                            	   870: *******************************
                            	   871: *
01:000C2102 0D              	   872: drs      dc.b    $d,'Display registers.',0
01:000C2103 446973706C617920
01:000C210B 7265676973746572
01:000C2113 732E
01:000C2115 00
01:000C2116 506320          	   873: drs1     dc.b    'Pc ',0
01:000C2119 00
01:000C211A 537220          	   874: drs2     dc.b    'Sr ',0
01:000C211D 00
01:000C211E 41FAFFE2        	   875: dr       lea.l   drs(pc),a0
01:000C2122 6100E2B4        	   876:          bsr     pdata1
01:000C2126 6104            	   877:          bsr.s   drx
01:000C2128 6000E238        	   878:          bra     mwarm
                            	   879: *
01:000C212C 48E7E0C0        	   880: drx      movem.l d0-d2/a0-a1,-(sp)
01:000C2130 6100E29A        	   881:          bsr     pcrlf
01:000C2134 41FAFFE0        	   882:          lea.l   drs1(pc),a0
01:000C2138 6100E29E        	   883:          bsr     pdata1
01:000C213C 20390007FC5A    	   884:          move.l  upc,d0
01:000C2142 6100E31C        	   885:          bsr     out8h
01:000C2146 6100E346        	   886:          bsr     outs
01:000C214A 6100E342        	   887:          bsr     outs
01:000C214E 41FAFFCA        	   888:          lea.l   drs2(pc),a0
01:000C2152 6100E284        	   889:          bsr     pdata1
01:000C2156 30390007FC58    	   890:          move.w  usr,d0
01:000C215C 6100E308        	   891:          bsr     out4h
01:000C2160 6100E26A        	   892:          bsr     pcrlf
01:000C2164 43F90007FC18    	   893:          lea.l   ud,a1
01:000C216A 123C00D0        	   894:          move.b  #$d0,d1
01:000C216E 611C            	   895:          bsr.s   drx1
01:000C2170 6100E25A        	   896:          bsr     pcrlf
01:000C2174 6116            	   897:          bsr.s   drx1
01:000C2176 6100E254        	   898:          bsr     pcrlf
01:000C217A 123C00A0        	   899:          move.b  #$a0,d1
01:000C217E 610C            	   900:          bsr.s   drx1
01:000C2180 6100E24A        	   901:          bsr     pcrlf
01:000C2184 6106            	   902:          bsr.s   drx1
01:000C2186 4CDF0307        	   903:          movem.l (sp)+,d0-d2/a0-a1
01:000C218A 4E75            	   904:          rts
                            	   905: *
01:000C218C 7403            	   906: drx1     moveq   #3,d2
01:000C218E 3001            	   907: drx2     move    d1,d0
01:000C2190 6100E2DA        	   908:          bsr     out2h
01:000C2194 6100E2F8        	   909:          bsr     outs
01:000C2198 2019            	   910:          move.l  (a1)+,d0
01:000C219A 6100E2C4        	   911:          bsr     out8h
01:000C219E 6100E2EE        	   912:          bsr     outs
01:000C21A2 6100E2EA        	   913:          bsr     outs
01:000C21A6 5241            	   914:          addq    #1,d1
01:000C21A8 51CAFFE4        	   915:          dbf     d2,drx2
01:000C21AC 4E75            	   916:          rts
                            	   917: *
                            	   918: *******************************
                            	   919: *    Set address register.    *
                            	   920: *******************************
                            	   921: *
01:000C21AE 0D              	   922: sas      dc.b    $d,'Set address register number ',0
01:000C21AF 5365742061646472
01:000C21B7 6573732072656769
01:000C21BF 73746572206E756D
01:000C21C7 62657220
01:000C21CB 00
01:000C21CC 41FAFFE0        	   923: sa       lea.l   sas(pc),a0
01:000C21D0 6100E21A        	   924:          bsr     prompt
01:000C21D4 1001            	   925:          move.b  d1,d0
01:000C21D6 02400007        	   926:          andi    #7,d0
01:000C21DA E500            	   927:          asl.b   #2,d0
01:000C21DC 41FAFC7F        	   928:          lea.l   values(pc),a0
01:000C21E0 6100E20A        	   929:          bsr     prompt
01:000C21E4 41F90007FC38    	   930:          lea.l   ua,a0
01:000C21EA 21810000        	   931:          move.l  d1,(a0,d0)
01:000C21EE 6000E172        	   932:          bra     mwarm
                            	   933: *
                            	   934: *******************************
                            	   935: *      Set data register.     *
                            	   936: *******************************
                            	   937: *
01:000C21F2 0D              	   938: sds      dc.b    $d,'Set data register number ',0,0
01:000C21F3 5365742064617461
01:000C21FB 2072656769737465
01:000C2203 72206E756D626572
01:000C220B 20
01:000C220C 00
01:000C220D 00
01:000C220E 41FAFFE2        	   939: sd       lea.l   sds(pc),a0
01:000C2212 6100E1D8        	   940:          bsr     prompt
01:000C2216 1001            	   941:          move.b  d1,d0
01:000C2218 02400007        	   942:          andi    #7,d0
01:000C221C E500            	   943:          asl.b   #2,d0
01:000C221E 41FAFC3D        	   944:          lea.l   values(pc),a0
01:000C2222 6100E1C8        	   945:          bsr     prompt
01:000C2226 41F90007FC18    	   946:          lea.l   ud,a0
01:000C222C 21810000        	   947:          move.l  d1,(a0,d0)
01:000C2230 6000E130        	   948:          bra     mwarm
                            	   949: *
                            	   950: *******************************
                            	   951: *     Set status register.    *
                            	   952: *******************************
                            	   953: *
01:000C2234 0D              	   954: sss      dc.b    $d,'Set status register to ',0,0
01:000C2235 5365742073746174
01:000C223D 7573207265676973
01:000C2245 74657220746F20
01:000C224C 00
01:000C224D 00
01:000C224E 41FAFFE4        	   955: ss       lea.l   sss(pc),a0
01:000C2252 6100E198        	   956:          bsr     prompt
01:000C2256 41F90007FC58    	   957:          lea.l   usr,a0
01:000C225C 3081            	   958:          move.w  d1,(a0)
01:000C225E 6000E102        	   959:          bra     mwarm
                            	   960: *
                            	   961: *******************************
                            	   962: *     Set program counter.    *
                            	   963: *******************************
                            	   964: *
01:000C2262 0D              	   965: sps      dc.b    $d,'Set program counter to ',0,0
01:000C2263 5365742070726F67
01:000C226B 72616D20636F756E
01:000C2273 74657220746F20
01:000C227A 00
01:000C227B 00
01:000C227C 41FAFFE4        	   966: sp       lea.l   sps(pc),a0
01:000C2280 6100E16A        	   967:          bsr     prompt
01:000C2284 41F90007FC5A    	   968:          lea.l   upc,a0
01:000C228A 2081            	   969:          move.l  d1,(a0)
01:000C228C 6000E0D4        	   970:          bra     mwarm
                            	   971: *
                            	   972: *******************************
                            	   973: *     Trace user counter.     *
                            	   974: *******************************
                            	   975: *
01:000C2290 0D              	   976: trs     dc.b    $d,'Trace program from ',0,0
01:000C2291 5472616365207072
01:000C2299 6F6772616D206672
01:000C22A1 6F6D20
01:000C22A4 00
01:000C22A5 00
01:000C22A6 41FAFFE8        	   977: tr      lea.l   trs(pc),a0
01:000C22AA 6100E140        	   978:         bsr     prompt
01:000C22AE 23C10007FC5A    	   979:         move.l  d1,upc
                            	   980: *
01:000C22B4 08F900070007FC58	   981:         bset    #7,usr            Set trace bit in saved status reg.
01:000C22BC 6000FD92        	   982:         bra     go1
                            	   983: *
                            	   984: *******************************
                            	   985: * Continue after breakpoint.  *
                            	   986: *******************************
                            	   987: *
01:000C22C0 0D              	   988: cps dc.b $d,'Continue after breakpoint.',0
01:000C22C1 436F6E74696E7565
01:000C22C9 2061667465722062
01:000C22D1 7265616B706F696E
01:000C22D9 742E
01:000C22DB 00
01:000C22DC 41FAFFE2        	   989: cp lea.l cps(pc),a0
01:000C22E0 6100E0F6        	   990:  bsr pdata1
01:000C22E4 083900050007FC58	   991:  btst #5,usr
01:000C22EC 6626            	   992:  bne.s goerr
01:000C22EE 08F900070007FC58	   993:  bset #7,usr
01:000C22F6 50F90007FC7C    	   994:  st bflg
01:000C22FC 6000FD64        	   995:  bra   cgo
                            	   996: *
01:000C2300 5375706572766973	   997: goerrs dc.b 'Supervisor bit set.',0
01:000C2308 6F72206269742073
01:000C2310 65742E
01:000C2313 00
01:000C2314 41FAFFEA        	   998: goerr lea.l goerrs(pc),a0
01:000C2318 6100E0CE        	   999:  bsr pstring
01:000C231C 6000E044        	  1000:  bra mwarm
                            	  1001: *
                            	  1002: *******************************
                            	  1003: *    Display breakpoints.     *
                            	  1004: *******************************
                            	  1005: *
01:000C2320 0D              	  1006: brs     dc.b    $d,'Display breakpoints.',0
01:000C2321 446973706C617920
01:000C2329 627265616B706F69
01:000C2331 6E74732E
01:000C2335 00
01:000C2336 41FAFFE8        	  1007: br      lea.l   brs(pc),a0
01:000C233A 6100E09C        	  1008:         bsr     pdata1
01:000C233E 6100E08C        	  1009:         bsr     pcrlf
01:000C2342 43F90007FC5E    	  1010: brk     lea.l   brkp,a1      Point to breakpoint table.
01:000C2348 7200            	  1011:         moveq   #0,d1        Counter.
01:000C234A 1001            	  1012: brk0    move.b  d1,d0        Breakpoint number into d0.
01:000C234C 6100E124        	  1013:         bsr     outh         Print breakpoint number.
01:000C2350 6100E13C        	  1014:         bsr     outs
01:000C2354 2011            	  1015:         move.l  (a1),d0      Extract breakpoint location.
01:000C2356 6100E108        	  1016:         bsr     out8h
01:000C235A 6100E070        	  1017:         bsr     pcrlf
01:000C235E D3FC00000006    	  1018: brk01   add.l   #6,a1        Increment pointer.
01:000C2364 D23C0001        	  1019:         add.b   #1,d1        Increment offset.
01:000C2368 B23C0004        	  1020:         cmp.b   #4,d1        Check if done.
01:000C236C 6FDC            	  1021:         ble.s   brk0         Loop until done.
01:000C236E 6000DFF2        	  1022:         bra     mwarm
                            	  1023: *
                            	  1024: *******************************
                            	  1025: *      Define breakpoint.     *
                            	  1026: *******************************
                            	  1027: *
01:000C2372 0D              	  1028: dbs     dc.b    $d,'Define breakpoint number ',0,0
01:000C2373 446566696E652062
01:000C237B 7265616B706F696E
01:000C2383 74206E756D626572
01:000C238B 20
01:000C238C 00
01:000C238D 00
01:000C238E 496E76616C696420	  1029: bre     dc.b    'Invalid breakpoint',7,0
01:000C2396 627265616B706F69
01:000C239E 6E74
01:000C23A0 07
01:000C23A1 00
01:000C23A2 41FAFFCE        	  1030: db      lea.l   dbs(pc),a0
01:000C23A6 6100E044        	  1031:         bsr     prompt
01:000C23AA 4A81            	  1032:         tst.l   d1           Check within bounds.
01:000C23AC 6D22            	  1033:         blt.s   brke         Too small.
01:000C23AE B2BC00000004    	  1034:         cmp.l   #4,d1        Check other bound.
01:000C23B4 6E1A            	  1035:         bgt.s   brke         Too big
                            	  1036: *
01:000C23B6 43F90007FC5E    	  1037:         lea.l   brkp,a1      point to table.
01:000C23BC C3FC0006        	  1038:         muls    #6,d1        Offset in table.
01:000C23C0 D3C1            	  1039:         add.l   d1,a1        Point to slot.
                            	  1040: *
01:000C23C2 41FAFA99        	  1041:         lea.l   values(pc),a0
01:000C23C6 6100E024        	  1042:         bsr     prompt
01:000C23CA 2281            	  1043:         move.l  d1,(a1)      Place address in slot.
01:000C23CC 6000DF94        	  1044:         bra     mwarm
                            	  1045: *
01:000C23D0 41FAFFBC        	  1046: brke    lea.l   bre(pc),a0
01:000C23D4 6100E012        	  1047:         bsr     pstring
01:000C23D8 6000DF88        	  1048:         bra     mwarm
                            	  1049: *
                            	  1050: *******************************
                            	  1051: *       Set input port.       *
                            	  1052: *******************************
                            	  1053: *
01:000C23DC 0D              	  1054: sis      dc.b    $d,'Set input port to ',0
01:000C23DD 53657420696E7075
01:000C23E5 7420706F72742074
01:000C23ED 6F20
01:000C23EF 00
01:000C23F0 41FAFFEA        	  1055: si       lea.l   sis(pc),a0
01:000C23F4 6100DFF6        	  1056:          bsr     prompt
01:000C23F8 E501            	  1057:          asl.b   #2,d1
01:000C23FA 13C10007FC7D    	  1058:          move.b  d1,iport
01:000C2400 6000DF60        	  1059:          bra     mwarm
                            	  1060: *
                            	  1061: *******************************
                            	  1062: *       Set output port.      *
                            	  1063: *******************************
                            	  1064: *
01:000C2404 0D              	  1065: sos      dc.b    $d,'Set output port to ',0,0
01:000C2405 536574206F757470
01:000C240D 757420706F727420
01:000C2415 746F20
01:000C2418 00
01:000C2419 00
01:000C241A 41FAFFE8        	  1066: so       lea.l   sos(pc),a0
01:000C241E 6100DFCC        	  1067:          bsr     prompt
01:000C2422 E501            	  1068:          asl.b   #2,d1
01:000C2424 13C10007FC7E    	  1069:          move.b  d1,oport
01:000C242A 6000DF36        	  1070:          bra     mwarm
                            	  1071: *
                            	  1072: *******************************
                            	  1073: *  Random read floppy test.   *
                            	  1074: *******************************
                            	  1075: *
01:000C242E 0D              	  1076: tds      dc.b    $d,'Random read test on drive ',0
01:000C242F 52616E646F6D2072
01:000C2437 6561642074657374
01:000C243F 206F6E2064726976
01:000C2447 6520
01:000C2449 00
01:000C244A 41FAFFE2        	  1077: td       lea.l   tds(pc),a0
01:000C244E 6100DF9C        	  1078:          bsr     prompt
01:000C2452 41F90007FC9E    	  1079:          lea.l   sys_dcb,a0
01:000C2458 217C000280000006	  1080:          move.l  #rbuff,6(a0)
01:000C2460 1081            	  1081:          move.b  d1,(a0)
01:000C2462 6100E598        	  1082:  bsr select
01:000C2466 41FA0061        	  1083:          lea.l   hks(pc),a0
01:000C246A 6100DF6C        	  1084:          bsr     pdata1
01:000C246E 41F90007FC9E    	  1085:          lea.l   sys_dcb,a0
01:000C2474 6100E5D8        	  1086:          bsr     restore
01:000C2478 41F90007FC9E    	  1087: tdl      lea.l   sys_dcb,a0
01:000C247E 203C00000050    	  1088:          move.l  #80,d0
01:000C2484 6100E020        	  1089:          bsr     random
01:000C2488 11400003        	  1090:          move.b  d0,3(a0)
01:000C248C 700F            	  1091:          moveq   #15,d0
01:000C248E 6100E016        	  1092:          bsr     random
01:000C2492 11400005        	  1093:          move.b  d0,5(a0)
01:000C2496 6100E5C2        	  1094:          bsr     read
01:000C249A 6100E7A8        	  1095:          bsr     status
01:000C249E 6700FFD8        	  1096:          beq     tdl
01:000C24A2 41F90007FC9E    	  1097:          lea.l   sys_dcb,a0
01:000C24A8 6100E5A4        	  1098:          bsr     restore
01:000C24AC 6000DEB4        	  1099:          bra     mwarm
                            	  1100: *
                            	  1101: 
                            	  1102: *******************************
                            	  1103: *    Test floppy stepping.    *
                            	  1104: *******************************
                            	  1105: *
01:000C24B0 0D              	  1106: tss      dc.b    $d,'Test stepping on drive ',0
01:000C24B1 5465737420737465
01:000C24B9 7070696E67206F6E
01:000C24C1 20647269766520
01:000C24C8 00
01:000C24C9 2048697420616E79	  1107: hks      dc.b    ' Hit any key to stop......',0
01:000C24D1 206B657920746F20
01:000C24D9 73746F702E2E2E2E
01:000C24E1 2E2E
01:000C24E3 00
01:000C24E4 41FAFFCA        	  1108: ts       lea.l   tss(pc),a0
01:000C24E8 6100DF02        	  1109:          bsr     prompt
01:000C24EC 41F90007FC9E    	  1110:          lea.l   sys_dcb,a0
01:000C24F2 1081            	  1111:          move.b  d1,(a0)
01:000C24F4 6100E506        	  1112:          bsr     select
01:000C24F8 41FAFFCF        	  1113:          lea.l   hks(pc),a0
01:000C24FC 6100DEDA        	  1114:          bsr     pdata1
01:000C2500 41F90007FC9E    	  1115:          lea.l   sys_dcb,a0
01:000C2506 6100E546        	  1116: tsl      bsr     restore
01:000C250A 143C0050        	  1117:          move.b  #80,d2
01:000C250E 6100E544        	  1118:          bsr     seek
01:000C2512 6100E730        	  1119:          bsr     status
01:000C2516 67EE            	  1120:          beq.s   tsl
01:000C2518 6100E534        	  1121:          bsr     restore
01:000C251C 6000DE44        	  1122:          bra     mwarm
                            	  1123: *
                            	  1124: *******************************
                            	  1125: *     Format floppy disc.     *
                            	  1126: *******************************
                            	  1127: *
01:000C2520 0D              	  1128: dfs      dc.b    $d,'Format disc to SK*DOS 68k standard on drive ',0
01:000C2521 466F726D61742064
01:000C2529 69736320746F2053
01:000C2531 4B2A444F53203638
01:000C2539 6B207374616E6461
01:000C2541 7264206F6E206472
01:000C2549 69766520
01:000C254D 00
01:000C254E 202041726520796F	  1129: ays      dc.b    '  Are you sure(y-n)? ',0
01:000C2556 7520737572652879
01:000C255E 2D6E293F20
01:000C2563 00
01:000C2564 0D              	  1130: df_nok   dc.b    $d,$a,'The disk is write protected!',7,7,7,0
01:000C2565 0A
01:000C2566 546865206469736B
01:000C256E 2069732077726974
01:000C2576 652070726F746563
01:000C257E 74656421
01:000C2582 07
01:000C2583 07
01:000C2584 07
01:000C2585 00
01:000C2586 466F726D61742061	  1131: dds      dc.b    'Format as double density(y-n)? ',0
01:000C258E 7320646F75626C65
01:000C2596 2064656E73697479
01:000C259E 28792D6E293F20
01:000C25A5 00
01:000C25A6 6000DDBA        	  1132: df       bra     mwarm
                            	  1133: *
                            	  1134: *******************************
                            	  1135: *      Read disc sector.      *
                            	  1136: *******************************
                            	  1137: *
01:000C25AA 0D              	  1138: rss      dc.b    $d,'Read',0
01:000C25AB 52656164
01:000C25AF 00
01:000C25B0 5468652064697363	  1139: wps      dc.b    'The disc is write protected!',0
01:000C25B8 2069732077726974
01:000C25C0 652070726F746563
01:000C25C8 74656421
01:000C25CC 00
01:000C25CD 536563746F72206E	  1140: snfs     dc.b    'Sector not found!',0
01:000C25D5 6F7420666F756E64
01:000C25DD 21
01:000C25DE 00
01:000C25DF 435243206572726F	  1141: crcs     dc.b    'CRC error!',0
01:000C25E7 7221
01:000C25E9 00
01:000C25EA 44617461206C6F73	  1142: dls      dc.b    'Data lost or overrun!',0
01:000C25F2 74206F72206F7665
01:000C25FA 7272756E21
01:000C25FF 00
01:000C2600 41FAFFA8        	  1143: rs       lea.l   rss(pc),a0
01:000C2604 6100DDD2        	  1144:          bsr     pdata1
01:000C2608 6100006E        	  1145:          bsr     fdcb
01:000C260C 4EB9000C0A5A    	  1146:          jsr     read
01:000C2612 6000DD4E        	  1147:          bra     mwarm
                            	  1148: *
01:000C2616 20736563746F7220	  1149: fds      dc.b    ' sector on drive ',0
01:000C261E 6F6E206472697665
01:000C2626 20
01:000C2627 00
01:000C2628 20747261636B20  	  1150: trks     dc.b    ' track ',0
01:000C262F 00
01:000C2630 20736563746F7220	  1151: ssecs     dc.b    ' sector ',0
01:000C2638 00
01:000C2639 2020646174612061	  1152: das      dc.b    '  data address ',0,0
01:000C2641 64647265737320
01:000C2648 00
01:000C2649 00
01:000C264A 4572726F72206F6E	  1153: ers      dc.b    'Error on drive ',0
01:000C2652 20647269766520
01:000C2659 00
                            	  1154: *
                            	  1155: *******************************
                            	  1156: *      Write disc sector.     *
                            	  1157: *******************************
                            	  1158: *
01:000C265A 0D              	  1159: wss      dc.b    $d,'Write',0,0
01:000C265B 5772697465
01:000C2660 00
01:000C2661 00
01:000C2662 41FAFFF6        	  1160: ws       lea.l   wss(pc),a0
01:000C2666 6100DD70        	  1161:          bsr     pdata1
01:000C266A 6100000C        	  1162:          bsr     fdcb
01:000C266E 4EB9000C0A60    	  1163:          jsr     write
01:000C2674 6000DCEC        	  1164:          bra     mwarm
                            	  1165: *
01:000C2678 43F90007FC9E    	  1166: fdcb     lea.l   sys_dcb,a1
01:000C267E 41FAFF96        	  1167:          lea.l   fds(pc),a0
01:000C2682 6100DD68        	  1168:          bsr     prompt
01:000C2686 1281            	  1169:          move.b  d1,(a1)
01:000C2688 41FAFF9E        	  1170:          lea.l   trks(pc),a0
01:000C268C 6100DD5E        	  1171:          bsr     prompt
01:000C2690 13410003        	  1172:          move.b  d1,3(a1)
01:000C2694 41FAFF9A        	  1173:          lea.l   ssecs(pc),a0
01:000C2698 6100DD52        	  1174:          bsr     prompt
01:000C269C 13410005        	  1175:          move.b  d1,5(a1)
01:000C26A0 41FAFF97        	  1176:          lea.l   das(pc),a0
01:000C26A4 6100DD46        	  1177:          bsr     prompt
01:000C26A8 23410006        	  1178:          move.l  d1,6(a1)
01:000C26AC 2049            	  1179:          move.l  a1,a0
01:000C26AE 6100E34C        	  1180:          bsr     select
01:000C26B2 4E75            	  1181:          rts
                            	  1182: *
                            	  1183: ***********************************
                            	  1184: * Inspect disk contents (sectors) *
                            	  1185: ***********************************
01:000C26B4 0C              	  1186: ids      dc.b    $c,'Inspect sectors on drive ',0
01:000C26B5 496E737065637420
01:000C26BD 736563746F727320
01:000C26C5 6F6E206472697665
01:000C26CD 20
01:000C26CE 00
01:000C26CF 0A              	  1187: id1      dc.b    $a,$d,'SIS found, max track = ',0
01:000C26D0 0D
01:000C26D1 53495320666F756E
01:000C26D9 642C206D61782074
01:000C26E1 7261636B203D20
01:000C26E8 00
01:000C26E9 2020736563746F72	  1188: ids2     dc.b    '  sectors/track = ',0
01:000C26F1 732F747261636B20
01:000C26F9 3D20
01:000C26FB 00
                            	  1189: *
01:000C26FC 43F90007FC9E    	  1190: id       lea.l   sys_dcb,a1 point to system FCB
01:000C2702 41FAFFB0        	  1191:          lea     ids(pc),a0
01:000C2706 6100DCE4        	  1192:          bsr     prompt
01:000C270A 1281            	  1193:          move.b  d1,(a1) drive
01:000C270C 2049            	  1194:          move.l  a1,a0
01:000C270E 6100E2EC        	  1195:          bsr select
                            	  1196: *
01:000C2712 137C00000003    	  1197:          move.b  #0,3(a1) pick up SIS at trk 00 sec 03
01:000C2718 137C00030005    	  1198:          move.b  #3,5(a1) 
01:000C271E 237C000004000006	  1199:          move.l  #$400,6(a1)
01:000C2726 2049            	  1200:          move.l  a1,a0
01:000C2728 6100E330        	  1201:          bsr     read
                            	  1202: *
01:000C272C 227C00000400    	  1203:           move.l #$400,a1
                            	  1204: *       
01:000C2732 6100DC98        	  1205:           bsr    PCRLF
01:000C2736 41FAF54B        	  1206:           lea    hds1(pc),a0
01:000C273A 6100DCAC        	  1207:           bsr    PSTRING
01:000C273E 760F            	  1208:           moveq  #15,d3
01:000C2740 4EB9000C1CF4    	  1209: diloop    jsr    loop
01:000C2746 51CBFFF8        	  1210:           dbf    d3,diloop
                            	  1211: *          
01:000C274A 4EF9000C0362    	  1212:           jmp    mwarm
                            	  1213: *

Source: "monk.txt"
                            	   282: *
                            	   283:  include ossubs.txt

Source: "ossubs.txt"
                            	     1: ***********************************************
                            	     2: * OS interface routines (BIOS) for SK*DOS 68K *
                            	     3: ***********************************************
                            	     4: *
                            	     5: * EXTERNAL REFERENCES - WATCH OUT FOR THESE AS THEY MAY CHANGE
                            	     6: 
                            	     7: VRBLES    EQU $1400         BEGINNING OF SK*DOS VARIABLE AREA
                            	     8: GETDAT    EQU $100C         VECTOR TO GET THE DATE
                            	     9: INTIME    EQU $1012         VECTOR TO GET THE TIME
                            	    10: DICOLD    EQU $1100         DISK COLD-START INIT
                            	    11: DIWARM    EQU $1106         DISK WARM-START INIT
                            	    12: DIREAD    EQU $110C         DISK READ
                            	    13: DIWRIT    EQU $1112         DISK WRITE
                            	    14: DICHEK    EQU $1118         DISK READY CHECK
                            	    15: DIMOFF    EQU $111E         TURN OFF DISK MOTOR
                            	    16: DIREST    EQU $1124         PRIMARY DISK RESTORE
                            	    17: DISEEK    EQU $112A         PRIMARY DISK SEEK
                            	    18: ERRTYP    EQU VRBLES+782    ERROR TYPE
                            	    19: INECHO    EQU VRBLES+800    INPUT ECHO FLAG
                            	    20: STPRAT    EQU $1131         STEP RATES FOR THREE DRIVES
                            	    21: DRUSED    EQU $113B         DRIVE USED TABLE
                            	    22: VERFLG    EQU $1145         VERIFY FLAG
                            	    23: SINITV    EQU $1180         SERIAL PORT INIT
                            	    24: STATVE    EQU $1186         SERIAL PORT STATUS CHECK
                            	    25: OUTCHV    EQU $118C         OUTPUT TO PORT
                            	    26: OFFINI    EQU $1018         INITIAL OFFSET VALUE
                            	    27: INCHV     EQU $1192         INPUT FROM KBD WITH ECHO
                            	    28: KINPUV    EQU $1198         INPUT W/O ECHO
                            	    29: MONITV    EQU $11AA         RETURN TO MONITOR
                            	    30: RESETV    EQU $11B0         RESET MONITOR/SYSTEM
                            	    31: TIMINI    EQU $11B6         TIMER INITIALIZE
                            	    32: TIMOFF    EQU $11BC         TIMER OFF
                            	    33: TIMON     EQU $11C2         TIMER ON
                            	    34: MEMINI    equ $101C         end of availible system RAM
                            	    35: *
                            	    36: * SK*DOS FCB EQUATES
                            	    37: FCBDAT  EQU  96        Beginning of data buffer (256 bytes)
                            	    38: FCBCSE  EQU  35        Current sector in buffer
                            	    39: FCBCTR  EQU  34        Current track in buffer
                            	    40: FCBDRV  EQU  3         Drive number
                            	    41: FCBERR  EQU  1         Error code
                            	    42: 
                            	    43: ***************************************
                            	    44: **** --- PART 1 - DISK DRIVERS --- ****
                            	    45: ***************************************
                            	    46: 
                            	    47: * CAUTION - THESE DRIVERS MUST PRESERVE ALL REGISTERS!!!
                            	    48: 
                            	    49: *********************************************
                            	    50: * READ ENTRY POINT FOR PRIMARY DISK DRIVERS
                            	    51: *********************************************
                            	    52: 
                            	    53: * THIS IS ESSENTIALLY SREAD OPERATION
                            	    54: 
                            	    55: * ENTER: A4 POINTS TO FCB WHICH NEEDS DATA.
                            	    56: *        FCBDRV(A4) HAS DRIVE NUMBER
                            	    57: *        FCBCTR(A4) HAS TRACK NUMBER
                            	    58: *        FCBCSE(A4) HAS SECTOR NUMBER
                            	    59: 
                            	    60: * EXIT:  ZERO IF NO ERROR;
                            	    61: *        IF ERROR: NON-ZERO,
                            	    62: *                  FCBERR(A4) AND ERRTYP BOTH HAVE ERROR CODE
                            	    63: *        ALL REGISTERS RESTORED!
                            	    64: 
01:000C2750 48E7F0F8        	    65: PRIMRD    movem.l d0-d3/a0-a4,-(A7)
                            	    66: 
01:000C2754 41F90007FC9E    	    67:           lea.l  sys_dcb,a0        build MONK FCB
01:000C275A 10AC0003        	    68:           move.b FCBDRV(A4),(a0)   drive
01:000C275E 116C00220003    	    69:           move.b FCBCTR(a4),3(a0)  track
01:000C2764 116C00230005    	    70:           move.b FCBCSE(a4),5(a0)  sector
01:000C276A 43EC0060        	    71:           lea.l  FCBDAT(a4),a1     buffer
01:000C276E 21490006        	    72:           move.l a1,6(a0)
                            	    73: *
01:000C2772 4EB9000C09FC    	    74:           jsr select
01:000C2778 4EB9000C0A5A    	    75:           jsr read
                            	    76: *
01:000C277E 4CDF1F0F        	    77:           movem.l (A7)+,d0-d3/a0-a4
01:000C2782 4E75            	    78:           RTS
                            	    79: *
                            	    80: *********************************************
                            	    81: * WRITE ENTRY POINT FOR PRIMARY DISK DRIVERS
                            	    82: *********************************************
                            	    83: 
                            	    84: * THIS IS ESSENTIALLY SWRITE OPERATION
                            	    85: 
                            	    86: * ENTER: A4 POINTS TO FCB WHICH NEEDS DATA.
                            	    87: *        FCBDRV(A4) HAS DRIVE NUMBER
                            	    88: *        FCBCTR(A4) HAS TRACK NUMBER
                            	    89: *        FCBCSE(A4) HAS SECTOR NUMBER
                            	    90: 
                            	    91: * EXIT:  ZERO IF NO ERROR;
                            	    92: *        IF ERROR: NON-ZERO,
                            	    93: *                  FCBERR(A4) AND ERRTYP BOTH HAVE ERROR CODE
                            	    94: *        ALL REGISTERS RESTORED!
                            	    95: 
01:000C2784 48E7F0F8        	    96: PRIMWR    movem.l d0-d3/a0-a4,-(A7)
                            	    97: 
01:000C2788 41F90007FC9E    	    98:           lea.l  sys_dcb,a0        build MONK FCB
01:000C278E 10AC0003        	    99:           move.b FCBDRV(A4),(a0)   drive
01:000C2792 116C00220003    	   100:           move.b FCBCTR(a4),3(a0)  track
01:000C2798 116C00230005    	   101:           move.b FCBCSE(a4),5(a0)  sector
01:000C279E 43EC0060        	   102:           lea.l  FCBDAT(a4),a1     buffer
01:000C27A2 21490006        	   103:           move.l a1,6(a0)
                            	   104: *
01:000C27A6 4EB9000C09FC    	   105:           jsr select
01:000C27AC 4EB9000C0A60    	   106:           jsr write
                            	   107: *
01:000C27B2 4CDF1F0F        	   108:           movem.l (A7)+,d0-d3/a0-a4
01:000C27B6 4E75            	   109:           RTS
                            	   110: *
                            	   111: ******************************************
                            	   112: **** --- PART 2 - CONSOLE DRIVERS --- ****
                            	   113: ******************************************
                            	   114: 
                            	   115: * CONVENTIONS: D1-D5 AND A1-A5 MUST BE PRESERVED
                            	   116: *                  (EXCEPT WHEN D5 IS FOR INPUT)
                            	   117: *              OTHER REGISTERS ARE SCRATCH
                            	   118: 
                            	   119: 
                            	   120: * SERIAL INPUT PORT STATUS CHECK.
                            	   121: *
                            	   122: *    INPUT: NONE
                            	   123: *    OUTPUT: RETURN ZERO IF NO CHARACTER READY,
                            	   124: *                   NON-ZERO IF CHARACTER IS THERE
                            	   125: *    REGISTERS USED: NONE (MUST PRESERVE D5)
                            	   126: 
01:000C27B8 4EF9000C0C44    	   127: STAT      jmp status             
                            	   128: 
                            	   129: * OUTPUT CHARACTER IN D5 TO TERMINAL
                            	   130: *
                            	   131: *    INPUT: D5 HOLDS CHARACTER TO OUTPUT
                            	   132: *    OUTPUT: NONE
                            	   133: *    REGISTERS USED: NONE (MUST PRESERVE D5)
                            	   134: 
01:000C27BE 48E78000        	   135: OUTEEE      movem.l d0,-(A7)
01:000C27C2 2005            	   136:             move.l d5,d0
01:000C27C4 4EB9000C0C9E    	   137:             jsr outch
01:000C27CA 4CDF0001        	   138:             movem.l (A7)+,d0
01:000C27CE 4E75            	   139:             rts
                            	   140: 
                            	   141: * INPUT CHARACTER INTO D5 AND ECHO IT
                            	   142: *
                            	   143: *    INPUT: NONE
                            	   144: *    OUTPUT: D5 HOLDS 7-BIT CHARACTER INPUT
                            	   145: *    REGISTERS USED: PRESERVED (EXCEPT D5 HOLDS CHAR)
                            	   146: 
01:000C27D0 48E78000        	   147: INEEE       movem.l d0,-(A7)
01:000C27D4 4EB9000C0C9C    	   148:             jsr inch
01:000C27DA 2A00            	   149:             move.l d0,d5
01:000C27DC 4CDF0001        	   150:             movem.l (A7)+,d0
01:000C27E0 4E75            	   151:             rts
                            	   152: 
                            	   153: * KEYBOARD INPUT INTO D5 WITHOUT ECHO
                            	   154: *
                            	   155: *    INPUT: NONE
                            	   156: *    OUTPUT: D5 HOLDS 8-BIT CHARACTER INPUT
                            	   157: *    REGISTERS USED: PRESERVED (EXCEPT D5 HOLDS CHAR)
                            	   158: 
01:000C27E2 48E78000        	   159: KINPUT      movem.l d0,-(A7)
01:000C27E6 4EB9000C0C74    	   160:             jsr inch1
01:000C27EC 2A00            	   161:             move.l d0,d5
01:000C27EE 4CDF0001        	   162:             movem.l (A7)+,d0
01:000C27F2 4E75            	   163:             rts
                            	   164: 
                            	   165: 
                            	   166: * RE-ENTER MONITOR WITHOUT RESET
                            	   167: *
                            	   168: *    INPUT: NONE
                            	   169: *    OUTPUT: NONE
                            	   170: *    REGISTERS USED: A5 AND A7; CHANGED, IRRELEVANT
                            	   171: 
01:000C27F4 4EF9000C0362    	   172: MONITX    jmp mwarm
                            	   173: 
                            	   174: * RESET MONITOR/SYSTEM AS IF RESET FROM SCRATCH
                            	   175: 
01:000C27FA 4EF9000C02FA    	   176: RESETX    jmp mcold
                            	   177: 
                            	   178: * TIMER ON, OFF, INIT
                            	   179: * THESE ROUTINES DO NOTHING NOW, ARE STRICTLY PREPARATION
                            	   180: * FOR FUTURE ENHANCEMENTS
                            	   181: *
                            	   182: *    INPUT: NONE
                            	   183: *    OUTPUT: NONE
                            	   184: *    REGISTERS USED: NONE
                            	   185: 
01:000C2800 4E75            	   186: TIMRTS    RTS                      RTS DO NOTHING
                            	   187: 
                            	   188: *****************************************
                            	   189: *** --- PART 3 - GET DATE ROUTINE --- ***
                            	   190: *****************************************
                            	   191: 
                            	   192: * IF THE SYSTEM HAS A CLOCK/CALENDARY CHIP, THEN
                            	   193: * THIS ROUTINE WOULD GET THE DATE DURING BOOTING,
                            	   194: * AND PUT IT INTO THE MONTH, DAY, YEAR LOCATIONS.
                            	   195: * DO NOTHING OTHERWISE
                            	   196: * ALL REGISTERS MUST BE PRESERVED
                            	   197: 
01:000C2802 4E75            	   198: GDATE rts
                            	   199: 
                            	   200: *****************************************
                            	   201: *** --- PART 4 - GET TIME ROUTINE --- ***
                            	   202: *****************************************
                            	   203: 
                            	   204: * IF THE SYSTEM HAS A CLOCK/CALENDARY CHIP, THEN
                            	   205: * THIS ROUTINE WOULD BE CALLED EACH TIME A FILE IS
                            	   206: * OPENED FOR WRITING, WOULD GET THE CURRENT TIME,
                            	   207: * AND PACK IT INTO A ONE-BYTE NUMBER IN D5.B.
                            	   208: * DO NOTHING OTHERWISE.
                            	   209: * ALL REGISTERS MUST BE PRESERVED
                            	   210: 
01:000C2804 4E75            	   211: GTIME rts
                            	   212: 
                            	   213: *********************************
                            	   214: **** --- PART 5 - OFFSET --- ****
                            	   215: *********************************
                            	   216: 
                            	   217: *********************************
                            	   218: **** --- PART 6 - VECTORS --- ****
                            	   219: *********************************
                            	   220: 
                            	   221: * perform any necessary OS init
01:000C2806 41F9000C282E    	   222: osinit    lea.l  os_jmptab,a0       overlay jump table entries
                            	   223: 
                            	   224: *                                    overlay system vars
01:000C280C 0C90FFFFFFFF    	   225: ojtlp     cmp.l   #$FFFFFFFF,(a0)
01:000C2812 6700000E        	   226:           beq ojt1
                            	   227: *
01:000C2816 2258            	   228:           move.l (a0)+,a1         pick up the address
01:000C2818 32D8            	   229:           move.w (a0)+,(a1)+      move the jump instruction
01:000C281A 32D8            	   230:           move.w (a0)+,(a1)+
01:000C281C 32D8            	   231:           move.w (a0)+,(a1)+
01:000C281E 6000FFEC        	   232:           bra ojtlp     
                            	   233: *
01:000C2822 23FC00037FFF0000	   234: ojt1      move.l  #$37FFF,MEMINI      fix memend
01:000C282A 101C
01:000C282C 4E75            	   235:           rts 
                            	   236: *
01:000C282E 0000110C        	   237: os_jmptab dc.l DIREAD
01:000C2832 4EF9000C2750    	   238:           JMP PRIMRD               PRIMARY READ ROUTINE
                            	   239: *
01:000C2838 00001112        	   240:           dc.l DIWRIT
01:000C283C 4EF9000C2784    	   241:           JMP PRIMWR               PRIMARY WRITE ROUTINE
                            	   242: *
01:000C2842 00001186        	   243:           dc.l STATVE
01:000C2846 4EF9000C27B8    	   244:           JMP STAT                 CHECK KEYBOARD STATUS
                            	   245: *
01:000C284C 0000118C        	   246:           dc.l OUTCHV
01:000C2850 4EF9000C27BE    	   247:           JMP OUTEEE               OUTPUT CHARACTER TO TERMINAL
                            	   248: *
01:000C2856 00001192        	   249:           dc.l INCHV
01:000C285A 4EF9000C27D0    	   250:           JMP INEEE                KEYBOARD INPUT WITH ECHO
                            	   251: *
01:000C2860 00001198        	   252:           dc.l KINPUV
01:000C2864 4EF9000C27E2    	   253:           JMP KINPUT               KEYBOARD INPUT WITHOUT ECHO
                            	   254: *
01:000C286A 000011AA        	   255:           dc.l MONITV
01:000C286E 4EF9000C27F4    	   256:           JMP MONITX               RE-ENTER MONITOR
                            	   257: *
01:000C2874 000011B0        	   258:           dc.l RESETV              RESET MONITOR / SYSTEM
01:000C2878 4EF9000C27FA    	   259:           JMP RESETX
                            	   260: *
01:000C287E 000011B6        	   261:           dc.l TIMINI
01:000C2882 4EF9000C2800    	   262:           JMP TIMRTS               TIMER INITIALIZE
                            	   263: *
01:000C2888 000011BC        	   264:           dc.l TIMOFF
01:000C288C 4EF9000C2800    	   265:           JMP TIMRTS               TIMER OFF
                            	   266: *
01:000C2892 000011C2        	   267:           dc.l TIMON
01:000C2896 4EF9000C2800    	   268:           JMP TIMRTS               TIMER ON
                            	   269: *
                            	   270: *          dc.l GETDAT               NOTHING NEEDED HERE
                            	   271: *          jmp GDATE
                            	   272: *
                            	   273: *          dc.l INTIME               NOTHING NEEDED HERE
                            	   274: *          jmp GDATE
                            	   275: *
01:000C289C FFFFFFFF        	   276:           dc.l $FFFFFFFF
                            	   277: *
                            	   278: 

Source: "monk.txt"
                            	   284: *
                            	   285:  include boot.txt

Source: "boot.txt"
                            	     1: **********************
                            	     2: * OS boot SK*DOS 68K *
                            	     3: **********************
                            	     4: *
                            	     5: * SK*DOS 68K boot
01:000C28A0 0D              	     6: bos      dc.b    $d,'Booting SK*DOS 68K',$d,$a,$a,0,0
01:000C28A1 426F6F74696E6720
01:000C28A9 534B2A444F532036
01:000C28B1 384B
01:000C28B3 0D
01:000C28B4 0A
01:000C28B5 0A
01:000C28B6 00
01:000C28B7 00
01:000C28B8 41FAFFE6        	     7: bo       lea.l   bos(pc),a0
01:000C28BC 6100DB1A        	     8:          bsr     pdata1
                            	     9: *
01:000C28C0 4EB9000C2806    	    10:          jsr     osinit  overlay jump tables, get date and time etc
01:000C28C6 4EF900001000    	    11:          jmp     $1000   SK*DOS 68K cold start
                            	    12: *
                            	    13: * OS9 boot
01:000C28CC 4EF9000C0362    	    14: ob       jmp mwarm       move.l #$1400,a7
                            	    15: *
01:000C28D2 4EF9000C3462    	    16:          jmp  $c3462      modules are already in prom
                            	    17: *
                            	    18: 

Source: "monk.txt"
                            	   286: *
                            	   287:  include chars.txt

Source: "chars.txt"
                            	     1: **************************************
                            	     2: * MONK terminal emulator charter set *
                            	     3: **************************************
                            	     4: *
01:000C28D8 00              	     5: chrtab dc.b 0 Character = ' '
01:000C28D9 00              	     6:  dc.b 0
01:000C28DA 00              	     7:  dc.b 0
01:000C28DB 00              	     8:  dc.b 0
01:000C28DC 00              	     9:  dc.b 0
01:000C28DD 00              	    10:  dc.b 0
01:000C28DE 00              	    11:  dc.b 0
01:000C28DF 00              	    12:  dc.b 0
01:000C28E0 00              	    13:  dc.b 0
01:000C28E1 00              	    14:  dc.b 0
01:000C28E2 00              	    15:  dc.b 0
                            	    16: *
                            	    17:  NOLIST
                            	  1160: *
01:000C2CF8 7F              	  1161:  dc.b $7f Cursor type 1
01:000C2CF9 7F              	  1162:  dc.b $7f
01:000C2CFA 7F              	  1163:  dc.b $7f
01:000C2CFB 7F              	  1164:  dc.b $7f
01:000C2CFC 7F              	  1165:  dc.b $7f
01:000C2CFD 7F              	  1166:  dc.b $7f
01:000C2CFE 7F              	  1167:  dc.b $7f
01:000C2CFF 7F              	  1168:  dc.b $7f
01:000C2D00 7F              	  1169:  dc.b $7f
01:000C2D01 00              	  1170:  dc.b 0
01:000C2D02 00              	  1171:  dc.b 0
                            	  1172: *
01:000C2D03 63              	  1173:  dc.b %01100011 Cursor type 2
01:000C2D04 41              	  1174:  dc.b %01000001
01:000C2D05 41              	  1175:  dc.b %01000001
01:000C2D06 00              	  1176:  dc.b 0
01:000C2D07 00              	  1177:  dc.b 0
01:000C2D08 00              	  1178:  dc.b 0
01:000C2D09 41              	  1179:  dc.b %01000001
01:000C2D0A 41              	  1180:  dc.b %01000001
01:000C2D0B 63              	  1181:  dc.b %01100011
01:000C2D0C 00              	  1182:  dc.b 0
01:000C2D0D 00              	  1183:  dc.b 0
                            	  1184: *
                            	  1185: 

Source: "monk.txt"
                            	   288: *
                            	   289:  end
                            	   290: 


Symbols by name:
a_boot                           E:00000005
a_excpt                          A:000C07AE
ab1                              A:000C08C4
ab10                             A:000C0959
ab11                             A:000C0974
ab12                             A:000C0987
ab13                             A:000C099C
ab14                             A:000C09AE
ab15                             A:000C09BD
ab16                             A:000C09C8
ab2                              A:000C08CF
ab3                              A:000C08DD
ab4                              A:000C08F1
ab5                              A:000C0902
ab6                              A:000C0910
ab7                              A:000C0920
ab8                              A:000C0934
ab9                              A:000C093E
abotab                           A:000C09DC
acia                             E:000FF001
ad                               A:000C1DAC
ad2                              A:000C1DB6
addlp                            A:000C19BE
adloop                           A:000C1DC4
adloop1                          A:000C1DD6
ads                              A:000C1D44
ads1                             A:000C1D60
adx                              A:000C1DE4
ady                              A:000C1DE6
ao                               A:000C0FC8
at                               A:000C0FBE
ays                              A:000C254E
b_excpt                          A:000C07AC
beep                             A:000C05D8
bflg                             A:0007FC7C
bitblt                           A:000C07AA
bl                               A:000C0ECA
bload                            A:000C0732
bo                               A:000C28B8
border                           A:000C0792
bos                              A:000C28A0
br                               A:000C2336
bre                              A:000C238E
brk                              A:000C2342
brk0                             A:000C234A
brk01                            A:000C235E
brke                             A:000C23D0
brkl                             A:000C0836
brkl1                            A:000C0844
brkp                             A:0007FC5E
brs                              A:000C2320
bs                               A:000C0ECE
bse                              A:000C0EDE
bstore                           A:000C0738
c0                               A:000C170E
c1                               A:000C1716
c2                               A:000C172C
c_code                           A:000C0E46
c_excpt                          A:000C07B4
cas                              A:000C16DB
ccrok                            A:000C0E3C
cgo                              A:000C2062
chrtab                           A:000C28D8
circle                           A:000C0798
clearg                           A:000C0764
cleart                           A:000C1074
cloop                            A:000C030E
cloop1                           A:000C033A
clt                              A:000C0652
co                               A:000C1C2A
col                              A:0007FCB2
col_lut                          A:000C06E6
colp                             A:000C1C32
colp1                            A:000C1C4C
comloop                          A:000C0384
comtab                           A:000C10D2
copyrght                         A:000C02A0
cp                               A:000C22DC
cps                              A:000C22C0
cr                               A:000C0F24
crcs                             A:000C25DF
crlfs                            A:000C03C8
crok                             A:000C0D7C
cs                               A:000C16EA
cse                              A:000C1942
css                              A:000C16BA
ctl1                             A:000C1082
cts                              A:000C16D5
cursor                           A:000C10BA
d_excpt                          A:000C07B2
das                              A:000C2639
data0                            E:00000006
data1                            E:00000016
date                             A:0007FCAE
datlp                            A:000C19CC
day                              A:0007FCAF
db                               A:000C23A2
dbs                              A:000C2372
dc                               A:000C1A52
dcs                              A:000C1A44
dds                              A:000C2586
delay                            A:000C03F2
deol1                            A:000C0F54
deol2                            A:000C0F5C
deop_1                           A:000C0F9C
deope                            A:000C0FAE
derror                           A:000C0BE2
df                               A:000C25A6
df_nok                           A:000C2564
dfs                              A:000C2520
diloop                           A:000C2740
DIREAD                           E:0000110C
DIWRIT                           E:00001112
dl                               A:000C0F38
dloop1                           A:000C03F6
dloop2                           A:000C03FA
dls                              A:000C25EA
dma                              A:0007FCA4
dma_len                          A:0007FC8C
dp                               A:000C1BDA
dp1                              A:000C1C24
dp2                              A:000C1BE4
dploop                           A:000C1BF2
dps                              A:000C1B7E
dps1                             A:000C1B9E
dr                               A:000C211E
drs                              A:000C2102
drs1                             A:000C2116
drs2                             A:000C211A
drv_tab                          A:000C0A66
drx                              A:000C212C
drx1                             A:000C218C
drx2                             A:000C218E
dscr1                            A:000C105C
dscrloop                         A:000C106C
dscrok                           A:000C1046
dsecs                            A:0007FCAB
dummy                            A:000C03C6
dvs                              A:000C0752
ebs                              A:000C1F68
el                               A:000C0F3A
ep                               A:000C0F6C
errcount                         A:0007FC89
ers                              A:000C264A
es                               A:000C0FBC
esc1                             A:000C0EB6
esc_proc                         A:000C0E94
excp1                            A:000C07CC
excp10                           A:000C07EE
excp2                            A:000C0800
excp3                            A:000C084A
excp4                            A:000C084C
excp5                            A:000C0870
excp6                            A:000C0898
FCBCSE                           E:00000023
FCBCTR                           E:00000022
FCBDAT                           E:00000060
FCBDRV                           E:00000003
fchk1                            A:000C1FC0
fcmd                             A:000C0BD8
fdc                              E:000F4001
fdcb                             A:000C2678
fdcerr                           A:0007FC8A
fds                              A:000C2616
ff                               A:000C0F1A
ffound                           A:000C1FDA
fhd1                             A:000C2004
fhdx                             A:000C2022
fhdy                             A:000C2024
fi                               A:000C1F80
fill                             A:000C079C
fis                              A:000C1F32
flash                            A:0007FCB8
flood                            A:000C079E
floop1                           A:000C1FF0
floop2                           A:000C2014
fm                               A:000C1E64
fmloop                           A:000C1E80
fms                              A:000C1E38
fnope                            A:000C1FCA
found                            A:000C0396
fread                            A:000C0BDE
frestore                         A:000C0BDA
frread                           A:000C0B66
frrlp                            A:000C0B8C
frwlp                            A:000C0BC4
frwrite                          A:000C0B9E
fseek                            A:000C0BDC
ftrack                           A:0007FC86
fwait                            A:000C0BD6
fwrite                           A:000C0BE0
GDATE                            A:000C2802
get_rec                          A:000C19A2
getrtc                           A:000C0568
go1                              A:000C2050
go2                              A:000C2072
go3                              A:000C2084
goerr                            A:000C2314
goerrs                           A:000C2300
grey_lut                         A:000C06D6
GTIME                            A:000C2804
hd                               A:000C1CBE
hd1                              A:000C1D1A
hd2                              A:000C1CC8
hdr                              A:000C02C0
hds                              A:000C1C68
hds1                             A:000C1C83
hdx                              A:000C1D38
hdy                              A:000C1D3A
he                               A:000C16AE
hes                              A:000C11AC
hi_g1                            A:000C078E
hi_g2                            A:000C0790
hi_graph                         A:000C0760
hitab                            A:000C070A
hks                              A:000C24C9
hloop                            A:000C1CD6
ho                               A:000C0F1E
hours                            A:0007FCA8
ht                               A:000C0EE0
hte                              A:000C0EF0
i_excpt                          A:000C07B0
id                               A:000C26FC
id1                              A:000C26CF
ids                              A:000C26B4
ids2                             A:000C26E9
il                               A:000C0F36
in                               A:000C05F4
in_loop                          A:000C0608
inch                             A:000C0C9C
inch1                            A:000C0C74
INCHV                            E:00001192
INEEE                            A:000C27D0
inhex                            A:000C0408
inhex1                           A:000C040C
inhex2                           A:000C041A
inhex3                           A:000C0438
init_ip                          E:00000003
init_op                          E:00000004
inkey                            A:000C0CDE
inloop                           A:000C1FAE
int                              A:000C07C2
int7                             A:000C07C4
intab                            A:000C0C8C
inter0                           A:000C0CEC
inter1                           A:000C0CFA
iport                            A:0007FC7D
is1                              A:000C06A0
is2                              A:000C06A8
is3                              A:000C06B8
is4                              A:000C06C0
j_disk                           A:000C01B6
j_table                          E:0007FE00
jloop                            A:000C0324
jmp_tab                          A:000C00C0
jps                              A:000C20AC
js                               A:000C20F4
ju                               A:000C20C2
jvs                              A:000C20D2
KINPUT                           A:000C27E2
KINPUV                           E:00001198
lengths                          A:000C1E9E
lf                               A:000C0EF2
line                             A:000C0778
lk                               A:000C1F0C
lkloop                           A:000C1F1E
lks                              A:000C1ED0
lks1                             A:000C1EF7
lo_graph                         A:000C075C
load_lut                         A:000C074C
loadcmr                          A:000C078C
loc1                             A:000C045E
locase                           A:000C044E
locate                           A:000C07A4
loop                             A:000C1CF4
loop1                            A:000C1D06
loop2                            A:000C1D2A
lotab                            A:000C071E
lp                               A:000C1BFC
lp1                              A:000C1C0E
mc                               A:000C1B00
mc1                              A:000C1B46
mc2                              A:000C1B50
mcloop                           A:000C1B08
mcloop1                          A:000C1B20
mcold                            A:000C02FA
mcs                              A:000C1AE2
me                               A:000C175E
me1                              A:000C179A
me2                              A:000C17A6
me3                              A:000C17B0
me4                              A:000C17BC
me5                              A:000C17C8
me6                              A:000C17D4
me7                              A:000C17FC
me8                              A:000C1810
meerr                            A:000C1820
meloop                           A:000C176A
meloop1                          A:000C1780
MEMINI                           E:0000101C
mes                              A:000C173E
minit                            A:000C064C
mins                             A:0007FCA9
MONITV                           E:000011AA
MONITX                           A:000C27F4
mono_lut                         A:000C06C6
month                            A:0007FCAD
mouse                            A:000C07A6
move                             A:000C076A
move_b                           A:000C0748
mv                               A:000C0F2C
mvc1                             A:000C0DBC
mwarm                            A:000C0362
nbs                              A:000C1F4A
nothex                           A:000C043E
notthere                         A:000C03BC
nts                              A:000C039A
nu                               A:000C0EC8
o_excpt                          A:000C07B6
ob                               A:000C28CC
offset                           A:0007FCB6
ojt1                             A:000C2822
ojtlp                            A:000C280C
olddrv                           A:0007FC84
oldfdv                           A:0007FC85
oport                            A:0007FC7E
os_jmptab                        A:000C282E
osinit                           A:000C2806
out                              A:000C0620
out1                             A:000C0486
out2h                            A:000C046C
out4h                            A:000C0466
out8h                            A:000C0460
out_loop                         A:000C0634
outch                            A:000C0C9E
OUTCHV                           E:0000118C
OUTEEE                           A:000C27BE
outh                             A:000C0472
outns                            A:000C049A
outns1                           A:000C049C
outpri                           A:000C0D20
outs                             A:000C048E
outtab                           A:000C0CB0
outter0                          A:000C0D08
outter1                          A:000C0D14
outvdu                           A:000C0D22
ov1                              A:000C0E0C
ov2                              A:000C0DFC
p_down                           A:0007FC7F
p_excpt                          A:000C07B8
pan                              A:000C07A2
parse                            A:000C0380
patdef                           A:000C079A
pcrlf                            A:000C03CC
pdata1                           A:000C03D8
pdend                            A:000C03E4
pdloop                           A:000C03DA
pdread                           A:000C0AF6
pdrlp                            A:000C0B1C
pdwlp                            A:000C0B4C
pdwrite                          A:000C0B2E
pm                               A:000C1E1C
pms                              A:000C1E0A
point                            A:000C077E
PRIMRD                           A:000C2750
PRIMWR                           A:000C2784
prmpt                            A:000C02F6
prom                             E:000C0000
prompt                           A:000C03EC
pstring                          A:000C03E8
putrtc                           A:000C04F8
query                            A:000C0796
r1                               A:000C04BA
r2                               A:000C04C4
r3                               A:000C04C6
r4                               A:000C04D2
r5                               A:000C04E6
ram                              E:0007FC00
ram_ok                           A:000C034C
rand                             A:0007FC80
randloop                         A:000C04DA
random                           A:000C04A6
rbuff                            E:00028000
rctocr                           A:000C0E12
rdpnt                            A:000C0BE4
read                             A:000C0A5A
rect                             A:000C0784
RESETV                           E:000011B0
RESETX                           A:000C27FA
restore                          A:000C0A4E
rms                              E:000FFE00
row                              A:0007FCB0
rp                               A:000C2042
rps                              A:000C202E
rread                            A:000C0C08
rrlp                             A:000C0C18
rs                               A:000C2600
rss                              A:000C25AA
rtc                              E:000F0001
rtrk                             A:0007FC88
rwlp                             A:000C0C36
rwrite                           A:000C0C26
s_excpt                          A:000C07C0
s_stack                          E:0007FDFE
sa                               A:000C21CC
sas                              A:000C21AE
scr1                             A:000C1002
scr_dwn                          A:000C101A
scr_up                           A:000C0FD2
scrdzz1                          A:000C102C
scrloop                          A:000C1012
scrok                            A:000C0FEC
scroll                           A:000C07A0
sd                               A:000C220E
sds                              A:000C21F2
secs                             A:0007FCAA
sector                           A:0007FCA2
seek                             A:000C0A54
sel_end                          A:000C0A36
sel_err                          A:000C0A46
select                           A:000C09FC
selfp                            A:000C0A12
sellp                            A:000C0A30
setpen                           A:000C0794
si                               A:000C23F0
sidex                            A:0007FCC2
sidey                            A:0007FCC4
sis                              A:000C23DC
sm                               A:000C1EA8
smloop                           A:000C1EC6
sms                              A:000C1E8A
snfs                             A:000C25CD
so                               A:000C241A
sos                              A:000C2404
sp                               A:000C227C
sps                              A:000C2262
sr                               A:000C1956
sr3                              A:000C1A04
sr4                              A:000C1A1E
srbyte                           A:000C19E6
srbyte1                          A:000C19EC
srerr                            A:000C1996
srint                            A:000C1A2A
srint1                           A:000C1A3A
srloop                           A:000C195E
srs                              A:000C192C
ss                               A:000C224E
ssecs                            A:000C2630
sss                              A:000C2234
stakey                           A:000C0CC0
STAT                             A:000C27B8
stat0                            E:00000002
stat1                            E:00000012
statab                           A:000C0C64
stater0                          A:000C0CCA
stater1                          A:000C0CD4
status                           A:000C0C44
STATVE                           E:00001186
stp                              E:00000003
stt1                             A:000C0C5C
sync                             A:000C073E
sys_dcb                          A:0007FC9E
t_excpt                          A:000C07BA
table                            A:000C0E54
td                               A:000C244A
tdl                              A:000C2478
tds                              A:000C242E
temp                             A:0007FCC6
text                             A:000C0758
time_st                          E:0007FCA8
TIMINI                           E:000011B6
TIMOFF                           E:000011BC
TIMON                            E:000011C2
TIMRTS                           A:000C2800
tm                               A:000C186A
tm2                              A:000C188C
tm4                              A:000C18E0
tm9                              A:000C189E
tmchk                            A:000C189C
tmerr                            A:000C18AC
tmfill                           A:000C188A
tmkey                            A:000C18E6
tmpass                           A:000C1906
tms                              A:000C182C
tms2                             A:000C1848
tms3                             A:000C185C
tos                              A:000C1E59
tr                               A:000C22A6
track                            A:0007FCA0
trks                             A:000C2628
trp                              A:000C07C6
trp14                            A:000C07C8
trp15                            A:000C07CA
trs                              A:000C2290
ts                               A:000C24E4
tsl                              A:000C2506
tss                              A:000C24B0
txttab                           A:000C06F6
u_stack                          E:0007FDFE
ua                               A:0007FC38
ud                               A:0007FC18
upc                              A:0007FC5A
usptr                            A:0007FC54
usr                              A:0007FC58
values                           A:000C1E5D
vduflags                         A:0007FCB4
VRBLES                           E:00001400
vt                               A:000C0F06
vte                              A:000C0F18
winidcb                          A:0007FC8E
wordblt                          A:000C07A8
wps                              A:000C25B0
wrabo                            A:000C08AC
write                            A:000C0A60
wrtrk                            A:0007FC9A
ws                               A:000C2662
wss                              A:000C265A
wtrk                             A:0007FC87
wwtrk                            A:0007FC9C
x_excpt                          A:000C07BC
xpos                             A:0007FCBA
xtemp                            A:0007FCBE
y_excpt                          A:000C07BE
year                             A:0007FCAC
ypos                             A:0007FCBC
ytemp                            A:0007FCC0

Symbols by value:
00000002 stat0
00000003 stp
00000003 FCBDRV
00000003 init_ip
00000004 init_op
00000005 a_boot
00000006 data0
00000012 stat1
00000016 data1
00000022 FCBCTR
00000023 FCBCSE
00000060 FCBDAT
0000101C MEMINI
0000110C DIREAD
00001112 DIWRIT
00001186 STATVE
0000118C OUTCHV
00001192 INCHV
00001198 KINPUV
000011AA MONITV
000011B0 RESETV
000011B6 TIMINI
000011BC TIMOFF
000011C2 TIMON
00001400 VRBLES
00028000 rbuff
0007FC00 ram
0007FC18 ud
0007FC38 ua
0007FC54 usptr
0007FC58 usr
0007FC5A upc
0007FC5E brkp
0007FC7C bflg
0007FC7D iport
0007FC7E oport
0007FC7F p_down
0007FC80 rand
0007FC84 olddrv
0007FC85 oldfdv
0007FC86 ftrack
0007FC87 wtrk
0007FC88 rtrk
0007FC89 errcount
0007FC8A fdcerr
0007FC8C dma_len
0007FC8E winidcb
0007FC9A wrtrk
0007FC9C wwtrk
0007FC9E sys_dcb
0007FCA0 track
0007FCA2 sector
0007FCA4 dma
0007FCA8 time_st
0007FCA8 hours
0007FCA9 mins
0007FCAA secs
0007FCAB dsecs
0007FCAC year
0007FCAD month
0007FCAE date
0007FCAF day
0007FCB0 row
0007FCB2 col
0007FCB4 vduflags
0007FCB6 offset
0007FCB8 flash
0007FCBA xpos
0007FCBC ypos
0007FCBE xtemp
0007FCC0 ytemp
0007FCC2 sidex
0007FCC4 sidey
0007FCC6 temp
0007FDFE s_stack
0007FDFE u_stack
0007FE00 j_table
000C0000 prom
000C00C0 jmp_tab
000C01B6 j_disk
000C02A0 copyrght
000C02C0 hdr
000C02F6 prmpt
000C02FA mcold
000C030E cloop
000C0324 jloop
000C033A cloop1
000C034C ram_ok
000C0362 mwarm
000C0380 parse
000C0384 comloop
000C0396 found
000C039A nts
000C03BC notthere
000C03C6 dummy
000C03C8 crlfs
000C03CC pcrlf
000C03D8 pdata1
000C03DA pdloop
000C03E4 pdend
000C03E8 pstring
000C03EC prompt
000C03F2 delay
000C03F6 dloop1
000C03FA dloop2
000C0408 inhex
000C040C inhex1
000C041A inhex2
000C0438 inhex3
000C043E nothex
000C044E locase
000C045E loc1
000C0460 out8h
000C0466 out4h
000C046C out2h
000C0472 outh
000C0486 out1
000C048E outs
000C049A outns
000C049C outns1
000C04A6 random
000C04BA r1
000C04C4 r2
000C04C6 r3
000C04D2 r4
000C04DA randloop
000C04E6 r5
000C04F8 putrtc
000C0568 getrtc
000C05D8 beep
000C05F4 in
000C0608 in_loop
000C0620 out
000C0634 out_loop
000C064C minit
000C0652 clt
000C06A0 is1
000C06A8 is2
000C06B8 is3
000C06C0 is4
000C06C6 mono_lut
000C06D6 grey_lut
000C06E6 col_lut
000C06F6 txttab
000C070A hitab
000C071E lotab
000C0732 bload
000C0738 bstore
000C073E sync
000C0748 move_b
000C074C load_lut
000C0752 dvs
000C0758 text
000C075C lo_graph
000C0760 hi_graph
000C0764 clearg
000C076A move
000C0778 line
000C077E point
000C0784 rect
000C078C loadcmr
000C078E hi_g1
000C0790 hi_g2
000C0792 border
000C0794 setpen
000C0796 query
000C0798 circle
000C079A patdef
000C079C fill
000C079E flood
000C07A0 scroll
000C07A2 pan
000C07A4 locate
000C07A6 mouse
000C07A8 wordblt
000C07AA bitblt
000C07AC b_excpt
000C07AE a_excpt
000C07B0 i_excpt
000C07B2 d_excpt
000C07B4 c_excpt
000C07B6 o_excpt
000C07B8 p_excpt
000C07BA t_excpt
000C07BC x_excpt
000C07BE y_excpt
000C07C0 s_excpt
000C07C2 int
000C07C4 int7
000C07C6 trp
000C07C8 trp14
000C07CA trp15
000C07CC excp1
000C07EE excp10
000C0800 excp2
000C0836 brkl
000C0844 brkl1
000C084A excp3
000C084C excp4
000C0870 excp5
000C0898 excp6
000C08AC wrabo
000C08C4 ab1
000C08CF ab2
000C08DD ab3
000C08F1 ab4
000C0902 ab5
000C0910 ab6
000C0920 ab7
000C0934 ab8
000C093E ab9
000C0959 ab10
000C0974 ab11
000C0987 ab12
000C099C ab13
000C09AE ab14
000C09BD ab15
000C09C8 ab16
000C09DC abotab
000C09FC select
000C0A12 selfp
000C0A30 sellp
000C0A36 sel_end
000C0A46 sel_err
000C0A4E restore
000C0A54 seek
000C0A5A read
000C0A60 write
000C0A66 drv_tab
000C0AF6 pdread
000C0B1C pdrlp
000C0B2E pdwrite
000C0B4C pdwlp
000C0B66 frread
000C0B8C frrlp
000C0B9E frwrite
000C0BC4 frwlp
000C0BD6 fwait
000C0BD8 fcmd
000C0BDA frestore
000C0BDC fseek
000C0BDE fread
000C0BE0 fwrite
000C0BE2 derror
000C0BE4 rdpnt
000C0C08 rread
000C0C18 rrlp
000C0C26 rwrite
000C0C36 rwlp
000C0C44 status
000C0C5C stt1
000C0C64 statab
000C0C74 inch1
000C0C8C intab
000C0C9C inch
000C0C9E outch
000C0CB0 outtab
000C0CC0 stakey
000C0CCA stater0
000C0CD4 stater1
000C0CDE inkey
000C0CEC inter0
000C0CFA inter1
000C0D08 outter0
000C0D14 outter1
000C0D20 outpri
000C0D22 outvdu
000C0D7C crok
000C0DBC mvc1
000C0DFC ov2
000C0E0C ov1
000C0E12 rctocr
000C0E3C ccrok
000C0E46 c_code
000C0E54 table
000C0E94 esc_proc
000C0EB6 esc1
000C0EC8 nu
000C0ECA bl
000C0ECE bs
000C0EDE bse
000C0EE0 ht
000C0EF0 hte
000C0EF2 lf
000C0F06 vt
000C0F18 vte
000C0F1A ff
000C0F1E ho
000C0F24 cr
000C0F2C mv
000C0F36 il
000C0F38 dl
000C0F3A el
000C0F54 deol1
000C0F5C deol2
000C0F6C ep
000C0F9C deop_1
000C0FAE deope
000C0FBC es
000C0FBE at
000C0FC8 ao
000C0FD2 scr_up
000C0FEC scrok
000C1002 scr1
000C1012 scrloop
000C101A scr_dwn
000C102C scrdzz1
000C1046 dscrok
000C105C dscr1
000C106C dscrloop
000C1074 cleart
000C1082 ctl1
000C10BA cursor
000C10D2 comtab
000C11AC hes
000C16AE he
000C16BA css
000C16D5 cts
000C16DB cas
000C16EA cs
000C170E c0
000C1716 c1
000C172C c2
000C173E mes
000C175E me
000C176A meloop
000C1780 meloop1
000C179A me1
000C17A6 me2
000C17B0 me3
000C17BC me4
000C17C8 me5
000C17D4 me6
000C17FC me7
000C1810 me8
000C1820 meerr
000C182C tms
000C1848 tms2
000C185C tms3
000C186A tm
000C188A tmfill
000C188C tm2
000C189C tmchk
000C189E tm9
000C18AC tmerr
000C18E0 tm4
000C18E6 tmkey
000C1906 tmpass
000C192C srs
000C1942 cse
000C1956 sr
000C195E srloop
000C1996 srerr
000C19A2 get_rec
000C19BE addlp
000C19CC datlp
000C19E6 srbyte
000C19EC srbyte1
000C1A04 sr3
000C1A1E sr4
000C1A2A srint
000C1A3A srint1
000C1A44 dcs
000C1A52 dc
000C1AE2 mcs
000C1B00 mc
000C1B08 mcloop
000C1B20 mcloop1
000C1B46 mc1
000C1B50 mc2
000C1B7E dps
000C1B9E dps1
000C1BDA dp
000C1BE4 dp2
000C1BF2 dploop
000C1BFC lp
000C1C0E lp1
000C1C24 dp1
000C1C2A co
000C1C32 colp
000C1C4C colp1
000C1C68 hds
000C1C83 hds1
000C1CBE hd
000C1CC8 hd2
000C1CD6 hloop
000C1CF4 loop
000C1D06 loop1
000C1D1A hd1
000C1D2A loop2
000C1D38 hdx
000C1D3A hdy
000C1D44 ads
000C1D60 ads1
000C1DAC ad
000C1DB6 ad2
000C1DC4 adloop
000C1DD6 adloop1
000C1DE4 adx
000C1DE6 ady
000C1E0A pms
000C1E1C pm
000C1E38 fms
000C1E59 tos
000C1E5D values
000C1E64 fm
000C1E80 fmloop
000C1E8A sms
000C1E9E lengths
000C1EA8 sm
000C1EC6 smloop
000C1ED0 lks
000C1EF7 lks1
000C1F0C lk
000C1F1E lkloop
000C1F32 fis
000C1F4A nbs
000C1F68 ebs
000C1F80 fi
000C1FAE inloop
000C1FC0 fchk1
000C1FCA fnope
000C1FDA ffound
000C1FF0 floop1
000C2004 fhd1
000C2014 floop2
000C2022 fhdx
000C2024 fhdy
000C202E rps
000C2042 rp
000C2050 go1
000C2062 cgo
000C2072 go2
000C2084 go3
000C20AC jps
000C20C2 ju
000C20D2 jvs
000C20F4 js
000C2102 drs
000C2116 drs1
000C211A drs2
000C211E dr
000C212C drx
000C218C drx1
000C218E drx2
000C21AE sas
000C21CC sa
000C21F2 sds
000C220E sd
000C2234 sss
000C224E ss
000C2262 sps
000C227C sp
000C2290 trs
000C22A6 tr
000C22C0 cps
000C22DC cp
000C2300 goerrs
000C2314 goerr
000C2320 brs
000C2336 br
000C2342 brk
000C234A brk0
000C235E brk01
000C2372 dbs
000C238E bre
000C23A2 db
000C23D0 brke
000C23DC sis
000C23F0 si
000C2404 sos
000C241A so
000C242E tds
000C244A td
000C2478 tdl
000C24B0 tss
000C24C9 hks
000C24E4 ts
000C2506 tsl
000C2520 dfs
000C254E ays
000C2564 df_nok
000C2586 dds
000C25A6 df
000C25AA rss
000C25B0 wps
000C25CD snfs
000C25DF crcs
000C25EA dls
000C2600 rs
000C2616 fds
000C2628 trks
000C2630 ssecs
000C2639 das
000C264A ers
000C265A wss
000C2662 ws
000C2678 fdcb
000C26B4 ids
000C26CF id1
000C26E9 ids2
000C26FC id
000C2740 diloop
000C2750 PRIMRD
000C2784 PRIMWR
000C27B8 STAT
000C27BE OUTEEE
000C27D0 INEEE
000C27E2 KINPUT
000C27F4 MONITX
000C27FA RESETX
000C2800 TIMRTS
000C2802 GDATE
000C2804 GTIME
000C2806 osinit
000C280C ojtlp
000C2822 ojt1
000C282E os_jmptab
000C28A0 bos
000C28B8 bo
000C28CC ob
000C28D8 chrtab
000F0001 rtc
000F4001 fdc
000FF001 acia
000FFE00 rms
